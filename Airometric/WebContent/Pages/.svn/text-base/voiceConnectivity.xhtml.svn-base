<!DOCTYPE html [
    <!ENTITY nbsp "&#160;"> 
]>
<html  xmlns="http://www.w3.org/1999/xhtml" lang="en" 
	   xmlns:ui="http://java.sun.com/jsf/facelets"
	   xmlns:f="http://java.sun.com/jsf/core"
	   xmlns:h="http://java.sun.com/jsf/html"
	   xmlns:a4j="http://richfaces.org/a4j"
	   xmlns:c="http://java.sun.com/jsp/jstl/core" 
	   xmlns:rich="http://richfaces.org/rich" 
	   xmlns:p="http://primefaces.org/ui"
	   ng-app="app">
  <h:head>
   <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	<h:outputStylesheet library="css" name="bootstrap_voice.css"  /> 
    <h:outputStylesheet library="css" name="bootstrap-theme.min.css"  /> 
	<h:outputStylesheet library="css" name="styleAnalytics.css"  /> 
	<h:outputStylesheet library="css" name="reportMap.css"  /> 
	 <h:outputScript library="js" name="reportMap.js"/> 
    <h:outputScript library="js" name="jquery-1.9.1.js" />
	 <h:outputScript library="js" name="highcharts.js"/>
 <h:outputScript library="js" name="data.js"/>
 <h:outputScript library="js" name="exporting.js"/>
 <h:outputScript library="js" name="no-data-to-display.src.js"/>
<h:outputScript library="js" name="grouped-categories.js"/> 
<h:outputScript library="js" name="map.js"  />
	

	  <h:outputStylesheet library="css" name="please_wait.css"  /> 
	  <h:outputScript library="js" name="please_wait.js" />
	   <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
  

          <style type="text/css">
   #reportSubmit,
   #saveConfigs,
   #saveConfigDraft,
   #draftConfigs,
   #exportReport,
   #browse,
   #exportReport1, 
   #compare {
    background-color: #5CB85C;
    background-image: none !important;
    color:#ffffff;
   }
  
  #reportSubmit:hover,
  #saveConfigs:hover,
  #saveConfigDraft:hover,
  #draftConfigs:hover,
  #exportReport:hover,
  #browse,
  #exportReport1, 
  #compare:hover {
   background-color: #47A447;
   background-image: none !important;
   color:#ffffff;
  }
            #overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: #000;
                filter:alpha(opacity=70);
                -moz-opacity:0.7;
                -khtml-opacity: 0.7;
                opacity: 0.9;
                z-index: 100;
                display: none;
                padding-left: 550px;
                padding-top: 130px;
            }
            #overlayTest {
                position: fixed;
                top: 0; 
                left: 0;
                width: 100%;
                height: 100%;
                background-color: #000;
                filter:alpha(opacity=70);
                -moz-opacity:0.7;
                -khtml-opacity: 0.7;
                opacity: 0.9;
                z-index: 100;
                display: none;
                padding-left: 550px;
                padding-top: 130px;
            }            
            .popUpContent a {
                text-decoration: none;
            }
            .popup {
                width: 100%;
                margin: 0 auto;
                display: none;
                position: fixed;
                z-index: 101;
            }
            .popUpContent {
                /* min-width: 350px; */
                width: 400px;
                /* min-height: 100px; */
                margin: -13px;
                background: #f3f3f3;
                position: relative;
                z-index: 103;
                padding: 10px;
                border-radius: 5px;
                box-shadow: 0 2px 5px #000;
            }
            .popUpContent p {
                clear: both;
                color: #555555;
                text-align: justify;
            }
            .popUpContent p a {
                color: #d91900;
                font-weight: bold;
            }
            .popUpContent .x {
                float: right;
                height: 35px;
                left: 22px;
                position: relative;
                top: -25px;
                width: 34px;
            }
            .content .x:hover {
                cursor: pointer;
            }
            .popUpContenttest a {
                text-decoration: none;
            }
            .popuptest {
                width: 100%;
                margin: 0 auto;
                display: none;
                position: fixed;
                z-index: 101;
            }
            .popUpContenttest {
                overflow: auto;
                /* min-width: 350px; */
                width: 200px;
                height: 380px;
                /* min-height: 100px; */
                margin: -13px;
                background: #f3f3f3;
                position: relative;
                z-index: 103;
                padding: 10px;
                border-radius: 5px;
                box-shadow: 0 2px 5px #000;
            }
            .popUpContenttest p {
                clear: both;
                color: #555555;
                text-align: justify;
            }
            .popUpContenttest p a {
                color: #d91900;
                font-weight: bold;
            }
            .popUpContenttest .x {
                float: right;
                height: 35px;
                left: 22px;
                position: relative;
                top: -25px;
                width: 34px;
            }            
           #overlayFile {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: #000;
                filter:alpha(opacity=70);
                -moz-opacity:0.7;
                -khtml-opacity: 0.7;
                opacity: 0.9;
                z-index: 100;
                display: none;
                padding-left: 550px;
                padding-top: 130px;
            }   
            .popUpContentFile a {
                text-decoration: none;
            }
            .popupFile {
                width: 100%;
                margin: 0 auto;
                display: none;
                position: fixed;
                z-index: 101;
            }
            .popUpContentFile {
                /* min-width: 350px; */
                width: 280px;
                /* min-height: 100px; */
                margin: -13px;
                background: #f3f3f3;
                position: relative;
                z-index: 103;
                padding: 10px;
                border-radius: 5px;
                box-shadow: 0 2px 5px #000;
            }
            .popUpContentFile p {
                clear: both;
                color: #555555;
                text-align: justify;
            }
            .popUpContentFile p a {
                color: #d91900;
                font-weight: bold;
            }
            .popUpContentFile .x {
                float: right;
                height: 35px;
                left: 22px;
                position: relative;
                top: -25px;
                width: 34px;
            }                   

        </style>

        <script type='text/javascript'>

        //This varable are defined to get the ranges from teh database
        var upperRangeForGood = #{sessionScope['upperRangeForGood']};
        var lowerRangeForGood = #{sessionScope['lowerRangeForGood']};
        var upperRangeForPoor = #{sessionScope['upperRangeForPoor']};
        var lowerRangeForPoor = #{sessionScope['lowerRangeForPoor']};
        var upperRangeForAverage = #{sessionScope['upperRangeForAverage']};
        var lowerRangeForAverage = #{sessionScope['lowerRangeForAverage']};
        var lteupperRangeForGood = #{sessionScope['lteupperRangeForGood']};
        var ltelowerRangeForGood = #{sessionScope['ltelowerRangeForGood']};
        var lteupperRangeForPoor = #{sessionScope['lteupperRangeForPoor']};
        var ltelowerRangeForPoor = #{sessionScope['ltelowerRangeForPoor']};
        var lteupperRangeForAverage = #{sessionScope['lteupperRangeForAverage']};
        var ltelowerRangeForAverage = #{sessionScope['ltelowerRangeForAverage']};
        //The defining ends here
       var  pointWidth =  30;
        Highcharts.setOptions({
        	 colors: ['#0000FF',  '#330033', '#000000', '#663399', '#000033', '#660000']
        	});

        Highcharts.theme = {
        		   colors: ['#058DC7', '#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572', '#FF9655', '#FFF263', '#6AF9C4'],
        		   chart: {
        		      backgroundColor: {
        		         linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
        		         stops: [
        		            [0, 'rgb(255, 255, 255)'],
        		            [1, 'rgb(240, 240, 255)']
        		         ]
        		      },
        		      borderWidth: 2,
        		      plotBackgroundColor: 'rgba(255, 255, 255, .9)',
        		      plotShadow: true,
        		      plotBorderWidth: 1
        		   },
        		   title: {
        		      style: {
        		         color: '#000',
        		         font: 'bold 16px "Trebuchet MS", Verdana, sans-serif'
        		      }
        		   },
        		   subtitle: {
        		      style: {
        		         color: '#666666',
        		         font: 'bold 12px "Trebuchet MS", Verdana, sans-serif'
        		      }
        		   },
        		   xAxis: {
        		      gridLineWidth: 1,
        		      lineColor: '#000',
        		      tickColor: '#000',
        		      labels: {
        		         style: {
        		            color: '#000',
        		            font: '11px Trebuchet MS, Verdana, sans-serif'
        		         }
        		      },
        		      title: {
        		         style: {
        		            color: '#333',
        		            fontWeight: 'bold',
        		            fontSize: '12px',
        		            fontFamily: 'Trebuchet MS, Verdana, sans-serif'

        		         }
        		      }
        		   },
        		   yAxis: {
        		      minorTickInterval: 'auto',
        		      lineColor: '#000',
        		      lineWidth: 1,
        		      tickWidth: 1,
        		      tickColor: '#000',
        		      labels: {
        		         style: {
        		            color: '#000',
        		            font: '11px Trebuchet MS, Verdana, sans-serif'
        		         }
        		      },
        		      title: {
        		         style: {
        		            color: '#333',
        		            fontWeight: 'bold',
        		            fontSize: '12px',
        		            fontFamily: 'Trebuchet MS, Verdana, sans-serif'
        		         }
        		      }
        		   },
        		   legend: {
        		      itemStyle: {
        		         font: '9pt Trebuchet MS, Verdana, sans-serif',
        		         color: 'black'

        		      },
        		      itemHoverStyle: {
        		         color: '#039'
        		      },
        		      itemHiddenStyle: {
        		         color: 'gray'
        		      }
        		   },
        		   labels: {
        		      style: {
        		         color: '#99b'
        		      }
        		   },

        		   navigation: {
        		      buttonOptions: {
        		         theme: {
        		            stroke: '#CCCCCC'
        		         }
        		      }
        		   }
        		};
        Highcharts.setOptions(Highcharts.theme);
        var configurationArray = new Array();
        var mlist="#{sessionScope['allMarketsList']}";
        var dlist="#{sessionScope['allDevicesList']}";
        var tstnamelist="#{sessionScope['allTestsList']}";
        var filnamelist="#{sessionScope['allFilesList']}";
        var comparediv0='#{sessionScope["configObj_0"]}';
        var comparediv1='#{sessionScope["configObj_1"]}';
        var comparediv2='#{sessionScope["configObj_2"]}';
        var comparediv3='#{sessionScope["configObj_3"]}';
        
        var isVoice='#{sessionScope["isVoiceData"]}';
        var isExternal='#{sessionScope["isExternalData"]}';
        var isNetTestData='#{sessionScope["isNetTestData"]}';
        var isTestDetail='#{sessionScope["isTestDetailData"]}';
        var isDownload='#{sessionScope["isDownload"]}';

        var isVoip='#{sessionScope["isVoip"]}';
        var isBrowser='#{sessionScope["isBrowser"]}';
        function setValues(){
           //if(comparediv0.length>0 || comparediv1.length>0  || comparediv2.length>0  || comparediv3.length>0 ){
        	//   document.getElementById("buttonDiv").style.display="inline";
           //}
			if(isVoice.match("true")){
        	   document.getElementById("voiceDiv").style.display="inline";
           	}
			if(isExternal.match("true")||isNetTestData.match("true")){
        	   document.getElementById("dataDiv1").style.display="inline";
           	}
			if(isTestDetail.match("true")){
	        	   document.getElementById("testDetailDiv").style.display="inline";
	        }
			if(isDownload.match("true")){
				document.getElementById("exportExtraInfo").style.display="inline";
	        }			
			
			if(isExternal.match("true")||isNetTestData.match("true")||isVoip.match("true")){
	        	   document.getElementById("voipDiv").style.display="inline";
	           	}
			if(isExternal.match("true")||isNetTestData.match("true")||isBrowser.match("true")){
	        	   document.getElementById("browserDiv").style.display="inline";
	           	}
            if (comparediv0.length>0 ){
    	       		 configurationArray[0] = comparediv0;
    	        	 var json0 = JSON.parse(comparediv0);
    	        	 var devicename0=json0.deviceName;
    	        	 var testname0=json0.testName;
    	        	 var mrktname0=json0.marketLabel;
    	        	 var imeiId0=json0.filesName;
    	        	 var imei0=JSON.stringify(imeiId0);
    	        	 var imeinum0=imei0.substring(imei0.lastIndexOf("_")+1, imei0.length-2);
    	        	 assignDivValue("compareDiv_0",devicename0,testname0,mrktname0,imeinum0,0);
            } if (comparediv1.length>0){
            		configurationArray[1] = comparediv1;
            		var json1 = JSON.parse(comparediv1);
           		 	var devicename1=json1.deviceName;
           			var testname1=json1.testName;
           	 		var mrktname1=json1.marketLabel;
   	        	 var imeiId1=json1.filesName;
	        	 var imei1=JSON.stringify(imeiId1);
	        	 var imeinum1=imei1.substring(imei1.lastIndexOf("_")+1, imei1.length-2);
           	 	assignDivValue("compareDiv_1",devicename1,testname1,mrktname1,imeinum1,1);
            } if (comparediv2.length>0){
            		configurationArray[2] = comparediv2;
    	     		var json2 = JSON.parse(comparediv2);
    	   		 	var devicename2=json2.deviceName;
    	   			var testname2=json2.testName;
    	   	 		var mrktname2=json2.marketLabel; 
   	        	 var imeiId2=json2.filesName;
	        	 var imei2=JSON.stringify(imeiId2);
	        	 var imeinum2=imei2.substring(imei2.lastIndexOf("_")+1, imei2.length-2);  
    	   	 	assignDivValue("compareDiv_2",devicename2,testname2,mrktname2,imeinum2,2);  	 
            } if (comparediv3.length>0){
            	 //alert("comparediv3");
            		configurationArray[3] = comparediv3;
    	    		var json3 = JSON.parse(comparediv3);
    	   		 	var devicename3=json3.deviceName;
    	   			var testname3=json3.testName;
    	   	 		var mrktname3=json3.marketLabel; 
   	        	 var imeiId3=json3.filesName;
	        	 var imei3=JSON.stringify(imeiId3);
	        	 var imeinum3=imei3.substring(imei3.lastIndexOf("_")+1, imei3.length-2);  
    	   	 	assignDivValue("compareDiv_3",devicename3,testname3,mrktname3,imeinum3,3);    	
            }
            
        }

             function enableTextBox(buttonId){
   				if(document.getElementById("testSummaryComment").value.trim()=="" ){
           			alert("Please enter summary comments.");
           			return false;
           		} 
  				/* else if(document.getElementById("testCommentKpi1").value.trim()=="" ){
           			alert("Please enter voice quality comments.");
           			return false;
           		}else if(document.getElementById("testCommentKpi2").value.trim()=="" ){
           			alert("Please enter voice connectivity comments.");
           			return false;
           		}else if(document.getElementById("testCommentKpi3").value.trim()=="" ){
           			alert("Please enter data connectivity comments.");
           			return false;
           		}else if(document.getElementById("testCommentKpi4").value.trim()=="" ){
           			alert("Please enter simultaneous voice and data comments.");
           			return false;
           		}else if(document.getElementById("testCommentKpi5").value.trim()=="" ){
           			alert("Please enter LTE comments.");
           			return false;
           		}else if(document.getElementById("testCommentKpi6").value.trim()=="" ){
        			alert("Please enter browser comments.");
        			return false;
        		}else if(document.getElementById("testCommentKpi7").value.trim()=="" ){
        			alert("Please enter voIP comments.");
        			return false;
        		} */
        		else{  
           			if(buttonId.match("saveConfigs")){
               			//alert("saveconfigs button="+buttonId);
            			$('.popup').show();
           				document.getElementById("draftDiv").style.display="none";
           				document.getElementById("saveDiv").style.display="inline";
          				if(document.getElementById("reportConfigName").value.trim()="" ){
          	           		alert("Please enter config name.");
          	           		return false;
                   		}
           			}else if(buttonId.match("draftConfigs")){
               			//alert("draftConfigs button="+buttonId);
               			$('.popup').show();
           				document.getElementById("saveDiv").style.display="none";
           				document.getElementById("draftDiv").style.display="inline";
          				if(document.getElementById("reportConfigName").value.trim()="" ){
          	           		alert("Please enter config name.");
          	           	return false;
                   		}
           			} else if(buttonId.match("browse")){
               			//alert("browse button="+buttonId);
               			$('.popupFile').show();
           			}          				
           		}
           			formJsonForSubmit();
           	}
             
            $(function() {
                var overlay = $('<div id="overlay"></div>');
                $('.close').click(function() {
                    $('.popup').hide();
                    overlay.appendTo(document.body).remove();
                    return false;
                });

                $('.x').click(function() {
                    $('.popup').hide();
                    overlay.appendTo(document.body).remove();
                    return false;
                });

                $('.click').click(function() {
                    overlay.show();
                    overlay.appendTo(document.body);
                    return false;
                });
                
              
            });
            $(function() {
                var overlayTest = $('<div id="overlayTest"></div>');
                $('.close').click(function() {
                    $('.popuptest').hide();
                    overlayTest.appendTo(document.body).remove();
                    return false;
                });

                $('.x').click(function() {
                    $('.popuptest').hide();
                    overlayTest.appendTo(document.body).remove();
                    return false;
                });

                $('.click').click(function() {
                	overlayTest.show();
                	overlayTest.appendTo(document.body);
                    return false;
                });
                
              
            });
            $(function() {
                var overlayFile = $('<div id="overlayFile"></div>');
                $('.close').click(function() {
                    $('.popupFile').hide();
                    overlayFile.appendTo(document.body).remove();
                    return false;
                });

                $('.x').click(function() {
                    $('.popupFile').hide();
                    overlayFile.appendTo(document.body).remove();
                    return false;
                });

                $('.click').click(function() {
                	overlayFile.show();
                	overlayFile.appendTo(document.body);
                    return false;
                });
                
              
            });            
            

        </script>
  	  <script type="text/javascript">
  	  var numberTimesCallMade = 0;
  	var compareCount = 0;
  	 	var numberTimesCallMade = 0;
  	var compareCount = 0;
  	function getHtml(){
		document.getElementById("testValue").value = document.getElementById("bodyHTML").innerHTML;
	}

  	 function change(time) {
	 	    var r = time.match(/^\s*([0-9]+)\s*-\s*([0-9]+)\s*-\s*([0-9]+)(.*)$/);
	 	    return r[2]+"-"+r[3]+"-"+r[1]+r[4];
	 	}


  	 /* <![CDATA[ */
	 function intializeSummaryFirstMap(){
		 /*First KPI*/	
		 var lattitudes = "#{sessionScope['Summarylattitudes']}";  
			if(lattitudes != ""){
			lattitudes = lattitudes.split(",");        	
			var longitudes = "#{sessionScope['Summarylongitudes']}";  
           	longitudes = longitudes.split(",");         	
           	var market = "#{sessionScope['SummaryMarkets']}"; 
           	market = market.split(",");
        	
           	var map_options = {
	    			center : new google.maps.LatLng(lattitudes[0] ,longitudes[0]),
	    			zoom : 8,
	    			mapTypeId : google.maps.MapTypeId.ROADMAP
	    		};

    		var google_map = new google.maps.Map(document.getElementById("map-canvas"), map_options);

    		var info_window = new google.maps.InfoWindow({
    			content : 'loading'
    		});

    		var latitudeList="";
    		var longitudeList="";
    		var marketList="";
    		var deviceList="";
    		var testnameList="";
    		for (var i = 0;i<lattitudes.length;i++){
    			latitudeList=lattitudes[i];
    			longitudeList=longitudes[i];
    			marketList=market[i];		
    			topLevelData = marketList;
    			addr= marketList;
    			image = '../..'+"#{request.contextPath}"+'/resources/images/marker.png';
    			var m = new google.maps.Marker({
    				map : google_map,
    				animation : google.maps.Animation.DROP,
    				title : addr,
    				alt:addr,
    				position : new google.maps.LatLng(latitudeList,longitudeList),
    				icon : image,
    				html : topLevelData,
    				info1 : topLevelData,
    				topLevel : topLevelData
    			});
    			htmlStr = "";
    			google.maps.event.addListener(m, 'click', function() {
    				info_window.setContent('<table><tr><td colspan="2">' +this.info1+'</td><tr></table>');
    				info_window.open(google_map, this);
    			});

    		var topLevelData = '';
    		var htmlStr = '';
			
    		}
		}
  	 }
	 /* ]]> */
	 
	 
	 
      /* <![CDATA[ */
     function intializeVoiceQuality(){
              var VQTCount="#{sessionScope['VQTCount']}";   
		      var jsonArrayLength="#{sessionScope['jsonArrayLength']}"; 
		      var chartType = "#{sessionScope['VQbucketlinecharttitle']}";
		      
		if(jsonArrayLength>0){
					for(var k=0;k<VQTCount;k++){
			    		var h=0;
	                   if(k==0){
	                	   var signalStrengthLTERSRPList="";
				    		var signalStrengthLTERSRQList="";
				    		var signalStrengthLTERSSNRList="";
				    		var signalStrengthLTECQIList="";
	                	    var latt ="#{sessionScope['VQTlattitudes0']}"; 
	                	    latt = latt.split(",");
	     	             	var longit = "#{sessionScope['VQTlongitudes0']}"; 
	     	             	 
	     	             	longit= longit.split("," );
	     	             	var testName = "#{sessionScope['VQTtestName0']}"; 
	     	              	testName = testName.split(",");
	     	             	var CallTimestamp = "#{sessionScope['VQTCallTimestamp0']}";  
	     	             	CallTimestamp = CallTimestamp.split(",");
	     	            	var rating ="#{sessionScope['VQTRating0']}";  
	     	            	rating = rating.split(",");
	     	            	var pESQ = "#{sessionScope['VQTPESQ0']}";  
	     	            	pESQ = pESQ.split(",");
	     	            	var pESQAverageOffset ="#{sessionScope['VQTPESQAverageOffset0']}";  
	     	            	pESQAverageOffset =pESQAverageOffset.split(",");
	     	              	var numberAllClipping ="#{sessionScope['VQTNumberAllClipping0']}";  
	     	              	numberAllClipping =numberAllClipping.split(",");
	     	              	var durationALLClipping ="#{sessionScope['VQTDurationALLClipping0']}";  
	     	              	durationALLClipping =durationALLClipping.split(",");
	     	                var STGDeviceSignalStrengthList= "#{sessionScope['VQTSTGDeviceSignalStrengthList0']}";  
	     	              
	   	            	     STGDeviceSignalStrengthList = STGDeviceSignalStrengthList.split(",");
	   	            	  var vqSignalStrengthList =  "#{sessionScope['vqSignalStrength0']}";
	   	            	  vqSignalStrengthList = vqSignalStrengthList.split(",");
	   	            	    var statusList="#{sessionScope['VQTstatusList0']}";  
	   	            	    statusList = statusList.split(",");
	   	            	    var STGDeviceNetworkTypeList= "#{sessionScope['VQTSTGDeviceNetworkTypeList0']}";  
	   	            	    STGDeviceNetworkTypeList = STGDeviceNetworkTypeList.split(",");
	   	            	     var STGDeviceSourceCellIdList= "#{sessionScope['VQTSTGDeviceSourceCellIdList0']}";  
		   	            	STGDeviceSourceCellIdList = STGDeviceSourceCellIdList.split(",");
		   	            	var timeStampForEachSample= "#{sessionScope['VQTtimeStampForEachSample0']}";  
		   	            	timeStampForEachSample = timeStampForEachSample.split(",");
		   	            	var VQTlatlong= "#{sessionScope['VQTlatlong0']}";  
		   	            	VQTlatlong = VQTlatlong.split(",");
		   	            	var networkMnc = "#{sessionScope['VQTnetworkMnc0']}";  
		   	            	networkMnc = networkMnc.split(",");
		   	            	var networkMcc = "#{sessionScope['VQTnetworkMcc0']}";  
		   	            	networkMcc = networkMcc.split(",");
		   	            	var cellLocationLac = "#{sessionScope['VQTcellLocationLac0']}";  
		   	            	cellLocationLac = cellLocationLac.split(",");
		   	              	var neighbourMainInfo ="#{sessionScope['VQTneighbourInfo0']}";
		   	              	neighbourMainInfo = neighbourMainInfo.split("|||||");
	  	            		var VoiceStatusList ="#{sessionScope['VoiceStatusList0']}";
			              	VoiceStatusList = VoiceStatusList.split(",");
							/*New Code changes*/
				            var VQTsignalStrengthLTERSRP = "#{sessionScope['VQTsignalStrengthLTERSRP0']}";
			              	VQTsignalStrengthLTERSRP = VQTsignalStrengthLTERSRP.split(",");
			              	var VQTsignalStrengthLTERSRQ = "#{sessionScope['VQTsignalStrengthLTERSRQ0']}";
			              	VQTsignalStrengthLTERSRQ = VQTsignalStrengthLTERSRQ.split(",");
			              	var VQTsignalStrengthLTERSSNR = "#{sessionScope['VQTsignalStrengthLTERSSNR0']}";
			              	VQTsignalStrengthLTERSSNR = VQTsignalStrengthLTERSSNR.split(",");
			              	var VQTsignalStrengthLTECQI = "#{sessionScope['VQTsignalStrengthLTECQI0']}";
			              	VQTsignalStrengthLTECQI = VQTsignalStrengthLTECQI.split(",");
			              	//alert("hello--"+latt[1]);
	                  		var map_options0 = {
	       		    			center : new google.maps.LatLng(latt[1] ,longit[1]),
	       		    			zoom : 12,
	       		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	       		    		};
	                  		//alert("hello3--"+map_options0.center);    
	       		    	    var google_map0 = new google.maps.Map(document.getElementById("voiceQtyFirstMap"), map_options0);
	       		    	// alert("hello4");    
	       		    		var info_window0 = new google.maps.InfoWindow({
	       		    			content : 'loading'
	       		    		});
	       		    		
	                   }else if(k==1){
	                	   var latt ="#{sessionScope['VQTlattitudes1']}"; 
	                	    latt = latt.split(",");
	     	             	var longit = "#{sessionScope['VQTlongitudes1']}";  
	     	             	longit= longit.split("," );
	     	             	var testName = "#{sessionScope['VQTtestName1']}"; 
	     	              	testName = testName.split(",");
	     	             	var CallTimestamp = "#{sessionScope['VQTCallTimestamp1']}";  
	     	             	CallTimestamp = CallTimestamp.split(",");
	     	            	var rating ="#{sessionScope['VQTRating1']}";  
	     	            	rating = rating.split(",");
	     	            	var pESQ = "#{sessionScope['VQTPESQ1']}";  
	     	            	pESQ = pESQ.split(",");
	     	            	var pESQAverageOffset ="#{sessionScope['VQTPESQAverageOffset1']}";  
	     	            	pESQAverageOffset =pESQAverageOffset.split(",");
	     	              	var numberAllClipping ="#{sessionScope['VQTNumberAllClipping1']}";  
	     	              	numberAllClipping =numberAllClipping.split(",");
	     	              	var durationALLClipping ="#{sessionScope['VQTDurationALLClipping1']}";  
	     	              	durationALLClipping =durationALLClipping.split(",");
	     	                var STGDeviceSignalStrengthList= "#{sessionScope['VQTSTGDeviceSignalStrengthList1']}";  
	   	            	     STGDeviceSignalStrengthList = STGDeviceSignalStrengthList.split(",");
	   	            	  var vqSignalStrengthList =  "#{sessionScope['vqSignalStrength1']}";
	   	            	  vqSignalStrengthList = vqSignalStrengthList.split(",");
	   	            	    var statusList="#{sessionScope['VQTstatusList1']}";  
	   	            	    statusList = statusList.split(",");
	   	            	    var STGDeviceNetworkTypeList= "#{sessionScope['VQTSTGDeviceNetworkTypeList1']}";  
	   	            	    STGDeviceNetworkTypeList = STGDeviceNetworkTypeList.split(",");
	   	            	     var STGDeviceSourceCellIdList= "#{sessionScope['VQTSTGDeviceSourceCellIdList1']}";  
		   	            	STGDeviceSourceCellIdList = STGDeviceSourceCellIdList.split(",");
		   	            	var timeStampForEachSample= "#{sessionScope['VQTtimeStampForEachSample1']}";  
		   	            	timeStampForEachSample = timeStampForEachSample.split(",");
		   	            	var VQTlatlong= "#{sessionScope['VQTlatlong1']}";  
		   	            	VQTlatlong = VQTlatlong.split(",");
		   	            	var networkMnc = "#{sessionScope['VQTnetworkMnc1']}";  
		   	            	networkMnc = networkMnc.split(",");
		   	            	var networkMcc = "#{sessionScope['VQTnetworkMcc1']}";  
		   	            	networkMcc = networkMcc.split(",");
		   	            	var cellLocationLac = "#{sessionScope['VQTcellLocationLac1']}";  
		   	            	cellLocationLac = cellLocationLac.split(",");
		   	              	var neighbourMainInfo ="#{sessionScope['VQTneighbourInfo1']}";
		   	              	neighbourMainInfo = neighbourMainInfo.split("|||||");
		   	                var VoiceStatusList ="#{sessionScope['VoiceStatusList1']}";
			              	VoiceStatusList = VoiceStatusList.split(",");
			              	var VQTsignalStrengthLTERSRP = "#{sessionScope['VQTsignalStrengthLTERSRP1']}";
			              	VQTsignalStrengthLTERSRP = VQTsignalStrengthLTERSRP.split(",");
			              	var VQTsignalStrengthLTERSRQ = "#{sessionScope['VQTsignalStrengthLTERSRQ1']}";
			              	VQTsignalStrengthLTERSRQ = VQTsignalStrengthLTERSRQ.split(",");
			              	var VQTsignalStrengthLTERSSNR = "#{sessionScope['VQTsignalStrengthLTERSSNR1']}";
			              	VQTsignalStrengthLTERSSNR = VQTsignalStrengthLTERSSNR.split(",");
			              	var VQTsignalStrengthLTECQI = "#{sessionScope['VQTsignalStrengthLTECQI1']}";
			              	VQTsignalStrengthLTECQI = VQTsignalStrengthLTECQI.split(",");
	                     var map_options1 = {
	       		    			center : new google.maps.LatLng(latt[1] ,longit[1]),
	       		    			zoom : 12,
	       		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	       		    	 };

	       		    	    var google_map1 = new google.maps.Map(document.getElementById("voiceQtySecondMap"), map_options1);

	       		    		var info_window1 = new google.maps.InfoWindow({
	       		    			content : 'loading'
	       		    		});
	                   }else  if(k==2){
	                	   var latt ="#{sessionScope['VQTlattitudes2']}"; 
	                	    latt = latt.split(",");
	     	             	var longit = "#{sessionScope['VQTlongitudes2']}";  
	     	             	longit= longit.split("," );
	     	             	var testName = "#{sessionScope['VQTtestName2']}"; 
	     	              	testName = testName.split(",");
	     	             	var CallTimestamp = "#{sessionScope['VQTCallTimestamp2']}";  
	     	             	CallTimestamp = CallTimestamp.split(",");
	     	            	var rating ="#{sessionScope['VQTRating2']}";  
	     	            	rating = rating.split(",");
	     	            	var pESQ = "#{sessionScope['VQTPESQ2']}";  
	     	            	pESQ = pESQ.split(",");
	     	            	var pESQAverageOffset ="#{sessionScope['VQTPESQAverageOffset2']}";  
	     	            	pESQAverageOffset =pESQAverageOffset.split(",");
	     	              	var numberAllClipping ="#{sessionScope['VQTNumberAllClipping2']}";  
	     	              	numberAllClipping =numberAllClipping.split(",");
	     	              	var durationALLClipping ="#{sessionScope['VQTDurationALLClipping2']}";  
	     	              	durationALLClipping =durationALLClipping.split(",");
	     	                var STGDeviceSignalStrengthList= "#{sessionScope['VQTSTGDeviceSignalStrengthList2']}";  
	   	            	     STGDeviceSignalStrengthList = STGDeviceSignalStrengthList.split(",");
	   	            	  var vqSignalStrengthList =  "#{sessionScope['vqSignalStrength2']}";
	   	            	  vqSignalStrengthList = vqSignalStrengthList.split(",");
	   	            	    var statusList="#{sessionScope['VQTstatusList2']}";  
	   	            	    statusList = statusList.split(",");
	   	            	    var STGDeviceNetworkTypeList= "#{sessionScope['VQTSTGDeviceNetworkTypeList2']}";  
	   	            	    STGDeviceNetworkTypeList = STGDeviceNetworkTypeList.split(",");
	   	            	     var STGDeviceSourceCellIdList= "#{sessionScope['VQTSTGDeviceSourceCellIdList2']}";  
		   	            	STGDeviceSourceCellIdList = STGDeviceSourceCellIdList.split(",");
		   	            	var timeStampForEachSample= "#{sessionScope['VQTtimeStampForEachSample2']}";  
		   	            	timeStampForEachSample = timeStampForEachSample.split(",");
		   	            	var VQTlatlong= "#{sessionScope['VQTlatlong2']}";  
		   	            	VQTlatlong = VQTlatlong.split(",");
		   	            	var networkMnc = "#{sessionScope['VQTnetworkMnc2']}";  
		   	            	networkMnc = networkMnc.split(",");
		   	            	var networkMcc = "#{sessionScope['VQTnetworkMcc2']}";  
		   	            	networkMcc = networkMcc.split(",");
		   	            	var cellLocationLac = "#{sessionScope['VQTcellLocationLac2']}";  
		   	            	cellLocationLac = cellLocationLac.split(",");
		   	              	var neighbourMainInfo ="#{sessionScope['VQTneighbourInfo2']}";
		   	              	neighbourMainInfo = neighbourMainInfo.split("|||||");
		   	                var VoiceStatusList ="#{sessionScope['VoiceStatusList2']}";
			              	VoiceStatusList = VoiceStatusList.split(",");
			              	var VQTsignalStrengthLTERSRP = "#{sessionScope['VQTsignalStrengthLTERSRP2']}";
			              	VQTsignalStrengthLTERSRP = VQTsignalStrengthLTERSRP.split(",");
			              	var VQTsignalStrengthLTERSRQ = "#{sessionScope['VQTsignalStrengthLTERSRQ2']}";
			              	VQTsignalStrengthLTERSRQ = VQTsignalStrengthLTERSRQ.split(",");
			              	var VQTsignalStrengthLTERSSNR = "#{sessionScope['VQTsignalStrengthLTERSSNR2']}";
			              	VQTsignalStrengthLTERSSNR = VQTsignalStrengthLTERSSNR.split(",");
			              	var VQTsignalStrengthLTECQI = "#{sessionScope['VQTsignalStrengthLTECQI2']}";
			              	VQTsignalStrengthLTECQI = VQTsignalStrengthLTECQI.split(",");
	                  	 var map_options2 = {
	       		    			center : new google.maps.LatLng(latt[1] ,longit[1]),
	       		    			zoom : 12,
	       		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	       		    		};

	       		    	    var google_map2 = new google.maps.Map(document.getElementById("voiceQtyThirdMap"), map_options2);

	       		    		var info_window2 = new google.maps.InfoWindow({
	       		    			content : 'loading'
	       		    		});
	                   }else  if(k==3){
	                	    var latt ="#{sessionScope['VQTlattitudes3']}"; 
	                	    latt = latt.split(",");
	     	             	var longit = "#{sessionScope['VQTlongitudes3']}";  
	     	             	longit= longit.split("," );
	     	             	var testName = "#{sessionScope['VQTtestName3']}"; 
	     	              	testName = testName.split(",");
	     	             	var CallTimestamp = "#{sessionScope['VQTCallTimestamp3']}";  
	     	             	CallTimestamp = CallTimestamp.split(",");
	     	            	var rating ="#{sessionScope['VQTRating3']}";  
	     	            	rating = rating.split(",");
	     	            	var pESQ = "#{sessionScope['VQTPESQ3']}";  
	     	            	pESQ = pESQ.split(",");
	     	            	var pESQAverageOffset ="#{sessionScope['VQTPESQAverageOffset3']}";  
	     	            	pESQAverageOffset =pESQAverageOffset.split(",");
	     	              	var numberAllClipping ="#{sessionScope['VQTNumberAllClipping3']}";  
	     	              	numberAllClipping =numberAllClipping.split(",");
	     	              	var durationALLClipping ="#{sessionScope['VQTDurationALLClipping3']}";  
	     	              	durationALLClipping =durationALLClipping.split(",");
	     	                var STGDeviceSignalStrengthList= "#{sessionScope['VQTSTGDeviceSignalStrengthList3']}";  
	   	            	     STGDeviceSignalStrengthList = STGDeviceSignalStrengthList.split(",");
	   	            	  var vqSignalStrengthList =  "#{sessionScope['vqSignalStrength3']}";
	   	            	  vqSignalStrengthList = vqSignalStrengthList.split(",");
	   	            	    var statusList="#{sessionScope['VQTstatusList3']}";  
	   	            	    statusList = statusList.split(",");
	   	            	    var STGDeviceNetworkTypeList= "#{sessionScope['VQTSTGDeviceNetworkTypeList3']}";  
	   	            	    STGDeviceNetworkTypeList = STGDeviceNetworkTypeList.split(",");
	   	            	     var STGDeviceSourceCellIdList= "#{sessionScope['VQTSTGDeviceSourceCellIdList3']}";  
		   	            	STGDeviceSourceCellIdList = STGDeviceSourceCellIdList.split(",");
		   	            	var timeStampForEachSample= "#{sessionScope['VQTtimeStampForEachSample3']}";  
		   	            	timeStampForEachSample = timeStampForEachSample.split(",");
		   	            	var VQTlatlong= "#{sessionScope['VQTlatlong3']}";  
		   	            	VQTlatlong = VQTlatlong.split(",");
		   	            	var networkMnc = "#{sessionScope['VQTnetworkMnc3']}";  
		   	            	networkMnc = networkMnc.split(",");
		   	            	var networkMcc = "#{sessionScope['VQTnetworkMcc3']}";  
		   	            	networkMcc = networkMcc.split(",");
		   	            	var cellLocationLac = "#{sessionScope['VQTcellLocationLac3']}";  
		   	            	cellLocationLac = cellLocationLac.split(",");
		   	              	var neighbourMainInfo ="#{sessionScope['VQTneighbourInfo3']}";
		   	              	neighbourMainInfo = neighbourMainInfo.split("|||||");
		   	                var VoiceStatusList ="#{sessionScope['VoiceStatusList3']}";
			              	VoiceStatusList = VoiceStatusList.split(",");
	                     var map_options3 = {
	       		    			center : new google.maps.LatLng(latt[1] ,longit[1]),
	       		    			zoom : 12,
	       		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	       		    		};

	       		    	    var google_map3 = new google.maps.Map(document.getElementById("voiceQtyFourthMap"), map_options3);

	       		    		var info_window3 = new google.maps.InfoWindow({
	       		    			content : 'loading'
	       		    		});
	                   }else  if(k==4){
	                	   var latt ="#{sessionScope['VQTlattitudes4']}"; 
	                	    latt = latt.split(",");
	     	             	var longit = "#{sessionScope['VQTlongitudes4']}";  
	     	             	longit= longit.split("," );
	     	             	var testName = "#{sessionScope['VQTtestName4']}"; 
	     	              	testName = testName.split(",");
	     	             	var CallTimestamp = "#{sessionScope['VQTCallTimestamp4']}";  
	     	             	CallTimestamp = CallTimestamp.split(",");
	     	            	var rating ="#{sessionScope['VQTRating4']}";  
	     	            	rating = rating.split(",");
	     	            	var pESQ = "#{sessionScope['VQTPESQ4']}";  
	     	            	pESQ = pESQ.split(",");
	     	            	var pESQAverageOffset ="#{sessionScope['VQTPESQAverageOffset4']}";  
	     	            	pESQAverageOffset =pESQAverageOffset.split(",");
	     	              	var numberAllClipping ="#{sessionScope['VQTNumberAllClipping4']}";  
	     	              	numberAllClipping =numberAllClipping.split(",");
	     	              	var durationALLClipping ="#{sessionScope['VQTDurationALLClipping4']}";  
	     	              	durationALLClipping =durationALLClipping.split(",");
	     	                var STGDeviceSignalStrengthList= "#{sessionScope['VQTSTGDeviceSignalStrengthList4']}";  
	   	            	     STGDeviceSignalStrengthList = STGDeviceSignalStrengthList.split(",");
	   	            	  var vqSignalStrengthList =  "#{sessionScope['vqSignalStrength4']}";
	   	            	  vqSignalStrengthList = vqSignalStrengthList.split(",");
	   	            	    var statusList="#{sessionScope['VQTstatusList4']}";  
	   	            	    statusList = statusList.split(",");
	   	            	    var STGDeviceNetworkTypeList= "#{sessionScope['VQTSTGDeviceNetworkTypeList4']}";  
	   	            	    STGDeviceNetworkTypeList = STGDeviceNetworkTypeList.split(",");
	   	            	     var STGDeviceSourceCellIdList= "#{sessionScope['VQTSTGDeviceSourceCellIdList4']}";  
		   	            	STGDeviceSourceCellIdList = STGDeviceSourceCellIdList.split(",");
		   	            	var timeStampForEachSample= "#{sessionScope['VQTtimeStampForEachSample4']}";  
		   	            	timeStampForEachSample = timeStampForEachSample.split(",");
		   	            	var VQTlatlong= "#{sessionScope['VQTlatlong4']}";  
		   	            	VQTlatlong = VQTlatlong.split(",");
		   	            	var networkMnc = "#{sessionScope['VQTnetworkMnc4']}";  
		   	            	networkMnc = networkMnc.split(",");
		   	            	var networkMcc = "#{sessionScope['VQTnetworkMcc4']}";  
		   	            	networkMcc = networkMcc.split(",");
		   	            	var cellLocationLac = "#{sessionScope['VQTcellLocationLac4']}";  
		   	            	cellLocationLac = cellLocationLac.split(",");
		   	              	var neighbourMainInfo ="#{sessionScope['VQTneighbourInfo4']}";
		   	              	neighbourMainInfo = neighbourMainInfo.split("|||||");
		   	                var VoiceStatusList ="#{sessionScope['VoiceStatusList4']}";
			              	VoiceStatusList = VoiceStatusList.split(",");
	                     var map_options4 = {
	       		    			center : new google.maps.LatLng(latt[1] ,longit[1]),
	       		    			zoom : 12,
	       		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	       		    		};

	       		    	    var google_map4 = new google.maps.Map(document.getElementById("voiceQtyFifthMap"), map_options4);

	       		    		var info_window4 = new google.maps.InfoWindow({
	       		    			content : 'loading'
	       		    		});
         
	                   }else if(k==5){
	                	   var latt ="#{sessionScope['VQTlattitudes5']}"; 
	                	    latt = latt.split(",");
	     	             	var longit = "#{sessionScope['VQTlongitudes5']}";  
	     	             	longit= longit.split("," );
	     	             	var testName = "#{sessionScope['VQTtestName5']}"; 
	     	              	testName = testName.split(",");
	     	             	var CallTimestamp = "#{sessionScope['VQTCallTimestamp5']}";  
	     	             	CallTimestamp = CallTimestamp.split(",");
	     	            	var rating ="#{sessionScope['VQTRating5']}";  
	     	            	rating = rating.split(",");
	     	            	var pESQ = "#{sessionScope['VQTPESQ5']}";  
	     	            	pESQ = pESQ.split(",");
	     	            	var pESQAverageOffset ="#{sessionScope['VQTPESQAverageOffset5']}";  
	     	            	pESQAverageOffset =pESQAverageOffset.split(",");
	     	              	var numberAllClipping ="#{sessionScope['VQTNumberAllClipping5']}";  
	     	              	numberAllClipping =numberAllClipping.split(",");
	     	              	var durationALLClipping ="#{sessionScope['VQTDurationALLClipping5']}";  
	     	              	durationALLClipping =durationALLClipping.split(",");
	     	                var STGDeviceSignalStrengthList= "#{sessionScope['VQTSTGDeviceSignalStrengthList5']}";  
	   	            	     STGDeviceSignalStrengthList = STGDeviceSignalStrengthList.split(",");
	   	            	  var vqSignalStrengthList =  "#{sessionScope['vqSignalStrength5']}";
	   	            	  vqSignalStrengthList = vqSignalStrengthList.split(",");
	   	            	    var statusList="#{sessionScope['VQTstatusList5']}";  
	   	            	    statusList = statusList.split(",");
	   	            	    var STGDeviceNetworkTypeList= "#{sessionScope['VQTSTGDeviceNetworkTypeList5']}";  
	   	            	    STGDeviceNetworkTypeList = STGDeviceNetworkTypeList.split(",");
	   	            	     var STGDeviceSourceCellIdList= "#{sessionScope['VQTSTGDeviceSourceCellIdList5']}";  
		   	            	STGDeviceSourceCellIdList = STGDeviceSourceCellIdList.split(",");
		   	            	var timeStampForEachSample= "#{sessionScope['VQTtimeStampForEachSample5']}";  
		   	            	timeStampForEachSample = timeStampForEachSample.split(",");
		   	            	var VQTlatlong= "#{sessionScope['VQTlatlong5']}";  
		   	            	VQTlatlong = VQTlatlong.split(",");
		   	            	var networkMnc = "#{sessionScope['VQTnetworkMnc5']}";  
		   	            	networkMnc = networkMnc.split(",");
		   	            	var networkMcc = "#{sessionScope['VQTnetworkMcc5']}";  
		   	            	networkMcc = networkMcc.split(",");
		   	            	var cellLocationLac = "#{sessionScope['VQTcellLocationLac5']}";  
		   	            	cellLocationLac = cellLocationLac.split(",");
		   	              	var neighbourMainInfo ="#{sessionScope['VQTneighbourInfo5']}";
		   	              	neighbourMainInfo = neighbourMainInfo.split("|||||");
		   	                var VoiceStatusList ="#{sessionScope['VoiceStatusList5']}";
			              	VoiceStatusList = VoiceStatusList.split(",");
	                     var map_options5 = {
	       		    			center : new google.maps.LatLng(latt[1] ,longit[1]),
	       		    			zoom : 12,
	       		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	       		    		};

	       		    	    var google_map5 = new google.maps.Map(document.getElementById("voiceQtySixthMap"), map_options5);

	       		    		var info_window5 = new google.maps.InfoWindow({
	       		    			content : 'loading'
	       		    		});
	                   }else if(k==6){
	                	   var latt ="#{sessionScope['VQTlattitudes6']}"; 
	                	    latt = latt.split(",");
	     	             	var longit = "#{sessionScope['VQTlongitudes6']}";  
	     	             	longit= longit.split("," );
	     	             	var testName = "#{sessionScope['VQTtestName6']}"; 
	     	              	testName = testName.split(",");
	     	             	var CallTimestamp = "#{sessionScope['VQTCallTimestamp6']}";  
	     	             	CallTimestamp = CallTimestamp.split(",");
	     	            	var rating ="#{sessionScope['VQTRating6']}";  
	     	            	rating = rating.split(",");
	     	            	var pESQ = "#{sessionScope['VQTPESQ6']}";  
	     	            	pESQ = pESQ.split(",");
	     	            	var pESQAverageOffset ="#{sessionScope['VQTPESQAverageOffset6']}";  
	     	            	pESQAverageOffset =pESQAverageOffset.split(",");
	     	              	var numberAllClipping ="#{sessionScope['VQTNumberAllClipping6']}";  
	     	              	numberAllClipping =numberAllClipping.split(",");
	     	              	var durationALLClipping ="#{sessionScope['VQTDurationALLClipping6']}";  
	     	              	durationALLClipping =durationALLClipping.split(",");
	     	                var STGDeviceSignalStrengthList= "#{sessionScope['VQTSTGDeviceSignalStrengthList6']}";  
	   	            	     STGDeviceSignalStrengthList = STGDeviceSignalStrengthList.split(",");
	   	            	  var vqSignalStrengthList =  "#{sessionScope['vqSignalStrength6']}";
	   	            	  vqSignalStrengthList = vqSignalStrengthList.split(",");
	   	            	    var statusList="#{sessionScope['VQTstatusList6']}";  
	   	            	    statusList = statusList.split(",");
	   	            	    var STGDeviceNetworkTypeList= "#{sessionScope['VQTSTGDeviceNetworkTypeList6']}";  
	   	            	    STGDeviceNetworkTypeList = STGDeviceNetworkTypeList.split(",");
	   	            	     var STGDeviceSourceCellIdList= "#{sessionScope['VQTSTGDeviceSourceCellIdList6']}";  
		   	            	STGDeviceSourceCellIdList = STGDeviceSourceCellIdList.split(",");
		   	            	var timeStampForEachSample= "#{sessionScope['VQTtimeStampForEachSample6']}";  
		   	            	timeStampForEachSample = timeStampForEachSample.split(",");
		   	            	var VQTlatlong= "#{sessionScope['VQTlatlong6']}";  
		   	            	VQTlatlong = VQTlatlong.split(",");
		   	            	var networkMnc = "#{sessionScope['VQTnetworkMnc6']}";  
		   	            	networkMnc = networkMnc.split(",");
		   	            	var networkMcc = "#{sessionScope['VQTnetworkMcc6']}";  
		   	            	networkMcc = networkMcc.split(",");
		   	            	var cellLocationLac = "#{sessionScope['VQTcellLocationLac6']}";  
		   	            	cellLocationLac = cellLocationLac.split(",");
		   	              	var neighbourMainInfo ="#{sessionScope['VQTneighbourInfo6']}";
		   	              	neighbourMainInfo = neighbourMainInfo.split("|||||");
		   	                var VoiceStatusList ="#{sessionScope['VoiceStatusList6']}";
			              	VoiceStatusList = VoiceStatusList.split(",");
	                     var map_options6 = {
	       		    			center : new google.maps.LatLng(latt[1] ,longit[1]),
	       		    			zoom : 12,
	       		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	       		    		};

	       		    	    var google_map6 = new google.maps.Map(document.getElementById("voiceQtySeventhMap"), map_options6);

	       		    		var info_window6 = new google.maps.InfoWindow({
	       		    			content : 'loading'
	       		    		});
	                   }else if(k==7){
	                	   var latt ="#{sessionScope['VQTlattitudes7']}"; 
	                	    latt = latt.split(",");
	     	             	var longit = "#{sessionScope['VQTlongitudes7']}";  
	     	             	longit= longit.split("," );
	     	             	var testName = "#{sessionScope['VQTtestName7']}"; 
	     	              	testName = testName.split(",");
	     	             	var CallTimestamp = "#{sessionScope['VQTCallTimestamp7']}";  
	     	             	CallTimestamp = CallTimestamp.split(",");
	     	            	var rating ="#{sessionScope['VQTRating7']}";  
	     	            	rating = rating.split(",");
	     	            	var pESQ = "#{sessionScope['VQTPESQ7']}";  
	     	            	pESQ = pESQ.split(",");
	     	            	var pESQAverageOffset ="#{sessionScope['VQTPESQAverageOffset7']}";  
	     	            	pESQAverageOffset =pESQAverageOffset.split(",");
	     	              	var numberAllClipping ="#{sessionScope['VQTNumberAllClipping7']}";  
	     	              	numberAllClipping =numberAllClipping.split(",");
	     	              	var durationALLClipping ="#{sessionScope['VQTDurationALLClipping7']}";  
	     	              	durationALLClipping =durationALLClipping.split(",");
	     	                var STGDeviceSignalStrengthList= "#{sessionScope['VQTSTGDeviceSignalStrengthList7']}";  
	   	            	     STGDeviceSignalStrengthList = STGDeviceSignalStrengthList.split(",");
	   	            	  var vqSignalStrengthList =  "#{sessionScope['vqSignalStrength7']}";
	   	            	  vqSignalStrengthList = vqSignalStrengthList.split(",");
	   	            	    var statusList="#{sessionScope['VQTstatusList7']}";  
	   	            	    statusList = statusList.split(",");
	   	            	    var STGDeviceNetworkTypeList= "#{sessionScope['VQTSTGDeviceNetworkTypeList7']}";  
	   	            	    STGDeviceNetworkTypeList = STGDeviceNetworkTypeList.split(",");
	   	            	     var STGDeviceSourceCellIdList= "#{sessionScope['VQTSTGDeviceSourceCellIdList7']}";  
		   	            	STGDeviceSourceCellIdList = STGDeviceSourceCellIdList.split(",");
		   	            	var timeStampForEachSample= "#{sessionScope['VQTtimeStampForEachSample7']}";  
		   	            	timeStampForEachSample = timeStampForEachSample.split(",");
		   	            	var VQTlatlong= "#{sessionScope['VQTlatlong7']}";  
		   	            	VQTlatlong = VQTlatlong.split(",");
		   	            	var networkMnc = "#{sessionScope['VQTnetworkMnc7']}";  
		   	            	networkMnc = networkMnc.split(",");
		   	            	var networkMcc = "#{sessionScope['VQTnetworkMcc7']}";  
		   	            	networkMcc = networkMcc.split(",");
		   	            	var cellLocationLac = "#{sessionScope['VQTcellLocationLac7']}";  
		   	            	cellLocationLac = cellLocationLac.split(",");
		   	              	var neighbourMainInfo ="#{sessionScope['VQTneighbourInfo7']}";
		   	              	neighbourMainInfo = neighbourMainInfo.split("|||||");
		   	                var VoiceStatusList ="#{sessionScope['VoiceStatusList7']}";
			              	VoiceStatusList = VoiceStatusList.split(",");
	                     var map_options7 = {
	       		    			center : new google.maps.LatLng(latt[1] ,longit[1]),
	       		    			zoom : 12,
	       		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	       		    		};

	       		    	    var google_map7 = new google.maps.Map(document.getElementById("voiceQtyEigthMap"), map_options7);

	       		    		var info_window7 = new google.maps.InfoWindow({
	       		    			content : 'loading'
	       		    		});
	                   }
			    	      var prevSourceCellId="";
			    	      var prevNetworkType="";
			    	      var Rating="";
			    	  	
			    		for (var x = 0;x< testName.length;x++){
			    			var numberTimesmarked = 0;
			    			addr="Voice Quality";
	  		    			lat =latt[x];
	  		    			lng =longit[x];
	  		    			topLevelData ="<b>TestName:</b>"+testName[x];
	  		    			htmlStr = "<b>TimeStampForEachSample:</b>"+timeStampForEachSample[x];
	  		    			timeStamp=timeStampForEachSample[x];
	  		    			neighbourInfo=neighbourMainInfo[x];
	  		    			currSourceCellId=STGDeviceSourceCellIdList[x];
	  		    			currNetworkType=STGDeviceNetworkTypeList[x];
	  		    			
	  		    			if(VoiceStatusList[x].trim()=="True"){
		  		    			//alert(chartType);
		  		    			if(chartType == "PESQ Values"){
		  		    				ratingList="<b>Rating:</b>"+rating[x];
				    				pESQList="<b>VQ Score:</b>"+pESQ[x];
				    				pESQAverageOffsetList="<b>PESQAvg:</b>"+pESQAverageOffset[x];
				    				numberAllClippingList="<b>ClippingNumber:</b>"+numberAllClipping[x];
				    				DurationALLClippingList="<b>ClippingDuration:</b>"+durationALLClipping[x];
				    				signalStatus="<b>SignalStatus:</b>"+statusList[x];
			  		    			signalStrengthList="<b>Signal Strength:</b>"+STGDeviceSignalStrengthList[x];
				    				Rating=rating[x];
		  		    			}
		  		    			else{

		  		    				ratingList="<b>Rating:</b>"+rating[x];
				    				pESQList="<b>VQ Score:</b>"+pESQ[x];
				    				numberAllClippingList="<b>ClippingNumber:</b>"+numberAllClipping[x];
				    				DurationALLClippingList="<b>ClippingDuration:</b>"+durationALLClipping[x];
				    				signalStatus="<b>SignalStatus:</b>"+statusList[x];
			  		    			signalStrengthList="<b>Signal Strength:</b>"+STGDeviceSignalStrengthList[x];
				    				Rating=rating[x];
		  		    			}
	  		    				
	  		    			}else{
	  		    				Rating="No Rating";
	                  			if (typeof(neighbourInfo) != "undefined"){
	      		    				var arra = neighbourInfo.split("|||");
	      			    			var str=null;
	      			    			var test=null;
	      			    			for(var z=0;z<arra.length;z++){
	      			        			if(z == 0){
	      			        				str="<table align='left'><tr><td >"+arra[z]+"</td></tr>";
	      			        			}else if(z == (arra.length-1)){
	      			        				str=str+"<tr><td >"+arra[z]+"</td></tr></table>";
	      			        			}else{
	      			        				str=str+""+"<tr><td >"+arra[z]+"</td></tr>";
	      			        			}
	      			    			}
	      		    			}
		          	    			networkMncList="<b>MNC:</b>"+networkMnc[x];
		          	    			networkMccList="<b>MCC:</b>"+networkMcc[x];
		          	    			cellLocationLacList="<b>Source LAC:</b>"+cellLocationLac[x];
		          	    			cellLocationCidList="<b>Source Cell ID:</b>"+STGDeviceSourceCellIdList[x];
	                              //timeStampForEachSampleList="<b>Time_Stamp:</b>"+timeStampForEachSample[x];
	    		    			networkTypeList="<b>NetworkType:</b>"+STGDeviceNetworkTypeList[x];
		  		    			signalStrengthList="<b>Signal Strenght:</b>"+STGDeviceSignalStrengthList[x];

		  		    			if(currNetworkType.toString()== "LTE (4G)" || currNetworkType.toString()== " LTE (4G)" || currNetworkType.toString()== "LTE"){
				    				signalStrengthLTERSRPList="<b>LTERSRP:</b>"+VQTsignalStrengthLTERSRP[x];
				    				signalStrengthLTERSRQList="<b>LTERSRQ:</b>"+VQTsignalStrengthLTERSRQ[x];
				    				signalStrengthLTERSSNRList="<b>LTERSSNR:</b>"+VQTsignalStrengthLTERSSNR[x];
				    				signalStrengthLTECQIList="<b>LTECQI:</b>"+VQTsignalStrengthLTECQI[x];
				    			} else {
				    				signalStrengthLTERSRPList="";
				    				signalStrengthLTERSRQList="";
				    				signalStrengthLTERSSNRList="";
				    				signalStrengthLTECQIList="";
				    			}
	  		    			}
	  		    			while(numberTimesmarked<2){
	  		    				if(numberTimesmarked==1){
	  		    					if(Rating.trim() == "Good"  || Rating.trim() == "good"){
	  	  	   	  		    			if((prevSourceCellId.toString() != currSourceCellId.toString()) && (prevNetworkType.toString() != currNetworkType.toString())){
	  	  	    	  		        		if(currNetworkType.toString() == "Unknown"
	  	  	                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	  	  	                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
	  	  	  							  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	  	  	  	  	  		        		 if(prevSourceCellId.toString() != currSourceCellId.toString()) {
	  	  	  	 	 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_green.png';
	  	  	  	 		    				}else{
	  	  	  	 		    					 image = '../../'+"#{request.contextPath}"+'/resources/images/star_green.png';	
	  	  	  	 		    				}
	  	  	   	  		        		    }else{
	  	  	   	  		        			    image = '../../'+"#{request.contextPath}"+'/resources/images/star_green.png';	 
	  	  	   	  		        		    }
	  	  	  		    				}else if(prevSourceCellId.toString() != currSourceCellId.toString()) {
	  	  	  	 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_green.png';
	  	  	  		    				}else if(prevNetworkType.toString() != currNetworkType.toString()){
	  	  	  		    					if(currNetworkType.toString() == "Unknown"
	  	  	  	                      	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	  	  	  	                          	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
	  	  	  								  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	  	  	  		    						image = '../../'+"#{request.contextPath}"+'/resources/images/star_green.png';
	  	  	  		    					}else{
	  	  	  	 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_green.png';
	  	  	  		    					}
	  	  	  		    				}else{
	  	  	  		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_green.png';
	  	  	  		    				}	
	  	  	   			  		}else if(Rating.trim() == "Fair"){
  	    	  						if((prevSourceCellId.toString() != currSourceCellId.toString()) 
  	  	  	                        		 && (prevNetworkType.toString() != currNetworkType.toString())){
  	  	  		    					if(currNetworkType.toString() == "Unknown"
  	  	  		                      	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
  	  	  		                          	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
  	  	  									  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
  	  	  		    						if(prevSourceCellId  != currSourceCellId) {
  	  	  	 	 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_blue.png';
  	  	  	 	 		    				}else{
  	  	  	 	 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_blue.png';	 
  	  	  	 	 		    				}	 		    					
  	  	  		    					}else{
  	  	  	 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_blue.png';	 
  	  	  		    					}
  	  	  		    				}else if(prevSourceCellId  != currSourceCellId) {
  	  	  	 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_blue.png';
  	  	  		    				}else if(prevNetworkType.toString() != currNetworkType.toString()){
  	  	  		    					if(currNetworkType.toString() == "Unknown"
  	  	  		                      	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
  	  	  		                          	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
  	  	  									  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
  	  	  	 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_blue.png';
  	  	  		    					}else{
  	  	  	 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_blue.png';
  	  	  		    					}
  	  	  		    				}else{
  	  	  		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_blue.png';
  	  	  		    				}
  	  	   						}else if(Rating.trim() == "Poor" || Rating.trim() == "poor"){
  	  	  	  						if((prevSourceCellId.toString()!= currSourceCellId.toString()) 
 	  		                        		 && (prevNetworkType.toString() != currNetworkType.toString())){
 	  			    					if(currNetworkType.toString() == "Unknown"
 	  			                      	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
 	  			                          	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
 	  										  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
 	  		 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_grey.png';	
 	  			    					}else{
 	  		 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_grey.png';	
 	  			    					} 
 	  			    				}else if(prevSourceCellId.toString() != currSourceCellId.toString()) {
 	  		 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_grey.png';
 	  			    				}else if(prevNetworkType.toString() != currNetworkType.toString()){
 	  			    					if(currNetworkType.toString() == "Unknown"
 	  			                      	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
 	  			                          	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
 	  										  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
 	  		 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_grey.png';
 	  			    					}else{
 	  		 		    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_grey.png';
 	  			    					}	
 	  			    				}else{
 	  			    					image = '../../'+"#{request.contextPath}"+'/resources/images/star_grey.png';
 	  			    				}
 	    						   }else if(Rating.trim() == "Excellent"){
  	      							 image = '../../'+"#{request.contextPath}"+'/resources/images/star_pink.png';
  	    	  					   }
	  		    				}
		  		    			//BELOW ELSE LOOP POPULATES THE DEVICE INFO POINTS
								else if(true){
									//Rating == "No Rating"
									
									if(currNetworkType.toString()== "LTE (4G)" || currNetworkType.toString()== " LTE (4G)" || currNetworkType.toString()== "LTE"){
	              	    				//if(signalStrengthLTT[x] >= 113){
										//alert(timeStampForEachSample[x]);
	          	    					if(VQTsignalStrengthLTERSRP[x] <= lteupperRangeForPoor){
		                                  if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
				                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
		                                	  if(currNetworkType.toString() == "Unknown"){
		                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_BAD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_BAD2.png';
		  	                  	    				 }
	                                        }else { 
		                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                    	  image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_BAD2.png';
			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
			                                   	if(currNetworkType.toString() == "Unknown"){
			                                   		image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
		  	                  	    				 }
			                                     }else{
			                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
		                                 }
	                                  }       
	          		    			}else 
	              		    			//if(signalStrengthLTT[x] >= 97 && signalStrengthLTT[x] <= 112 ){
	              		    				if(VQTsignalStrengthLTERSRP[x] <= lteupperRangeForAverage && VQTsignalStrengthLTERSRP[x] >= ltelowerRangeForAverage ){
	          		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
		              		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	          		    						if(currNetworkType.toString() == "Unknown"){
	          		    							image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_AVG2.png';
	  	                  	    				 }else{
	  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_AVG2.png';
	  	                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_AVG2.png';
				                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                	if(currNetworkType.toString() == "Unknown"){
				                                		image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
	  	                  	    				 }else{
	  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
	  	                  	    				 }
				                                }else{
				                                	image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
			                                    }	          		    					           
	          						 //  }else if(signalStrengthLTT[x] >= 88 && signalStrengthLTT[x] <= 96 ){
	          						 }else if( VQTsignalStrengthLTERSRP[x] >= ltelowerRangeForGood ){
	          							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	          								if(currNetworkType.toString() == "Unknown"){
	          									image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_GOOD2.png';
	  	                  	    				 }else{
	  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_GOOD2.png';
	  	                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_GOOD2.png';
				                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                    	if(currNetworkType.toString() == "Unknown"){
				                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
		  	                  	    				 }
				                                     }else{
				                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
			                                 }	   
	          						//}else if(signalStrengthLTT[x] < 88 ){
	          						}
	              	    			}
	              	    			else if(currNetworkType.trim()== "UMTS (3G)"||currNetworkType.trim()== "HSDPA (3G - Transitional)"||currNetworkType.trim()== "HSPA (3G - Transitional)"||currNetworkType.trim()== "HSPA (3G - Transitional)"  )
		              	    			{
	             	    				//if(signalStrengthLTT[x] >= 113){
	             	    				//alert(vqSignalStrengthList[x]+"3g1");
	          	    					if(vqSignalStrengthList[x] <= upperRangeForPoor){
	          	    						//alert("3g1");
		                                  if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
				                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
		                                	  if(currNetworkType.toString() == "Unknown"){
		                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_BAD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_BAD2.png';
		  	                  	    				 }
	                                        }else { 
		                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                    	  image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_BAD2.png';
			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
			                                   	if(currNetworkType.toString() == "Unknown"){
			                                   		image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
		  	                  	    				 }
			                                     }else{
			                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
		                                 }
	                                  }       
	          		    			}else 
	              		    			//if(signalStrengthLTT[x] >= 97 && signalStrengthLTT[x] <= 112 ){
	              		    				if(vqSignalStrengthList[x] <= upperRangeForAverage && vqSignalStrengthList[x] >= lowerRangeForAverage ){
	              		    					//alert("3g2");
	          		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
		              		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	          		    						if(currNetworkType.toString() == "Unknown"){
	          		    							image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_AVG2.png';
	  	                  	    				 }else{
	  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_AVG2.png';
	  	                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_AVG2.png';
				                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                	if(currNetworkType.toString() == "Unknown"){
				                                		image = '../../'+"#{request.contextPath}"+'/resources/images/3G-AVG2.png';
	  	                  	    				 }else{
	  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-AVG2.png';
	  	                  	    				 }
				                                }else{
				                                	image = '../../'+"#{request.contextPath}"+'/resources/images/3G-AVG2.png';
			                                    }	          		    					           
	          						 //  }else if(signalStrengthLTT[x] >= 88 && signalStrengthLTT[x] <= 96 ){
	          						 }else if( vqSignalStrengthList[x] >= lowerRangeForGood ){
	          							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	          								if(currNetworkType.toString() == "Unknown"){
	          									image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
	  	                  	    				 }else{
	  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
	  	                  	    				 }
		                                        }
	                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_GOOD2.png';
				                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                    	if(currNetworkType.toString() == "Unknown"){
				                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
		  	                  	    				 }
				                                     }else{
				                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
			                                 }	   
	          						//}else if(signalStrengthLTT[x] < 88 ){
	          						}
	              	    			}
			  	  					else if(currNetworkType.trim() == "EDGE (2.75G)" ){
			     	    				//if(signalStrengthLTT[x] >= 113){
	          	    					if(vqSignalStrengthList[x] <= lteupperRangeForPoor){
		                                  if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
				                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
		                                	  if(currNetworkType.toString() == "Unknown"){
		                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
		  	                  	    				 }
	                                        }else { 
		                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                    	  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_BAD2.png';
			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
			                                   	if(currNetworkType.toString() == "Unknown"){
			                                   		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
		  	                  	    				 }
			                                     }else{
			                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
		                                 }
	                                  }       
	          		    			}else if(vqSignalStrengthList[x] < 0){
	              		    			//if(signalStrengthLTT[x] >= 97 && signalStrengthLTT[x] <= 112 ){
	              		    				if(vqSignalStrengthList[x] <= lteupperRangeForAverage && vqSignalStrengthList[x] >= ltelowerRangeForAverage ){
	          		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
		              		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	          		    						if(currNetworkType.toString() == "Unknown"){
	          		    							image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
	  	                  	    				 }else{
	  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
	  	                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_AVG2.png';
				                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                	if(currNetworkType.toString() == "Unknown"){
				                                		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
	  	                  	    				 }else{
	  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
	  	                  	    				 }
				                                }else{
				                                	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
			                                    }	          		    					           
	          						 //  }else if(signalStrengthLTT[x] >= 88 && signalStrengthLTT[x] <= 96 ){
	          						 }else if(vqSignalStrengthList[x] <= lteupperRangeForGood && vqSignalStrengthList[x] >= ltelowerRangeForGood ){
	          							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	          								if(currNetworkType.toString() == "Unknown"){
	          									image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
	  	                  	    				 }else{
	  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
	  	                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_GOOD2.png';
				                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                    	if(currNetworkType.toString() == "Unknown"){
				                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
		  	                  	    				 }
				                                     }else{
				                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
			                                 }	   
	          						//}else if(signalStrengthLTT[x] < 88 ){
	          						}else if(vqSignalStrengthList[x] > lteupperRangeForGood ){
	          							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	          								if(currNetworkType.toString() == "Unknown"){
	          									image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
	  	                  	    				 }else{
	  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
	  	                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_GOOD2.png';
				                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                    	if(currNetworkType.toString() == "Unknown"){
				                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
		  	                  	    				 }
				                                     }else{
				                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
			                                 }	   
	          						}
	          		    		  }
			  	  					   }
			  		  				else if(currNetworkType.trim() == "NA" ){
			     	    				//if(signalStrengthLTT[x] >= 113){
		      	    					if(vqSignalStrengthList[x] <= lteupperRangeForPoor){
		                                  if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
				                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
		                                	  if(currNetworkType.toString() == "Unknown"){
		                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/NA-BAD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/NA-BAD2.png';
		  	                  	    				 }
		                                    }else { 
		                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                    	  image = '../../'+"#{request.contextPath}"+'/resources/images/NA-plus_BAD2.png';
			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
			                                   	if(currNetworkType.toString() == "Unknown"){
			                                   		image = '../../'+"#{request.contextPath}"+'/resources/images/NA-BAD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/NA-BAD2.png';
		  	                  	    				 }
			                                     }else{
			                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/NA-BAD2.png';
		                                 }
		                              }       
		      		    			}else if(vqSignalStrengthList[x] < 0){
		          		    			//if(signalStrengthLTT[x] >= 97 && signalStrengthLTT[x] <= 112 ){
		          		    				if(vqSignalStrengthList[x] <= lteupperRangeForAverage && vqSignalStrengthList[x] >= ltelowerRangeForAverage ){
		      		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
		              		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
		      		    						if(currNetworkType.toString() == "Unknown"){
		      		    							image = '../../'+"#{request.contextPath}"+'/resources/images/NA-plus_AVG2.png';
			                  	    				 }else{
			                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/NA-plus_AVG2.png';
			                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/NA-plus_AVG2.png';
				                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                	if(currNetworkType.toString() == "Unknown"){
				                                		image = '../../'+"#{request.contextPath}"+'/resources/images/NA-AVG2.png';
			                  	    				 }else{
			                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/NA-AVG2.png';
			                  	    				 }
				                                }else{
				                                	image = '../../'+"#{request.contextPath}"+'/resources/images/NA-AVG2.png';
			                                    }	          		    					           
		      						 //  }else if(signalStrengthLTT[x] >= 88 && signalStrengthLTT[x] <= 96 ){
		      						 }else if(vqSignalStrengthList[x] <= lteupperRangeForGood && vqSignalStrengthList[x] >= ltelowerRangeForGood ){
		      							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
		      								if(currNetworkType.toString() == "Unknown"){
		      									image = '../../'+"#{request.contextPath}"+'/resources/images/NA-plus_GOOD2.png';
			                  	    				 }else{
			                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/NA-plus_GOOD2.png';
			                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/NA-plus_GOOD2.png';
				                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                    	if(currNetworkType.toString() == "Unknown"){
				                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/NA-GOOD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/NA-GOOD2.png';
		  	                  	    				 }
				                                     }else{
				                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/NA-GOOD2.png';
			                                 }	   
		      						//}else if(signalStrengthLTT[x] < 88 ){
		      						}else if(vqSignalStrengthList[x] > lteupperRangeForGood ){
		      							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
		      								if(currNetworkType.toString() == "Unknown"){
		      									image = '../../'+"#{request.contextPath}"+'/resources/images/NA-plus_GOOD2.png';
			                  	    				 }else{
			                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/NA-plus_GOOD2.png';
			                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/NA-plus_GOOD2.png';
				                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                    	if(currNetworkType.toString() == "Unknown"){
				                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/NA-GOOD2.png';
		  	                  	    				 }else{
		  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/NA-GOOD2.png';
		  	                  	    				 }
				                                     }else{
				                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/NA-GOOD2.png';
			                                 }	   
		      						}
		      		    		  }
			  	  					   }
			  		  	  			else if(currNetworkType.trim() == "wifi" ){
			     	    				//if(signalStrengthLTT[x] >= 113){
			  	    					if(vqSignalStrengthList[x] <= lteupperRangeForPoor){
			                              if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
				                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
			                            	  if(currNetworkType.toString() == "Unknown"){
			                            		  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
				                  	    				 }else{
				                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
				                  	    				 }
			                                }else { 
			                                  if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
			                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_BAD2.png';
			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
			                                   	if(currNetworkType.toString() == "Unknown"){
			                                   		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
				                  	    				 }else{
				                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
				                  	    				 }
			                                     }else{
			                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
			                             }
			                          }       
			  		    			}else if(vqSignalStrengthList[x] < 0){
			      		    			//if(signalStrengthLTT[x] >= 97 && signalStrengthLTT[x] <= 112 ){
			      		    				if(vqSignalStrengthList[x] <= lteupperRangeForAverage && vqSignalStrengthList[x] >= ltelowerRangeForAverage ){
			  		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
			          		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
			  		    						if(currNetworkType.toString() == "Unknown"){
			  		    							image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_AVG2.png';
			                	    				 }else{
			                	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_AVG2.png';
			                	    				 }
			                                    }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
			                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_AVG2.png';
				                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                	if(currNetworkType.toString() == "Unknown"){
				                                		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
			                	    				 }else{
			                	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
			                	    				 }
				                                }else{
				                                	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
			                                    }	          		    					           
			  						 //  }else if(signalStrengthLTT[x] >= 88 && signalStrengthLTT[x] <= 96 ){
			  						 }else if(vqSignalStrengthList[x] <= lteupperRangeForGood && vqSignalStrengthList[x] >= ltelowerRangeForGood ){
			  							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
			          							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
			  								if(currNetworkType.toString() == "Unknown"){
			  									image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_GOOD2.png';
			                	    				 }else{
			                	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_GOOD2.png';
			                	    				 }
			                                    }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
			                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_GOOD2.png';
				                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                    	if(currNetworkType.toString() == "Unknown"){
				                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
				                  	    				 }else{
				                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
				                  	    				 }
				                                     }else{
				                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
			                                 }	   
			  						//}else if(signalStrengthLTT[x] < 88 ){
			  						}else if(vqSignalStrengthList[x] > lteupperRangeForGood ){
			  							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
			          							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
			  								if(currNetworkType.toString() == "Unknown"){
			  									image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_GOOD2.png';
			                	    				 }else{
			                	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_GOOD2.png';
			                	    				 }
			                                    }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
			                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_GOOD2.png';
				                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                    	if(currNetworkType.toString() == "Unknown"){
				                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
				                  	    				 }else{
				                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
				                  	    				 }
				                                     }else{
				                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
			                                 }	   
			  						}
			  		    		  }
			  	  					   }
	  						   }


	  		    		numberTimesmarked++;
	  		    		         prevNetworkType=currNetworkType;
		    			         prevSourceCellId=currSourceCellId;
		    			    
							if(k == 0){
			  		    		 if(Rating.trim() == "No Rating"){
			  		    			var mar0 = new google.maps.Marker({
			  		    				map : google_map0,
			  		    				animation : google.maps.Animation.DROP,
			  		    				title : addr,
			  		    				position : new google.maps.LatLng(lat,lng),
			  		    				icon : image,
			  		    				html : htmlStr,			  		    				
			  		    				info1 : htmlStr,
			  		    				info2 : networkTypeList,
			  		    				info3 : networkMncList,
			  		    				info4 : networkMccList,
			  		    				info5 : signalStrengthList,
			  		    				info6 : cellLocationCidList,
			  		    				info7 : cellLocationLacList,
			  		    				info8: timeStampForEachSampleList,
			  		    				info9: str,
			  		    				info10 :signalStrengthLTERSRPList,
		  		  		    			info11 :signalStrengthLTERSRQList,
		  		  		    			info12 :signalStrengthLTERSSNRList,
		  		  		    			info13 :signalStrengthLTECQIList,
		  		  		    			info14 :signalStatus,
		  		  		    			info15:signalStrengthList,
			  		    				topLevel : topLevelData
			  			
			  		    			});
			  		    			htmlStr = "";
			  		    			google.maps.event.addListener(mar0, 'click', function() {
			  		    				info_window0.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td colspan="2">&nbsp;'+this.info2+'</td></tr>' 
					  		    				+'<tr><td colspan="2">' +this.info3 +'</td>'+'<td colspan="2">&nbsp;'+ this.info4+ '</td></tr>'  
					  		    				+'<tr><td colspan="2">' +this.info5 +'</td>'+'<td colspan="2">&nbsp;'+ this.info6+ '</td></tr>'  
					  		    				+'<tr><td colspan="2">' +this.info7 +'</td>'+'<td colspan="2">&nbsp;'+ this.info8+ '</td></tr>'
					  		    				+'<tr><td colspan="2">' +this.info10 +'</td>'+'<td colspan="2">&nbsp;'+ this.info11+ '</td></tr>'
					  		    				+'<tr><td colspan="2">' +this.info12 +'</td>'+'<td colspan="2">&nbsp;'+ this.info13+ '</td></tr>'
					  		    				+'<tr><td colspan="2">' +this.info14 +'</td>'+'<td colspan="2">&nbsp;'+ this.info15+ '</td></tr></table>'
					  		    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'+'<br>'
					  		    				+ this.info9);
			  		    				info_window0.open(google_map0, this);
			  		    			});
			  		    		var topLevelData = "";
			  		    		var htmlStr ="";
			  		    		 }else{
				  		    			var mar0 = new google.maps.Marker({
				  		    				map : google_map0,
				  		    				animation : google.maps.Animation.DROP,
				  		    				title : addr,
				  		    				position : new google.maps.LatLng(lat,lng),
				  		    				icon : image,
				  		    				html : htmlStr,
				  		    				info1 : htmlStr,
				  		    				info2 : networkTypeList,
				  		    				info3 : networkMncList,
				  		    				info4 : networkMccList,
				  		    				info5 : signalStrengthList,
				  		    				info6 : cellLocationCidList,
				  		    				info7 : cellLocationLacList,
				  		    				info8: timeStampForEachSampleList,
				  		    				info9: str,
				  		    				info10 :signalStrengthLTERSRPList,
			  		  		    			info11 :signalStrengthLTERSRQList,
			  		  		    			info12 :signalStrengthLTERSSNRList,
			  		  		    			info13 :signalStrengthLTECQIList,
			  		  		    			info14 :signalStatus,
			  		  		    			info15:pESQList,
			  		  		    		info16 :signalStrengthList,
			  		  		    		info17:ratingList,
				  		    				topLevel : topLevelData
				  			
				  		    			});
				  		    			htmlStr = "";
				  		    			google.maps.event.addListener(mar0, 'click', function() {
				  		    				info_window0.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td colspan="2">&nbsp;'+this.info2+'</td></tr>' 
						  		    				+'<tr><td colspan="2">' +this.info3 +'</td>'+'<td colspan="2">&nbsp;'+ this.info4+ '</td></tr>'  
						  		    				+'<tr><td colspan="2">' +this.info5 +'</td>'+'<td colspan="2">&nbsp;'+ this.info6+ '</td></tr>'  
						  		    				+'<tr><td colspan="2">' +this.info7 +'</td>'+'<td colspan="2">&nbsp;'+ this.info8+ '</td></tr>'
						  		    				+'<tr><td colspan="2">' +this.info10 +'</td>'+'<td colspan="2">&nbsp;'+ this.info11+ '</td></tr>'
						  		    				+'<tr><td colspan="2">' +this.info12 +'</td>'+'<td colspan="2">&nbsp;'+ this.info13+ '</td></tr>'
						  		    				+'<tr><td colspan="2">' +this.info14 +'</td>'+'<td colspan="2">&nbsp;'+ this.info15+ '</td></tr>'
						  		    				+'<tr><td colspan="2">' +this.info16 +'</td>'+'<td colspan="2">&nbsp;'+ this.info17+ '</td></tr></table>'
						  		    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
						  		    				+'<br>'
						  		    				+ this.info9);
				  		    				info_window0.open(google_map0, this);
				  		    			});
				  		    		var topLevelData = "";
				  		    		var htmlStr ="";
			  		    		 }
							}else if(k == 1){

			  		    		 if(Rating.trim() == "No Rating"){
			  		    			var mar1 = new google.maps.Marker({
			  		    				map : google_map1,
			  		    				animation : google.maps.Animation.DROP,
			  		    				title : addr,
			  		    				position : new google.maps.LatLng(lat,lng),
			  		    				icon : image,
			  		    				html : htmlStr,
			  		    				info1 : htmlStr,
			  		    				info2 : networkTypeList,
			  		    				info3 : networkMncList,
			  		    				info4 : networkMccList,
			  		    				info5 : signalStrengthList,
			  		    				info6 : cellLocationCidList,
			  		    				info7 : cellLocationLacList,
			  		    				info8: timeStampForEachSampleList,
			  		    				info9: str,
			  		    				topLevel : topLevelData
			  			
			  		    			});
			  		    			htmlStr = "";
			  		    			google.maps.event.addListener(mar1, 'click', function() {
			  		    				info_window1.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td colspan="2">&nbsp;'+this.info2+'</td></tr>' 
					  		    				+'<tr><td colspan="2">' +this.info3 +'</td>'+'<td colspan="2">&nbsp;'+ this.info4+ '</td></tr>'  
					  		    				+'<tr><td colspan="2">' +this.info5 +'</td>'+'<td colspan="2">&nbsp;'+ this.info6+ '</td></tr>'  
					  		    				+'<tr><td colspan="2">' +this.info7 +'</td>'+'<td colspan="2">&nbsp;'+ this.info8+ '</td></tr></table>'
					  		    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
					  		    				+'<br>'
					  		    				+ this.info9);
			  		    				info_window1.open(google_map1, this);
			  		    			});
			  		    		var topLevelData = "";
			  		    		var htmlStr ="";
			  		    		 }else{
			  		    			var mar1 = new google.maps.Marker({
			  		    				map : google_map1,
			  		    				animation : google.maps.Animation.DROP,
			  		    				title : addr,
			  		    				position : new google.maps.LatLng(lat,lng),
			  		    				icon : image,
			  		    				html : htmlStr,			  		    				
			  		    				info12 : ratingList,
			  		    				info13 : pESQList,
			  		    				info14 : pESQAverageOffsetList,
			  		    				info15 : numberAllClippingList,
			  		    				info16 : DurationALLClippingList,
			  		    				info17 :signalStatus,
			  		    				info18 :signalStrengthList,
			  		    				topLevel : topLevelData
			  			
			  		    			});
			  		    			htmlStr = "";
			  		    			google.maps.event.addListener(mar1, 'click', function() {
			  		    				info_window1.setContent('<table><tr><td colspan="2">'+ this.info12+'</td>'+'<td colspan="2">&nbsp;'+ this.info13+ '</td></tr>'
			  		    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td colspan="2">&nbsp;'+ this.info15+ '</td></tr>'
			  		    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td colspan="2">&nbsp;'+ this.info17+ '</td></tr>'
			  		    				+'<tr><td colspan="2">'+ this.info18+'</td></tr></table>');
			  		    				info_window1.open(google_map1, this);
			  		    			});
			  		    		var topLevelData = "";
			  		    		var htmlStr ="";


			  		    		 }
							}else if(k == 2){
								 if(Rating.trim() == "No Rating"){
				  		    			var mar2 = new google.maps.Marker({
				  		    				map : google_map2,
				  		    				animation : google.maps.Animation.DROP,
				  		    				title : addr,
				  		    				position : new google.maps.LatLng(lat,lng),
				  		    				icon : image,
				  		    				html : htmlStr,
				  		    				info1 : htmlStr,
				  		    				info2 : networkTypeList,
				  		    				info3 : networkMncList,
				  		    				info4 : networkMccList,
				  		    				info5 : signalStrengthList,
				  		    				info6 : cellLocationCidList,
				  		    				info7 : cellLocationLacList,
				  		    				info8: timeStampForEachSampleList,
				  		    				info9: str,
				  		    				topLevel : topLevelData
				  			
				  		    			});
				  		    			htmlStr = "";
				  		    			google.maps.event.addListener(mar2, 'click', function() {
				  		    				info_window2.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td colspan="2">&nbsp;'+this.info2+'</td></tr>' 
						  		    				+'<tr><td colspan="2">' +this.info3 +'</td>'+'<td colspan="2">&nbsp;'+ this.info4+ '</td></tr>'  
						  		    				+'<tr><td colspan="2">' +this.info5 +'</td>'+'<td colspan="2">&nbsp;'+ this.info6+ '</td></tr>'  
						  		    				+'<tr><td colspan="2">' +this.info7 +'</td>'+'<td colspan="2">&nbsp;'+ this.info8+ '</td></tr></table>'
						  		    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
						  		    				+'<br>'
						  		    				+ this.info9);
				  		    				info_window2.open(google_map2, this);
				  		    			});
				  		    		var topLevelData = "";
				  		    		var htmlStr ="";
				  		    		 }else{
				  		    			var mar2 = new google.maps.Marker({
				  		    				map : google_map2,
				  		    				animation : google.maps.Animation.DROP,
				  		    				title : addr,
				  		    				position : new google.maps.LatLng(lat,lng),
				  		    				icon : image,
				  		    				html : htmlStr,			  		    				
				  		    				info12 : ratingList,
				  		    				info13 : pESQList,
				  		    				info14 : pESQAverageOffsetList,
				  		    				info15 : numberAllClippingList,
				  		    				info16 : DurationALLClippingList,
				  		    				info17 :signalStatus,
				  		    				info18 :signalStrengthList,
				  		    				topLevel : topLevelData
				  			
				  		    			});
				  		    			htmlStr = "";
				  		    			google.maps.event.addListener(mar2, 'click', function() {
				  		    				info_window2.setContent('<table><tr><td colspan="2">'+ this.info12+'</td>'+'<td colspan="2">&nbsp;'+ this.info13+ '</td></tr>'
				  		    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td colspan="2">&nbsp;'+ this.info15+ '</td></tr>'
				  		    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td colspan="2">&nbsp;'+ this.info17+ '</td></tr>'
				  		    				+'<tr><td colspan="2">'+ this.info18+'</td></tr></table>');
				  		    				info_window2.open(google_map2, this);
				  		    			});
				  		    		var topLevelData = "";
				  		    		var htmlStr ="";


				  		    		 }
							}else if(k == 3){
								 if(Rating.trim() == "No Rating"){
				  		    			var mar3 = new google.maps.Marker({
				  		    				map : google_map3,
				  		    				animation : google.maps.Animation.DROP,
				  		    				title : addr,
				  		    				position : new google.maps.LatLng(lat,lng),
				  		    				icon : image,
				  		    				html : htmlStr,
				  		    				info1 : htmlStr,
				  		    				info2 : networkTypeList,
				  		    				info3 : networkMncList,
				  		    				info4 : networkMccList,
				  		    				info5 : signalStrengthList,
				  		    				info6 : cellLocationCidList,
				  		    				info7 : cellLocationLacList,
				  		    				info8: timeStampForEachSampleList,
				  		    				info9: str,
				  		    				topLevel : topLevelData
				  			
				  		    			});
				  		    			htmlStr = "";
				  		    			google.maps.event.addListener(mar3, 'click', function() {
				  		    				info_window3.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td colspan="2">&nbsp;'+this.info2+'</td></tr>' 
						  		    				+'<tr><td colspan="2">' +this.info3 +'</td>'+'<td colspan="2">&nbsp;'+ this.info4+ '</td></tr>'  
						  		    				+'<tr><td colspan="2">' +this.info5 +'</td>'+'<td colspan="2">&nbsp;'+ this.info6+ '</td></tr>'  
						  		    				+'<tr><td colspan="2">' +this.info7 +'</td>'+'<td colspan="2">&nbsp;'+ this.info8+ '</td></tr></table>'
						  		    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
						  		    				+'<br>'
						  		    				+ this.info9);
				  		    				info_window3.open(google_map3, this);
				  		    			});
				  		    		var topLevelData = "";
				  		    		var htmlStr ="";
				  		    		 }else{
				  		    			var mar3 = new google.maps.Marker({
				  		    				map : google_map3,
				  		    				animation : google.maps.Animation.DROP,
				  		    				title : addr,
				  		    				position : new google.maps.LatLng(lat,lng),
				  		    				icon : image,
				  		    				html : htmlStr,			  		    				
				  		    				info12 : ratingList,
				  		    				info13 : pESQList,
				  		    				info14 : pESQAverageOffsetList,
				  		    				info15 : numberAllClippingList,
				  		    				info16 : DurationALLClippingList,
				  		    				info17 :signalStatus,
				  		    				info18 :signalStrengthList,
				  		    				topLevel : topLevelData
				  			
				  		    			});
				  		    			htmlStr = "";
				  		    			google.maps.event.addListener(mar3, 'click', function() {
				  		    				info_window3.setContent('<table><tr><td colspan="2">'+ this.info12+'</td>'+'<td colspan="2">&nbsp;'+ this.info13+ '</td></tr>'
				  		    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td colspan="2">&nbsp;'+ this.info15+ '</td></tr>'
				  		    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td colspan="2">&nbsp;'+ this.info17+ '</td></tr>'
				  		    				+'<tr><td colspan="2">'+ this.info18+'</td></tr></table>');
				  		    				info_window3.open(google_map3, this);
				  		    			});
				  		    		var topLevelData = "";
				  		    		var htmlStr ="";
				  		    		 }
				        }else if(k == 4){
							 if(Rating.trim() == "No Rating"){
			  		    			var mar4 = new google.maps.Marker({
			  		    				map : google_map4,
			  		    				animation : google.maps.Animation.DROP,
			  		    				title : addr,
			  		    				position : new google.maps.LatLng(lat,lng),
			  		    				icon : image,
			  		    				html : htmlStr,
			  		    				info1 : htmlStr,
			  		    				info2 : networkTypeList,
			  		    				info3 : networkMncList,
			  		    				info4 : networkMccList,
			  		    				info5 : signalStrengthList,
			  		    				info6 : cellLocationCidList,
			  		    				info7 : cellLocationLacList,
			  		    				info8: timeStampForEachSampleList,
			  		    				info9: str,
			  		    				topLevel : topLevelData
			  			
			  		    			});
			  		    			htmlStr = "";
			  		    			google.maps.event.addListener(mar4, 'click', function() {
			  		    				info_window4.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td colspan="2">&nbsp;'+this.info2+'</td></tr>' 
					  		    				+'<tr><td colspan="2">' +this.info3 +'</td>'+'<td colspan="2">&nbsp;'+ this.info4+ '</td></tr>'  
					  		    				+'<tr><td colspan="2">' +this.info5 +'</td>'+'<td colspan="2">&nbsp;'+ this.info6+ '</td></tr>'  
					  		    				+'<tr><td colspan="2">' +this.info7 +'</td>'+'<td colspan="2">&nbsp;'+ this.info8+ '</td></tr></table>'
					  		    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
					  		    				+'<br>'
					  		    				+ this.info9);
			  		    				info_window4.open(google_map4, this);
			  		    			});
			  		    		var topLevelData = "";
			  		    		var htmlStr ="";
			  		    		 }else{
			  		    			var mar4 = new google.maps.Marker({
			  		    				map : google_map4,
			  		    				animation : google.maps.Animation.DROP,
			  		    				title : addr,
			  		    				position : new google.maps.LatLng(lat,lng),
			  		    				icon : image,
			  		    				html : htmlStr,			  		    				
			  		    				info12 : ratingList,
			  		    				info13 : pESQList,
			  		    				info14 : pESQAverageOffsetList,
			  		    				info15 : numberAllClippingList,
			  		    				info16 : DurationALLClippingList,
			  		    				info17 :signalStatus,
			  		    				info18 :signalStrengthList,
			  		    				topLevel : topLevelData
			  			
			  		    			});
			  		    			htmlStr = "";
			  		    			google.maps.event.addListener(mar4, 'click', function() {
			  		    				info_window4.setContent('<table><tr><td colspan="2">'+ this.info12+'</td>'+'<td colspan="2">&nbsp;'+ this.info13+ '</td></tr>'
			  		    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td colspan="2">&nbsp;'+ this.info15+ '</td></tr>'
			  		    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td colspan="2">&nbsp;'+ this.info17+ '</td></tr>'
			  		    				+'<tr><td colspan="2">'+ this.info18+'</td></tr></table>');
			  		    				info_window4.open(google_map4, this);
			  		    			});
			  		    		var topLevelData = "";
			  		    		var htmlStr ="";
			  		    		 }
			        }else if(k == 5){
						 if(Rating.trim() == "No Rating"){
		  		    			var mar5 = new google.maps.Marker({
		  		    				map : google_map5,
		  		    				animation : google.maps.Animation.DROP,
		  		    				title : addr,
		  		    				position : new google.maps.LatLng(lat,lng),
		  		    				icon : image,
		  		    				html : htmlStr,
		  		    				info1 : htmlStr,
		  		    				info2 : networkTypeList,
		  		    				info3 : networkMncList,
		  		    				info4 : networkMccList,
		  		    				info5 : signalStrengthList,
		  		    				info6 : cellLocationCidList,
		  		    				info7 : cellLocationLacList,
		  		    				info8: timeStampForEachSampleList,
		  		    				info9: str,
		  		    				topLevel : topLevelData
		  			
		  		    			});
		  		    			htmlStr = "";
		  		    			google.maps.event.addListener(mar5, 'click', function() {
		  		    				info_window5.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td colspan="2">&nbsp;'+this.info2+'</td></tr>' 
				  		    				+'<tr><td colspan="2">' +this.info3 +'</td>'+'<td colspan="2">&nbsp;'+ this.info4+ '</td></tr>'  
				  		    				+'<tr><td colspan="2">' +this.info5 +'</td>'+'<td colspan="2">&nbsp;'+ this.info6+ '</td></tr>'  
				  		    				+'<tr><td colspan="2">' +this.info7 +'</td>'+'<td colspan="2">&nbsp;'+ this.info8+ '</td></tr></table>'
				  		    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
				  		    				+'<br>'
				  		    				+ this.info9);
		  		    				info_window5.open(google_map5, this);
		  		    			});
		  		    		var topLevelData = "";
		  		    		var htmlStr ="";
		  		    		 }else{
		  		    			var mar5 = new google.maps.Marker({
		  		    				map : google_map5,
		  		    				animation : google.maps.Animation.DROP,
		  		    				title : addr,
		  		    				position : new google.maps.LatLng(lat,lng),
		  		    				icon : image,
		  		    				html : htmlStr,			  		    				
		  		    				info12 : ratingList,
		  		    				info13 : pESQList,
		  		    				info14 : pESQAverageOffsetList,
		  		    				info15 : numberAllClippingList,
		  		    				info16 : DurationALLClippingList,
		  		    				info17 :signalStatus,
		  		    				info18 :signalStrengthList,
		  		    				topLevel : topLevelData
		  			
		  		    			});
		  		    			htmlStr = "";
		  		    			google.maps.event.addListener(mar5, 'click', function() {
		  		    				info_window5.setContent('<table><tr><td colspan="2">'+ this.info12+'</td>'+'<td colspan="2">&nbsp;'+ this.info13+ '</td></tr>'
		  		    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td colspan="2">&nbsp;'+ this.info15+ '</td></tr>'
		  		    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td colspan="2">&nbsp;'+ this.info17+ '</td></tr>'
		  		    				+'<tr><td colspan="2">'+ this.info18+'</td></tr></table>');
		  		    				info_window5.open(google_map5, this);
		  		    			});
		  		    		var topLevelData = "";
		  		    		var htmlStr ="";
		  		    		 }
		        }else if(k == 6){
					 if(Rating.trim() == "No Rating"){
	  		    			var mar6 = new google.maps.Marker({
	  		    				map : google_map6,
	  		    				animation : google.maps.Animation.DROP,
	  		    				title : addr,
	  		    				position : new google.maps.LatLng(lat,lng),
	  		    				icon : image,
	  		    				html : htmlStr,
	  		    				info1 : htmlStr,
	  		    				info2 : networkTypeList,
	  		    				info3 : networkMncList,
	  		    				info4 : networkMccList,
	  		    				info5 : signalStrengthList,
	  		    				info6 : cellLocationCidList,
	  		    				info7 : cellLocationLacList,
	  		    				info8: timeStampForEachSampleList,
	  		    				info9: str,
	  		    				topLevel : topLevelData
	  			
	  		    			});
	  		    			htmlStr = "";
	  		    			google.maps.event.addListener(mar6, 'click', function() {
	  		    				info_window6.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td colspan="2">&nbsp;'+this.info2+'</td></tr>' 
			  		    				+'<tr><td colspan="2">' +this.info3 +'</td>'+'<td colspan="2">&nbsp;'+ this.info4+ '</td></tr>'  
			  		    				+'<tr><td colspan="2">' +this.info5 +'</td>'+'<td colspan="2">&nbsp;'+ this.info6+ '</td></tr>'  
			  		    				+'<tr><td colspan="2">' +this.info7 +'</td>'+'<td colspan="2">&nbsp;'+ this.info8+ '</td></tr></table>'
			  		    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
			  		    				+'<br>'
			  		    				+ this.info9);
	  		    				info_window6.open(google_map6, this);
	  		    			});
	  		    		var topLevelData = "";
	  		    		var htmlStr ="";
	  		    		 }else{
	  		    			var mar6 = new google.maps.Marker({
	  		    				map : google_map6,
	  		    				animation : google.maps.Animation.DROP,
	  		    				title : addr,
	  		    				position : new google.maps.LatLng(lat,lng),
	  		    				icon : image,
	  		    				html : htmlStr,			  		    				
	  		    				info12 : ratingList,
	  		    				info13 : pESQList,
	  		    				info14 : pESQAverageOffsetList,
	  		    				info15 : numberAllClippingList,
	  		    				info16 : DurationALLClippingList,
	  		    				info17 :signalStatus,
	  		    				info18 :signalStrengthList,
	  		    				topLevel : topLevelData
	  			
	  		    			});
	  		    			htmlStr = "";
	  		    			google.maps.event.addListener(mar6, 'click', function() {
	  		    				info_window6.setContent('<table><tr><td colspan="2">'+ this.info12+'</td>'+'<td colspan="2">&nbsp;'+ this.info13+ '</td></tr>'
	  		    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td colspan="2">&nbsp;'+ this.info15+ '</td></tr>'
	  		    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td colspan="2">&nbsp;'+ this.info17+ '</td></tr>'
	  		    				+'<tr><td colspan="2">'+ this.info18+'</td></tr></table>');
	  		    				info_window6.open(google_map6, this);
	  		    			});
	  		    		var topLevelData = "";
	  		    		var htmlStr ="";
	  		    		 }
	        }else if(k == 7){
				 if(Rating.trim() == "No Rating"){
		    			var mar7 = new google.maps.Marker({
		    				map : google_map7,
		    				animation : google.maps.Animation.DROP,
		    				title : addr,
		    				position : new google.maps.LatLng(lat,lng),
		    				icon : image,
		    				html : htmlStr,
		    				info1 : htmlStr,
		    				info2 : networkTypeList,
		    				info3 : networkMncList,
		    				info4 : networkMccList,
		    				info5 : signalStrengthList,
		    				info6 : cellLocationCidList,
		    				info7 : cellLocationLacList,
		    				info8: timeStampForEachSampleList,
		    				info9: str,
		    				topLevel : topLevelData
			
		    			});
		    			htmlStr = "";
		    			google.maps.event.addListener(mar7, 'click', function() {
		    				info_window7.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td colspan="2">&nbsp;'+this.info2+'</td></tr>' 
		  		    				+'<tr><td colspan="2">' +this.info3 +'</td>'+'<td colspan="2">&nbsp;'+ this.info4+ '</td></tr>'  
		  		    				+'<tr><td colspan="2">' +this.info5 +'</td>'+'<td colspan="2">&nbsp;'+ this.info6+ '</td></tr>'  
		  		    				+'<tr><td colspan="2">' +this.info7 +'</td>'+'<td colspan="2">&nbsp;'+ this.info8+ '</td></tr></table>'
		  		    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
		  		    				+'<br>'
		  		    				+ this.info9);
		    				info_window7.open(google_map7, this);
		    			});
		    		var topLevelData = "";
		    		var htmlStr ="";
		    		 }else{
		    			var mar7 = new google.maps.Marker({
		    				map : google_map7,
		    				animation : google.maps.Animation.DROP,
		    				title : addr,
		    				position : new google.maps.LatLng(lat,lng),
		    				icon : image,
		    				html : htmlStr,			  		    				
		    				info12 : ratingList,
		    				info13 : pESQList,
		    				info14 : pESQAverageOffsetList,
		    				info15 : numberAllClippingList,
		    				info16 : DurationALLClippingList,
		    				info17 :signalStatus,
		    				info18 :signalStrengthList,
		    				topLevel : topLevelData
			
		    			});
		    			htmlStr = "";
		    			google.maps.event.addListener(mar7, 'click', function() {
		    				info_window7.setContent('<table><tr><td colspan="2">'+ this.info12+'</td>'+'<td colspan="2">&nbsp;'+ this.info13+ '</td></tr>'
		    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td colspan="2">&nbsp;'+ this.info15+ '</td></tr>'
		    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td colspan="2">&nbsp;'+ this.info17+ '</td></tr>'
		    				+'<tr><td colspan="2">'+ this.info18+'</td></tr></table>');
		    				info_window7.open(google_map7, this);
		    			});
		    		var topLevelData = "";
		    		var htmlStr ="";
		    		 }
     }
			    		}
		            }
	         }
	 }
 }
	 /* ]]> */
	 
	    /* <![CDATA[ */
     function intializeVoiceConnectivity(){
         var FinalMOCount="#{sessionScope['FinalMOCount']}";   
	     var jsonArrayLength="#{sessionScope['jsonArrayLength']}"; 
	    if(jsonArrayLength>0){
		   for(var k=0;k<FinalMOCount;k++){
    	  var j=0;      			  
          if(k==0){
        	  var lattitudes = "#{sessionScope['VClattitudes0']}";  
        	  lattitudes = lattitudes.split(",");
        	  var longitudes = "#{sessionScope['VClongitudes0']}";  
        	  longitudes = longitudes.split(",");
        	  var testName = "#{sessionScope['VCtestName0']}"; 
        	  testName = testName.split(",");
        	  var signalStrength = "#{sessionScope['VCsignalStrength0']}";  
        	  signalStrength = signalStrength.split(",");
        	  var signalStrengthLTT = "#{sessionScope['VCsignalStrengthLTT0']}";  
        	  signalStrengthLTT = signalStrengthLTT.split(",");
        	  var signalStrengthRating = "#{sessionScope['VCsignalStrengthRating0']}";  
        	  signalStrengthRating = signalStrengthRating.split(",");
        	  var networkType = "#{sessionScope['VCnetworkType0']}";  
        	  networkType = networkType.split(",");
        	  var networkData = "#{sessionScope['VCnetworkData0']}";  
        	  networkData = networkData.split(",");
        	  var networkRoaming = "#{sessionScope['VCnetworkRoaming0']}";  
        	  networkRoaming = networkRoaming.split(",");
        	  var signalStrengthSnr = "#{sessionScope['signalStrengthSnr0']}";  
        	  signalStrengthSnr = signalStrengthSnr.split(",");
        	  var networkMnc = "#{sessionScope['VCnetworkMnc0']}";  
        	  networkMnc = networkMnc.split(",");
        	  var networkMcc = "#{sessionScope['VCnetworkMcc0']}";  
        	  networkMcc = networkMcc.split(",");
        	  var cellLocationLac = "#{sessionScope['VCcellLocationLac0']}";  
        	  cellLocationLac = cellLocationLac.split(",");
        	  var cellLocationCid = "#{sessionScope['VCcellLocationCid0']}";  
        	  cellLocationCid = cellLocationCid.split(",");
        	  var devicePhoneType = "#{sessionScope['VCdevicePhoneType0']}";  
        	  devicePhoneType = devicePhoneType.split(",");
        	  var timeStampForEachSample = "#{sessionScope['VCtimeStampForEachSample0']}";  
        	  timeStampForEachSample = timeStampForEachSample.split(",");
        	  var timeStampForSample = "#{sessionScope['VCtimeStampForSample0']}";  
            	  timeStampForSample = timeStampForSample.split(",");
        	  var neighbourMainInfo ="#{sessionScope['VCneighbourInfo0']}";
        	  neighbourMainInfo = neighbourMainInfo.split("|||||");
        	  var signalStrengthEVDOECIO = "#{sessionScope['VCsignalStrengthEVDOECIO0']}";  
        	  signalStrengthEVDOECIO = signalStrengthEVDOECIO.split(",");
        	  var signalStrengthCDMACIO = "#{sessionScope['VCsignalStrengthCDMACIO0']}";  
        	  signalStrengthCDMACIO0 = signalStrengthCDMACIO.split(",");
        	  var signalStrengthLTERSRP = "#{sessionScope['VCsignalStrengthLTERSRP0']}";  
        	  signalStrengthLTERSRP0 = signalStrengthLTERSRP.split(",");
        	  var signalStrengthLTERSRQ = "#{sessionScope['VCsignalStrengthLTERSRQ0']}";  
        	  signalStrengthLTERSRQ = signalStrengthLTERSRQ.split(",");
        	  var signalStrengthLTERSSNR = "#{sessionScope['VCsignalStrengthLTERSSNR0']}";  
        	  signalStrengthLTERSSNR = signalStrengthLTERSSNR.split(",");
        	  var signalStrengthLTECQI = "#{sessionScope['VCsignalStrengthLTECQI0']}";  
        	  signalStrengthLTECQI = signalStrengthLTECQI.split(",");
        	  var deviceInfoCallDropList = "#{sessionScope['VCdeviceInfoCallDropList0']}";  
        	  deviceInfoCallDropList = deviceInfoCallDropList.split(",");
        	  //mapvalue="voiceConnectivityFirstMap";
        	  var map_options4 = {
  	    			center : new google.maps.LatLng(lattitudes[2] ,longitudes[2]),
  	    			zoom : 12,
  	    			mapTypeId : google.maps.MapTypeId.ROADMAP
  	    		};

  	    		var google_map4 = new google.maps.Map(document.getElementById("voiceConnectivityFirstMap"), map_options4);
  	    		var info_window4 = new google.maps.InfoWindow({
  	    			content : 'loading'
  	    		});
          }else if(k==1){
        	  var lattitudes = "#{sessionScope['VClattitudes1']}";  
        	  lattitudes = lattitudes.split(",");
        	  var longitudes = "#{sessionScope['VClongitudes1']}";  
        	  longitudes = longitudes.split(",");
        	  var testName = "#{sessionScope['VCtestName1']}"; 
        	  testName = testName.split(",");
        	  var signalStrength = "#{sessionScope['VCsignalStrength1']}";  
        	  signalStrength = signalStrength.split(",");
        	  var signalStrengthLTT = "#{sessionScope['VCsignalStrengthLTT1']}";  
        	  signalStrengthLTT = signalStrengthLTT.split(",");
        	  var signalStrengthRating = "#{sessionScope['VCsignalStrengthRating1']}";  
        	  signalStrengthRating = signalStrengthRating.split(",");
        	  var networkType = "#{sessionScope['VCnetworkType1']}";  
        	  networkType = networkType.split(",");
        	  var networkData = "#{sessionScope['VCnetworkData1']}";  
        	  networkData = networkData.split(",");
        	  var networkRoaming = "#{sessionScope['VCnetworkRoaming1']}";  
        	  networkRoaming = networkRoaming.split(",");
        	  var signalStrengthSnr = "#{sessionScope['VCsignalStrengthSnr1']}";  
        	  signalStrengthSnr = signalStrengthSnr.split(",");
        	  var networkMnc = "#{sessionScope['VCnetworkMnc1']}";  
        	  networkMnc = networkMnc.split(",");
        	  var networkMcc = "#{sessionScope['VCnetworkMcc1']}";  
        	  networkMcc = networkMcc.split(",");
        	  var cellLocationLac = "#{sessionScope['VCcellLocationLac1']}";  
        	  cellLocationLac = cellLocationLac.split(",");
        	  var cellLocationCid = "#{sessionScope['VCcellLocationCid1']}";  
        	  cellLocationCid = cellLocationCid.split(",");
        	  var devicePhoneType = "#{sessionScope['VCdevicePhoneType1']}";  
        	  devicePhoneType = devicePhoneType.split(",");
        	  var timeStampForEachSample = "#{sessionScope['VCtimeStampForEachSample1']}";  
        	  timeStampForEachSample = timeStampForEachSample.split(",");
        	  var timeStampForSample = "#{sessionScope['VCtimeStampForSample1']}";  
            	  timeStampForSample = timeStampForSample.split(",");
        	  var neighbourMainInfo ="#{sessionScope['VCneighbourInfo1']}";
        	  neighbourMainInfo = neighbourMainInfo.split("|||||");
        	  var signalStrengthEVDOECIO = "#{sessionScope['VCsignalStrengthEVDOECIO1']}";  
        	  signalStrengthEVDOECIO = signalStrengthEVDOECIO.split(",");
        	  var signalStrengthCDMACIO = "#{sessionScope['VCsignalStrengthCDMACIO1']}";  
        	  signalStrengthCDMACIO1 = signalStrengthCDMACIO.split(",");
        	  var signalStrengthLTERSRP = "#{sessionScope['VCsignalStrengthLTERSRP1']}";  
        	  signalStrengthLTERSRP1 = signalStrengthLTERSRP.split(",");
        	  var signalStrengthLTERSRQ = "#{sessionScope['VCsignalStrengthLTERSRQ1']}";  
        	  signalStrengthLTERSRQ = signalStrengthLTERSRQ.split(",");
        	  var signalStrengthLTERSSNR = "#{sessionScope['VCsignalStrengthLTERSSNR1']}";  
        	  signalStrengthLTERSSNR = signalStrengthLTERSSNR.split(",");
        	  var signalStrengthLTECQI = "#{sessionScope['VCsignalStrengthLTECQI1']}";  
        	  signalStrengthLTECQI = signalStrengthLTECQI.split(",");
        	  var deviceInfoCallDropList = "#{sessionScope['VCdeviceInfoCallDropList1']}";  
        	  deviceInfoCallDropList = deviceInfoCallDropList.split(",");
        	  //mapvalue="voiceConnectivitySecondMap";
        	  var map_options5 = {
        	  	center : new google.maps.LatLng(lattitudes[2] ,longitudes[2]),
        	  	zoom : 12,
        	  	mapTypeId : google.maps.MapTypeId.ROADMAP
        	  };

        	  var google_map5 = new google.maps.Map(document.getElementById("voiceConnectivitySecondMap"), map_options5);
        	  var info_window5 = new google.maps.InfoWindow({
        	  	content : 'loading'
        	  });
          }else if(k==2){
        	  var lattitudes = "#{sessionScope['VClattitudes2']}";  
        	  lattitudes = lattitudes.split(",");
        	  var longitudes = "#{sessionScope['VClongitudes2']}";  
        	  longitudes = longitudes.split(",");
        	  var testName = "#{sessionScope['VCtestName2']}"; 
        	  testName = testName.split(",");
        	  var signalStrength = "#{sessionScope['VCsignalStrength2']}";  
        	  signalStrength = signalStrength.split(",");
        	  var signalStrengthLTT = "#{sessionScope['VCsignalStrengthLTT2']}";  
        	  signalStrengthLTT = signalStrengthLTT.split(",");
        	  var signalStrengthRating = "#{sessionScope['VCsignalStrengthRating2']}";  
        	  signalStrengthRating = signalStrengthRating.split(",");
        	  var networkType = "#{sessionScope['VCnetworkType2']}";  
        	  networkType = networkType.split(",");
        	  var networkData = "#{sessionScope['VCnetworkData2']}";  
        	  networkData = networkData.split(",");
        	  var networkRoaming = "#{sessionScope['VCnetworkRoaming2']}";  
        	  networkRoaming = networkRoaming.split(",");
        	  var signalStrengthSnr = "#{sessionScope['VCsignalStrengthSnr2']}";  
        	  signalStrengthSnr = signalStrengthSnr.split(",");
        	  var networkMnc = "#{sessionScope['VCnetworkMnc2']}";  
        	  networkMnc = networkMnc.split(",");
        	  var networkMcc = "#{sessionScope['VCnetworkMcc2']}";  
        	  networkMcc = networkMcc.split(",");
        	  var cellLocationLac = "#{sessionScope['VCcellLocationLac2']}";  
        	  cellLocationLac = cellLocationLac.split(",");
        	  var cellLocationCid = "#{sessionScope['VCcellLocationCid2']}";  
        	  cellLocationCid = cellLocationCid.split(",");
        	  var devicePhoneType = "#{sessionScope['VCdevicePhoneType2']}";  
        	  devicePhoneType = devicePhoneType.split(",");
        	  var timeStampForEachSample = "#{sessionScope['VCtimeStampForEachSample2']}";  
        	  timeStampForEachSample = timeStampForEachSample.split(",");
        	  var timeStampForSample = "#{sessionScope['VCtimeStampForSample2']}";  
            	  timeStampForSample = timeStampForSample.split(",");
        	  var neighbourMainInfo ="#{sessionScope['VCneighbourInfo2']}";
        	  neighbourMainInfo = neighbourMainInfo.split("|||||");
        	  var signalStrengthEVDOECIO = "#{sessionScope['VCsignalStrengthEVDOECIO2']}";  
        	  signalStrengthEVDOECIO = signalStrengthEVDOECIO.split(",");
        	  var signalStrengthCDMACIO = "#{sessionScope['VCsignalStrengthCDMACIO2']}";  
        	  signalStrengthCDMACIO2 = signalStrengthCDMACIO.split(",");
        	  var signalStrengthLTERSRP = "#{sessionScope['VCsignalStrengthLTERSRP2']}";  
        	  signalStrengthLTERSRP2 = signalStrengthLTERSRP.split(",");
        	  var signalStrengthLTERSRQ = "#{sessionScope['VCsignalStrengthLTERSRQ2']}";  
        	  signalStrengthLTERSRQ = signalStrengthLTERSRQ.split(",");
        	  var signalStrengthLTERSSNR = "#{sessionScope['VCsignalStrengthLTERSSNR2']}";  
        	  signalStrengthLTERSSNR = signalStrengthLTERSSNR.split(",");
        	  var signalStrengthLTECQI = "#{sessionScope['VCsignalStrengthLTECQI2']}";  
        	  signalStrengthLTECQI = signalStrengthLTECQI.split(",");
        	  var deviceInfoCallDropList = "#{sessionScope['VCdeviceInfoCallDropList2']}";  
        	  deviceInfoCallDropList = deviceInfoCallDropList.split(",");
        	  //mapvalue="voiceConnectivityThirdMap";
        	  var map_options6 = {
        	  	center : new google.maps.LatLng(lattitudes[2] ,longitudes[2]),
        	  	zoom : 12,
        	  	mapTypeId : google.maps.MapTypeId.ROADMAP
        	  };

        	  var google_map6 = new google.maps.Map(document.getElementById("voiceConnectivityThirdMap"), map_options6);

        	  var info_window6 = new google.maps.InfoWindow({
        	  	content : 'loading'
        	  });
          }else if(k==3){
        	  var lattitudes = "#{sessionScope['VClattitudes3']}";  
        	  lattitudes = lattitudes.split(",");
        	  var longitudes = "#{sessionScope['VClongitudes3']}";  
        	  longitudes = longitudes.split(",");
        	  var testName = "#{sessionScope['VCtestName3']}"; 
        	  testName = testName.split(",");
        	  var signalStrength = "#{sessionScope['VCsignalStrength3']}";  
        	  signalStrength = signalStrength.split(",");
        	  var signalStrengthLTT = "#{sessionScope['VCsignalStrengthLTT3']}";  
        	  signalStrengthLTT = signalStrengthLTT.split(",");
        	  var signalStrengthRating = "#{sessionScope['VCsignalStrengthRating3']}";  
        	  signalStrengthRating = signalStrengthRating.split(",");
        	  var networkType = "#{sessionScope['VCnetworkType3']}";  
        	  networkType = networkType.split(",");
        	  var networkData = "#{sessionScope['VCnetworkData3']}";  
        	  networkData = networkData.split(",");
        	  var networkRoaming = "#{sessionScope['VCnetworkRoaming3']}";  
        	  networkRoaming = networkRoaming.split(",");
        	  var signalStrengthSnr = "#{sessionScope['VCsignalStrengthSnr3']}";  
        	  signalStrengthSnr = signalStrengthSnr.split(",");
        	  var networkMnc = "#{sessionScope['VCnetworkMnc3']}";  
        	  networkMnc = networkMnc.split(",");
        	  var networkMcc = "#{sessionScope['VCnetworkMcc3']}";  
        	  networkMcc = networkMcc.split(",");
        	  var cellLocationLac = "#{sessionScope['VCcellLocationLac3']}";  
        	  cellLocationLac = cellLocationLac.split(",");
        	  var cellLocationCid = "#{sessionScope['VCcellLocationCid3']}";  
        	  cellLocationCid = cellLocationCid.split(",");
        	  var devicePhoneType = "#{sessionScope['VCdevicePhoneType3']}";  
        	  devicePhoneType = devicePhoneType.split(",");
        	  var timeStampForEachSample = "#{sessionScope['VCtimeStampForEachSample3']}";  
        	  timeStampForEachSample = timeStampForEachSample.split(",");
        	  var timeStampForSample = "#{sessionScope['VCtimeStampForSample3']}";  
            	  timeStampForSample = timeStampForSample.split(",");
        	  var neighbourMainInfo ="#{sessionScope['VCneighbourInfo3']}";
        	  neighbourMainInfo = neighbourMainInfo.split("|||||");
        	  var signalStrengthEVDOECIO = "#{sessionScope['VCsignalStrengthEVDOECIO3']}";  
        	  signalStrengthEVDOECIO = signalStrengthEVDOECIO.split(",");
        	  var signalStrengthCDMACIO = "#{sessionScope['VCsignalStrengthCDMACIO3']}";  
        	  signalStrengthCDMACIO3 = signalStrengthCDMACIO.split(",");
        	  var signalStrengthLTERSRP = "#{sessionScope['VCsignalStrengthLTERSRP3']}";  
        	  signalStrengthLTERSRP3 = signalStrengthLTERSRP.split(",");
        	  var signalStrengthLTERSRQ = "#{sessionScope['VCsignalStrengthLTERSRQ3']}";  
        	  signalStrengthLTERSRQ = signalStrengthLTERSRQ.split(",");
        	  var signalStrengthLTERSSNR = "#{sessionScope['VCsignalStrengthLTERSSNR3']}";  
        	  signalStrengthLTERSSNR = signalStrengthLTERSSNR.split(",");
        	  var signalStrengthLTECQI = "#{sessionScope['VCsignalStrengthLTECQI3']}";  
        	  signalStrengthLTECQI = signalStrengthLTECQI.split(",");
        	  var deviceInfoCallDropList = "#{sessionScope['VCdeviceInfoCallDropList3']}";  
        	  deviceInfoCallDropList = deviceInfoCallDropList.split(",");
        	  //mapvalue="voiceConnectivityFourthMap";
        	  var map_options7 = {
        	  	center : new google.maps.LatLng(lattitudes[3] ,longitudes[3]),
        	  	zoom : 12,
        	  	mapTypeId : google.maps.MapTypeId.ROADMAP
        	  };

        	  var google_map7 = new google.maps.Map(document.getElementById("voiceConnectivityFourthMap"), map_options7);

        	  var info_window7 = new google.maps.InfoWindow({
        	  	content : 'loading'
        	  });
          }else if(k==4){
        	  var lattitudes = "#{sessionScope['VClattitudes4']}";  
        	  lattitudes = lattitudes.split(",");
        	  var longitudes = "#{sessionScope['VClongitudes4']}";  
        	  longitudes = longitudes.split(",");
        	  var testName = "#{sessionScope['VCtestName4']}"; 
        	  testName = testName.split(",");
        	  var signalStrength = "#{sessionScope['VCsignalStrength4']}";  
        	  signalStrength = signalStrength.split(",");
        	  var signalStrengthLTT = "#{sessionScope['VCsignalStrengthLTT4']}";  
        	  signalStrengthLTT = signalStrengthLTT.split(",");
        	  var signalStrengthRating = "#{sessionScope['VCsignalStrengthRating4']}";  
        	  signalStrengthRating = signalStrengthRating.split(",");
        	  var networkType = "#{sessionScope['VCnetworkType4']}";  
        	  networkType = networkType.split(",");
        	  var networkData = "#{sessionScope['VCnetworkData4']}";  
        	  networkData = networkData.split(",");
        	  var networkRoaming = "#{sessionScope['VCnetworkRoaming4']}";  
        	  networkRoaming = networkRoaming.split(",");
        	  var signalStrengthSnr = "#{sessionScope['VCsignalStrengthSnr4']}";  
        	  signalStrengthSnr = signalStrengthSnr.split(",");
        	  var networkMnc = "#{sessionScope['VCnetworkMnc4']}";  
        	  networkMnc = networkMnc.split(",");
        	  var networkMcc = "#{sessionScope['VCnetworkMcc4']}";  
        	  networkMcc = networkMcc.split(",");
        	  var cellLocationLac = "#{sessionScope['VCcellLocationLac4']}";  
        	  cellLocationLac = cellLocationLac.split(",");
        	  var cellLocationCid = "#{sessionScope['VCcellLocationCid4']}";  
        	  cellLocationCid = cellLocationCid.split(",");
        	  var devicePhoneType = "#{sessionScope['VCdevicePhoneType4']}";  
        	  devicePhoneType = devicePhoneType.split(",");
        	  var timeStampForEachSample = "#{sessionScope['VCtimeStampForEachSample4']}";  
        	  timeStampForEachSample = timeStampForEachSample.split(",");
        	  var timeStampForSample = "#{sessionScope['VCtimeStampForSample4']}";  
              timeStampForSample = timeStampForSample.split(",");
        	  var neighbourMainInfo ="#{sessionScope['VCneighbourInfo4']}";
        	  neighbourMainInfo = neighbourMainInfo.split("|||||");
        	  var signalStrengthEVDOECIO = "#{sessionScope['VCsignalStrengthEVDOECIO4']}";  
        	  signalStrengthEVDOECIO = signalStrengthEVDOECIO.split(",");
        	  var signalStrengthCDMACIO = "#{sessionScope['VCsignalStrengthCDMACIO4']}";  
        	  signalStrengthCDMACIO4 = signalStrengthCDMACIO.split(",");
        	  var signalStrengthLTERSRP = "#{sessionScope['VCsignalStrengthLTERSRP4']}";  
        	  signalStrengthLTERSRP4 = signalStrengthLTERSRP.split(",");
        	  var signalStrengthLTERSRQ = "#{sessionScope['VCsignalStrengthLTERSRQ4']}";  
        	  signalStrengthLTERSRQ = signalStrengthLTERSRQ.split(",");
        	  var signalStrengthLTERSSNR = "#{sessionScope['VCsignalStrengthLTERSSNR4']}";  
        	  signalStrengthLTERSSNR = signalStrengthLTERSSNR.split(",");
        	  var signalStrengthLTECQI = "#{sessionScope['VCsignalStrengthLTECQI4']}";  
        	  signalStrengthLTECQI = signalStrengthLTECQI.split(",");
        	  var deviceInfoCallDropList = "#{sessionScope['VCdeviceInfoCallDropList4']}";  
        	  deviceInfoCallDropList = deviceInfoCallDropList.split(",");
        	  //mapvalue="voiceConnectivityFourthMap";
        	  var map_options8 = {
        	  	center : new google.maps.LatLng(lattitudes[4] ,longitudes[4]),
        	  	zoom : 12,
        	  	mapTypeId : google.maps.MapTypeId.ROADMAP
        	  };

        	  var google_map8 = new google.maps.Map(document.getElementById("voiceConnectivityFifthMap"), map_options8);

        	  var info_window8 = new google.maps.InfoWindow({
        	  	content : 'loading'
        	  });
          }else if(k==5){
        	  var lattitudes = "#{sessionScope['VClattitudes5']}";  
        	  lattitudes = lattitudes.split(",");
        	  var longitudes = "#{sessionScope['VClongitudes5']}";  
        	  longitudes = longitudes.split(",");
        	  var testName = "#{sessionScope['VCtestName5']}"; 
        	  testName = testName.split(",");
        	  var signalStrength = "#{sessionScope['VCsignalStrength5']}";  
        	  signalStrength = signalStrength.split(",");
        	  var signalStrengthLTT = "#{sessionScope['VCsignalStrengthLTT5']}";  
        	  signalStrengthLTT = signalStrengthLTT.split(",");
        	  var signalStrengthRating = "#{sessionScope['VCsignalStrengthRating5']}";  
        	  signalStrengthRating = signalStrengthRating.split(",");
        	  var networkType = "#{sessionScope['VCnetworkType5']}";  
        	  networkType = networkType.split(",");
        	  var networkData = "#{sessionScope['VCnetworkData5']}";  
        	  networkData = networkData.split(",");
        	  var networkRoaming = "#{sessionScope['VCnetworkRoaming5']}";  
        	  networkRoaming = networkRoaming.split(",");
        	  var signalStrengthSnr = "#{sessionScope['VCsignalStrengthSnr5']}";  
        	  signalStrengthSnr = signalStrengthSnr.split(",");
        	  var networkMnc = "#{sessionScope['VCnetworkMnc5']}";  
        	  networkMnc = networkMnc.split(",");
        	  var networkMcc = "#{sessionScope['VCnetworkMcc5']}";  
        	  networkMcc = networkMcc.split(",");
        	  var cellLocationLac = "#{sessionScope['VCcellLocationLac5']}";  
        	  cellLocationLac = cellLocationLac.split(",");
        	  var cellLocationCid = "#{sessionScope['VCcellLocationCid5']}";  
        	  cellLocationCid = cellLocationCid.split(",");
        	  var devicePhoneType = "#{sessionScope['VCdevicePhoneType5']}";  
        	  devicePhoneType = devicePhoneType.split(",");
        	  var timeStampForEachSample = "#{sessionScope['VCtimeStampForEachSample5']}";  
        	  timeStampForEachSample = timeStampForEachSample.split(",");
        	  var timeStampForSample = "#{sessionScope['VCtimeStampForSample5']}";  
            	  timeStampForSample = timeStampForSample.split(",");
        	  var neighbourMainInfo ="#{sessionScope['VCneighbourInfo5']}";
        	  neighbourMainInfo = neighbourMainInfo.split("|||||");
        	  var signalStrengthEVDOECIO = "#{sessionScope['VCsignalStrengthEVDOECIO5']}";  
        	  signalStrengthEVDOECIO = signalStrengthEVDOECIO.split(",");
        	  var signalStrengthCDMACIO = "#{sessionScope['VCsignalStrengthCDMACIO5']}";  
        	  signalStrengthCDMACIO5 = signalStrengthCDMACIO.split(",");
        	  var signalStrengthLTERSRP = "#{sessionScope['VCsignalStrengthLTERSRP5']}";  
        	  signalStrengthLTERSRP5 = signalStrengthLTERSRP.split(",");
        	  var signalStrengthLTERSRQ = "#{sessionScope['VCsignalStrengthLTERSRQ5']}";  
        	  signalStrengthLTERSRQ = signalStrengthLTERSRQ.split(",");
        	  var signalStrengthLTERSSNR = "#{sessionScope['VCsignalStrengthLTERSSNR5']}";  
        	  signalStrengthLTERSSNR = signalStrengthLTERSSNR.split(",");
        	  var signalStrengthLTECQI = "#{sessionScope['VCsignalStrengthLTECQI5']}";  
        	  signalStrengthLTECQI = signalStrengthLTECQI.split(",");
        	  var deviceInfoCallDropList = "#{sessionScope['VCdeviceInfoCallDropList5']}";  
        	  deviceInfoCallDropList = deviceInfoCallDropList.split(",");
        	  //mapvalue="voiceConnectivityFourthMap";
        	  var map_options9 = {
        	  	center : new google.maps.LatLng(lattitudes[5] ,longitudes[5]),
        	  	zoom : 12,
        	  	mapTypeId : google.maps.MapTypeId.ROADMAP
        	  };

        	  var google_map9 = new google.maps.Map(document.getElementById("voiceConnectivitySixthMap"), map_options9);

        	  var info_window9 = new google.maps.InfoWindow({
        	  	content : 'loading'
        	  });
          }else if(k==6){
        	  var lattitudes = "#{sessionScope['VClattitudes6']}";  
        	  lattitudes = lattitudes.split(",");
        	  var longitudes = "#{sessionScope['VClongitudes6']}";  
        	  longitudes = longitudes.split(",");
        	  var testName = "#{sessionScope['VCtestName6']}"; 
        	  testName = testName.split(",");
        	  var signalStrength = "#{sessionScope['VCsignalStrength6']}";  
        	  signalStrength = signalStrength.split(",");
        	  var signalStrengthLTT = "#{sessionScope['VCsignalStrengthLTT6']}";  
        	  signalStrengthLTT = signalStrengthLTT.split(",");
        	  var signalStrengthRating = "#{sessionScope['VCsignalStrengthRating6']}";  
        	  signalStrengthRating = signalStrengthRating.split(",");
        	  var networkType = "#{sessionScope['VCnetworkType6']}";  
        	  networkType = networkType.split(",");
        	  var networkData = "#{sessionScope['VCnetworkData6']}";  
        	  networkData = networkData.split(",");
        	  var networkRoaming = "#{sessionScope['VCnetworkRoaming6']}";  
        	  networkRoaming = networkRoaming.split(",");
        	  var signalStrengthSnr = "#{sessionScope['VCsignalStrengthSnr6']}";  
        	  signalStrengthSnr = signalStrengthSnr.split(",");
        	  var networkMnc = "#{sessionScope['VCnetworkMnc6']}";  
        	  networkMnc = networkMnc.split(",");
        	  var networkMcc = "#{sessionScope['VCnetworkMcc6']}";  
        	  networkMcc = networkMcc.split(",");
        	  var cellLocationLac = "#{sessionScope['VCcellLocationLac6']}";  
        	  cellLocationLac = cellLocationLac.split(",");
        	  var cellLocationCid = "#{sessionScope['VCcellLocationCid6']}";  
        	  cellLocationCid = cellLocationCid.split(",");
        	  var devicePhoneType = "#{sessionScope['VCdevicePhoneType6']}";  
        	  devicePhoneType = devicePhoneType.split(",");
        	  var timeStampForEachSample = "#{sessionScope['VCtimeStampForEachSample6']}";  
        	  timeStampForEachSample = timeStampForEachSample.split(",");
        	  var timeStampForSample = "#{sessionScope['VCtimeStampForSample6']}";  
            	  timeStampForSample = timeStampForSample.split(",");
        	  var neighbourMainInfo ="#{sessionScope['VCneighbourInfo6']}";
        	  neighbourMainInfo = neighbourMainInfo.split("|||||");
        	  var signalStrengthEVDOECIO = "#{sessionScope['VCsignalStrengthEVDOECIO6']}";  
        	  signalStrengthEVDOECIO = signalStrengthEVDOECIO.split(",");
        	  var signalStrengthCDMACIO = "#{sessionScope['VCsignalStrengthCDMACIO6']}";  
        	  signalStrengthCDMACIO6 = signalStrengthCDMACIO.split(",");
        	  var signalStrengthLTERSRP = "#{sessionScope['VCsignalStrengthLTERSRP6']}";  
        	  signalStrengthLTERSRP6 = signalStrengthLTERSRP.split(",");
        	  var signalStrengthLTERSRQ = "#{sessionScope['VCsignalStrengthLTERSRQ6']}";  
        	  signalStrengthLTERSRQ = signalStrengthLTERSRQ.split(",");
        	  var signalStrengthLTERSSNR = "#{sessionScope['VCsignalStrengthLTERSSNR6']}";  
        	  signalStrengthLTERSSNR = signalStrengthLTERSSNR.split(",");
        	  var signalStrengthLTECQI = "#{sessionScope['VCsignalStrengthLTECQI6']}";  
        	  signalStrengthLTECQI = signalStrengthLTECQI.split(",");
        	  var deviceInfoCallDropList = "#{sessionScope['VCdeviceInfoCallDropList6']}";  
        	  deviceInfoCallDropList = deviceInfoCallDropList.split(",");
        	  //mapvalue="voiceConnectivityFourthMap";
        	  var map_options10 = {
        	  	center : new google.maps.LatLng(lattitudes[6] ,longitudes[6]),
        	  	zoom : 12,
        	  	mapTypeId : google.maps.MapTypeId.ROADMAP
        	  };

        	  var google_map10 = new google.maps.Map(document.getElementById("voiceConnectivitySeventhMap"), map_options10);

        	  var info_window10 = new google.maps.InfoWindow({
        	  	content : 'loading'
        	  });
          }else if(k==7){
        	  var lattitudes = "#{sessionScope['VClattitudes7']}";  
        	  lattitudes = lattitudes.split(",");
        	  var longitudes = "#{sessionScope['VClongitudes7']}";  
        	  longitudes = longitudes.split(",");
        	  var testName = "#{sessionScope['VCtestName7']}"; 
        	  testName = testName.split(",");
        	  var signalStrength = "#{sessionScope['VCsignalStrength7']}";  
        	  signalStrength = signalStrength.split(",");
        	  var signalStrengthLTT = "#{sessionScope['VCsignalStrengthLTT7']}";  
        	  signalStrengthLTT = signalStrengthLTT.split(",");
        	  var signalStrengthRating = "#{sessionScope['VCsignalStrengthRating7']}";  
        	  signalStrengthRating = signalStrengthRating.split(",");
        	  var networkType = "#{sessionScope['VCnetworkType7']}";  
        	  networkType = networkType.split(",");
        	  var networkData = "#{sessionScope['VCnetworkData7']}";  
        	  networkData = networkData.split(",");
        	  var networkRoaming = "#{sessionScope['VCnetworkRoaming7']}";  
        	  networkRoaming = networkRoaming.split(",");
        	  var signalStrengthSnr = "#{sessionScope['VCsignalStrengthSnr7']}";  
        	  signalStrengthSnr = signalStrengthSnr.split(",");
        	  var networkMnc = "#{sessionScope['VCnetworkMnc7']}";  
        	  networkMnc = networkMnc.split(",");
        	  var networkMcc = "#{sessionScope['VCnetworkMcc7']}";  
        	  networkMcc = networkMcc.split(",");
        	  var cellLocationLac = "#{sessionScope['VCcellLocationLac7']}";  
        	  cellLocationLac = cellLocationLac.split(",");
        	  var cellLocationCid = "#{sessionScope['VCcellLocationCid7']}";  
        	  cellLocationCid = cellLocationCid.split(",");
        	  var devicePhoneType = "#{sessionScope['VCdevicePhoneType7']}";  
        	  devicePhoneType = devicePhoneType.split(",");
        	  var timeStampForEachSample = "#{sessionScope['VCtimeStampForEachSample7']}";  
        	  timeStampForEachSample = timeStampForEachSample.split(",");
        	  var timeStampForSample = "#{sessionScope['VCtimeStampForSample7']}";  
            	  timeStampForSample = timeStampForSample.split(",");
        	  var neighbourMainInfo ="#{sessionScope['VCneighbourInfo7']}";
        	  neighbourMainInfo = neighbourMainInfo.split("|||||");
        	  var signalStrengthEVDOECIO = "#{sessionScope['VCsignalStrengthEVDOECIO7']}";  
        	  signalStrengthEVDOECIO = signalStrengthEVDOECIO.split(",");
        	  var signalStrengthCDMACIO = "#{sessionScope['VCsignalStrengthCDMACIO7']}";  
        	  signalStrengthCDMACIO7 = signalStrengthCDMACIO.split(",");
        	  var signalStrengthLTERSRP = "#{sessionScope['VCsignalStrengthLTERSRP7']}";  
        	  signalStrengthLTERSRP7 = signalStrengthLTERSRP.split(",");
        	  var signalStrengthLTERSRQ = "#{sessionScope['VCsignalStrengthLTERSRQ7']}";  
        	  signalStrengthLTERSRQ = signalStrengthLTERSRQ.split(",");
        	  var signalStrengthLTERSSNR = "#{sessionScope['VCsignalStrengthLTERSSNR7']}";  
        	  signalStrengthLTERSSNR = signalStrengthLTERSSNR.split(",");
        	  var signalStrengthLTECQI = "#{sessionScope['VCsignalStrengthLTECQI7']}";  
        	  signalStrengthLTECQI = signalStrengthLTECQI.split(",");
        	  var deviceInfoCallDropList = "#{sessionScope['VCdeviceInfoCallDropList7']}";  
        	  deviceInfoCallDropList = deviceInfoCallDropList.split(",");
        	  //mapvalue="voiceConnectivityFourthMap";
        	  var map_options11 = {
        	  	center : new google.maps.LatLng(lattitudes[7] ,longitudes[7]),
        	  	zoom : 12,
        	  	mapTypeId : google.maps.MapTypeId.ROADMAP
        	  };

        	  var google_map11 = new google.maps.Map(document.getElementById("voiceConnectivityEigthMap"), map_options11);

        	  var info_window11 = new google.maps.InfoWindow({
        	  	content : 'loading'
        	  });
          }

          
          var currSourceCellId="";
          var prevNetworkType="";
          var currNetworkType="";
          var prevSourceCellId="";
      	for (var i = 0;i<signalStrength.length;i++){
			value = signalStrength[i];
			neighbourInfo=neighbourMainInfo[i];
			addr="SignalStrength:"+signalStrength[i];
			lat = lattitudes[i];
			lng = longitudes[i];
			topLevelData = "TestName:"+testName[i];
			networkTypeList="<b>Network Type:</b>"+networkType[i];
			currNetworkType=networkType[i].trim();
			currSourceCellId=cellLocationCid[i];
			if (typeof(neighbourInfo) != "undefined"){
				var arra = neighbourInfo.split("|||");
    			var str=null;
    			var test=null;
    			for(var z=0;z<arra.length;z++){
        			if(z == 0){
        				str="<table align='left'><tr><td >"+arra[z]+"</td></tr>";
        			}else if(z == (arra.length-1)){
        				str=str+"<tr><td >"+arra[z]+"</td></tr></table>";
        			}else{
        				str=str+""+"<tr><td >"+arra[z]+"</td></tr>";
        			}
    			}
			}
			if(networkType[i].match("EVDO")){
				signalStrengthEVDOECIOList="<b>EVDO-ECIO:</b>"+signalStrengthEVDOECIO[i];
				signalStrengthSnrList="<b>EVDO-SNR:</b>"+signalStrengthSnr[i];
				signalStrengthCDMACIOList="";
				signalStrengthLTERSRP="";
				signalStrengthLTERSRQ="";
				signalStrengthLTERSSNR="";
				signalStrengthLTECQI="";
    			
			}else if (networkType[i].match("CDMA")){
				signalStrengthCDMACIOList="<b>CDMA-ECIO:</b>"+signalStrengthCDMACIO[i];
				signalStrengthSnrList="";
				signalStrengthEVDOECIOList="";
				signalStrengthLTERSRP="";
				signalStrengthLTERSRQ="";
				signalStrengthLTERSSNR="";
				signalStrengthLTECQI="";
			}else if (networkType[i].match("LTE")){
				signalStrengthCDMACIOList="";
				signalStrengthSnrList="";
				signalStrengthEVDOECIOList="";
				signalStrengthLTERSRPList="<b>LTERSRP:</b>"+signalStrengthLTERSRP[i];
				signalStrengthLTERSRQList="<b>LTERSRQ:</b>"+signalStrengthLTERSRQ[i];
				signalStrengthLTERSSNRList="<b>LTERSSNR:</b>"+signalStrengthLTERSSNR[i];
				signalStrengthLTECQIList="<b>LTECQI:</b>"+signalStrengthLTECQI[i];	
			}else{
				signalStrengthEVDOECIOList="";
    			signalStrengthCDMACIOList="";
    			signalStrengthSnrList="";
    			signalStrengthLTERSRPList="";
				signalStrengthLTERSRQList="";
				signalStrengthLTERSSNRList="";
				signalStrengthLTECQIList="";
			}
			networkType[i]=networkType[i].trim();
			var callDrop =false;
			
			 if(deviceInfoCallDropList != null && deviceInfoCallDropList != ""){
				 for( j=0;j<deviceInfoCallDropList.length;j++ ){ 
					 if(timeStampForSample[i].trim() == deviceInfoCallDropList[j].trim()){
            			  callDrop = true;
                             if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
                                      && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){                                  	 
                            	 if(networkType[i].toString() == "Unknown"
                           	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
                               	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
									  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
                            		  image = '../../'+"#{request.contextPath}"+'/resources/images/dropCallmarkerD.png';
                	    				 }else{
                	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/dropCallmarkerD.png';
                	    				 }
                              }else{
                                  if(prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString() ){
                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/dropCallmarkerD.png';
                                  }else if(prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString() ){
                                	  if(networkType[i].toString() == "Unknown"
                                	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
                                    	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
										  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/dropCallmarkerD.png';
	                  	    				 }else{
	                  	    				  image = '../../'+"#{request.contextPath}"+'/resources/images/dropCallmarkerD.png';
	                  	    				 }
                                   }else{
                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/dropCallmarkerD.png';
                              }	     
                            } 
                		  j=j+1; 
            		  }
            	 }
			 }
	    			 
                    if(!callDrop){
                  		if(networkType[i].toString()== "LTE (4G)" || networkType[i].toString()== " LTE (4G)"){
    	    				

          	    			if((signalStrengthLTT[i] >= lteupperRangeForPoor*-1)){
	    					if(!(prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())
	    	    					  && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
	    						if(networkType[i].toString() == "Unknown"){
	    							image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
                              	 }else{
                              		image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
                              	 }
                              }else { 
                                    if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_BAD2.png';
                                     }else{
                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
                               }
                           }
		    			}else 	
		    				//if(signalStrengthLTT[i] > 80 && signalStrengthLTT[i] <= 102 ){
		    				if((signalStrengthLTT[i] > lteupperRangeForAverage*-1 && signalStrengthLTT[i] <= ltelowerRangeForAverage*-1) ){
		    					 if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
      	      							 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
      								if(networkType[i].toString() == "Unknown"){
      									image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
			                              	 }else{
			                              		image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
			                              	 }
                                      }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()){
                                    	  image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_AVG2.png';
	                                  }else{
	                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
	                                }		          		    					           
  						   //}else if(signalStrengthLTT[i] >=50 && signalStrengthLTT[i] <= 80 ){
  						    }else if((signalStrengthLTT[i] <= ltelowerRangeForGood*-1 )){
  							 if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
  	      							 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
  								if(networkType[i].toString() == "Unknown"){
  									image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
		                              	 }else{
		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
		                              	 }
                                  }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()){
                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_GOOD2.png';
                                  }else{
                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
                                }	   
  							//}else if(signalStrengthLTT[i] < 50 ){
  							}

      	    			}

      		    			 
      		    				else if(networkType[i].toString().trim()== "UMTS (3G)"||networkType[i].toString().trim()== "HSDPA (3G - Transitional)"||currNetworkType.trim()== "HSPA (3G - Transitional)" ){

        	    					//if(signalStrengthLTT[i] >= 103){
                  	    			if(signalStrengthLTT[i] >= upperRangeForPoor*-1){
        	    					if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())
        	    	    					  && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
        	    						image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
                                      }else { 
                                            if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                            	image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_BAD2.png';
    	                                     }else if(prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString() ){
    	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
    	                                     }else{
    	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
                                       }
                                   }
        		    			}else 	
        		    				//if(signalStrengthLTT[i] > 80 && signalStrengthLTT[i] <= 102 ){
        		    				if(signalStrengthLTT[i] > upperRangeForAverage*-1 && signalStrengthLTT[i] <= lowerRangeForAverage*-1 ){
          		    					if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString()) 
          	      		    					 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
          		    						image = '../../'+"#{request.contextPath}"+'/resources/images/3G-AVG2.png';
                                          }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                        	  image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_AVG2.png';
    	                                     }else{
    	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/3G-AVG2.png';
    	                                    }	          		    					           
          						   //}else if(signalStrengthLTT[i] >=50 && signalStrengthLTT[i] <= 80 ){
          						    }else if(signalStrengthLTT[i] >=upperRangeForGood*-1 && signalStrengthLTT[i] <= lowerRangeForGood*-1 ){
          							 if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
          	      							 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
          								if(networkType[i].toString() == "Unknown"){
          									image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
    			                              	 }else{
    			                              		image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
    			                              	 }
                                          }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()){
                                        	  image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_GOOD2.png';
    	                                  }else{
    	                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
    	                                }	   
          							//}else if(signalStrengthLTT[i] < 50 ){
          							}else if(signalStrengthLTT[i] > lowerRangeForGood*-1 ){
             							 if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
              	      							 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
             								if(networkType[i].toString() == "Unknown"){
             									image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
        		                              	 }else{
        		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
        		                              	 }
                                              }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()){
                                            	  image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_GOOD2.png';
        	                                  } else{
        	                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
        	                                }	   
              							}
        	    				}
      		    				else if(networkType[i].trim() == "EDGE (2.75G)" ){
        	    					if(signalStrengthLTT[i] >= lowerRangeForPoor*-1){
        	    						image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
        	    					}
        	    					else 	if(signalStrengthRating[i] > 0){
    	    		    				//if(signalStrengthLTT[i] > 80 && signalStrengthLTT[i] <= 102 ){
    	    		    				if(signalStrengthLTT[i] > upperRangeForAverage*-1 && signalStrengthLTT[i] <= lowerRangeForAverage*-1 ){
    	    		    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
    	    		    				}
        		    				}
        	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';



        	    					//if(signalStrengthLTT[i] >= 103){
                  	    			if(signalStrengthLTT[i] >= lowerRangeForPoor*-1){
        	    					if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())
        	    	    					  && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
        	    						if(networkType[i].toString() == "Unknown"){
        	    							image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
    	                              	 }else{
    	                              		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
    	                              	 }
                                      }else { 
                                            if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                            	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_BAD2.png';
    	                                     }else if(prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString() ){
    	                                    	 if(networkType[i].toString() == "Unknown"){
    	                                    		 image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
    		                              	 }else{
    		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
    		                              	 }
    	                                     }else{
    	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
                                       }
                                   }
        		    			}else 	
        		    				//if(signalStrengthLTT[i] > 80 && signalStrengthLTT[i] <= 102 ){
        		    				if(signalStrengthLTT[i] >= upperRangeForAverage*-1 && signalStrengthLTT[i] <= lowerRangeForAverage*-1 ){
          		    					if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString()) 
          	      		    					 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
          		    						if(networkType[i].toString() == "Unknown"){
          		    							image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
    		                              	 }else{
    		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
    		                              	 }
                                          }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                        	  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_AVG2.png';
    	                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
    	                                    	 if(networkType[i].toString() == "Unknown"){
    	                                    		 image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
    		                              	 }else{
    		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
    		                              	 }
    	                                     }else{
    	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
    	                                    }	          		    					           
          						   //}else if(signalStrengthLTT[i] >=50 && signalStrengthLTT[i] <= 80 ){
          						    }else if(signalStrengthLTT[i] >=upperRangeForGood*-1 && signalStrengthLTT[i] <= lowerRangeForGood*-1 ){
          							 if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
          	      							 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
          								if(networkType[i].toString() == "Unknown"){
          									image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
    			                              	 }else{
    			                              		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
    			                              	 }
                                          }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()){
                                        	  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_GOOD2.png';
    	                                  }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
    	                                	  if(networkType[i].toString() == "Unknown"){
    	                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
    		                              	 }else{
    		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
    		                              	 }
    	                                  }else{
    	                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
    	                                }	   
          							//}else if(signalStrengthLTT[i] < 50 ){
          							}else if(signalStrengthLTT[i] < upperRangeForGood*-1 ){
             							 if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
              	      							 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
             								if(networkType[i].toString() == "Unknown"){
             									image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
        		                              	 }else{
        		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
        		                              	 }
                                              }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()){
                                            	  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_GOOD2.png';
        	                                  }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){	 
        	                                	  if(networkType[i].toString() == "Unknown"){
        	                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
        		                              	 }else{
        		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
        		                              	 }
        	                                  }else{
        	                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
        	                                }	   
              							}
        	    				}
      		    				else if(networkType[i].trim() == "wifi" ){
        	    					if(signalStrengthLTT[i] >= lowerRangeForPoor*-1){
        	    						image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
        	    					}
        	    					else 	if(signalStrengthRating[i] > 0){
    	    		    				//if(signalStrengthLTT[i] > 80 && signalStrengthLTT[i] <= 102 ){
    	    		    				if(signalStrengthLTT[i] > upperRangeForAverage*-1 && signalStrengthLTT[i] <= lowerRangeForAverage*-1 ){
    	    		    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
    	    		    				}
        		    				}
        	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';



        	    					//if(signalStrengthLTT[i] >= 103){
                  	    			if(signalStrengthLTT[i] >= lowerRangeForPoor*-1){
        	    					if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())
        	    	    					  && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
        	    						if(networkType[i].toString() == "Unknown"){
        	    							image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
    	                              	 }else{
    	                              		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
    	                              	 }
                                      }else { 
                                            if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                            	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_BAD2.png';
    	                                     }else if(prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString() ){
    	                                    	 if(networkType[i].toString() == "Unknown"){
    	                                    		 image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
    		                              	 }else{
    		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
    		                              	 }
    	                                     }else{
    	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
                                       }
                                   }
        		    			}else 	
        		    				//if(signalStrengthLTT[i] > 80 && signalStrengthLTT[i] <= 102 ){
        		    				if(signalStrengthLTT[i] >= upperRangeForAverage*-1 && signalStrengthLTT[i] <= lowerRangeForAverage*-1 ){
          		    					if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString()) 
          	      		    					 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
          		    						if(networkType[i].toString() == "Unknown"){
          		    							image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
    		                              	 }else{
    		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
    		                              	 }
                                          }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                        	  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_AVG2.png';
    	                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
    	                                    	 if(networkType[i].toString() == "Unknown"){
    	                                    		 image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
    		                              	 }else{
    		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
    		                              	 }
    	                                     }else{
    	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
    	                                    }	          		    					           
          						   //}else if(signalStrengthLTT[i] >=50 && signalStrengthLTT[i] <= 80 ){
          						    }else if(signalStrengthLTT[i] >=upperRangeForGood*-1 && signalStrengthLTT[i] <= lowerRangeForGood*-1 ){
          							 if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
          	      							 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
          								if(networkType[i].toString() == "Unknown"){
          									image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
    			                              	 }else{
    			                              		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
    			                              	 }
                                          }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()){
                                        	  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_GOOD2.png';
    	                                  }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
    	                                	  if(networkType[i].toString() == "Unknown"){
    	                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
    		                              	 }else{
    		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
    		                              	 }
    	                                  }else{
    	                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
    	                                }	   
          							//}else if(signalStrengthLTT[i] < 50 ){
          							}else if(signalStrengthLTT[i] < upperRangeForGood*-1 ){
             							 if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
              	      							 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
             								if(networkType[i].toString() == "Unknown"){
             									image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
        		                              	 }else{
        		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
        		                              	 }
                                              }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()){
                                            	  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_GOOD2.png';
        	                                  }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){	 
        	                                	  if(networkType[i].toString() == "Unknown"){
        	                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
        		                              	 }else{
        		                              		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
        		                              	 }
        	                                  }else{
        	                                	  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
        	                                }	   
              							}
        	    				}
                    }
       
					   
     	    prevSourceCellId= cellLocationCid[i];
     	    prevNetworkType= networkType[i].trim();
     	     
			networkDataList="Network Data :"+networkData[i];
			networkRoamingList="Network Roaming :"+networkRoaming[i];
			type =Number(signalStrength[i]);
			htmlStr = "<b>SignalStrength:</b>"+signalStrength[i];
			networkMncList="<b>MNC:</b>"+networkMnc[i];
			networkMccList="<b>MCC:</b>"+networkMcc[i];
			
			cellLocationLacList="<b>Source LAC:</b>"+cellLocationLac[i];
			cellLocationCidList="<b>Source Cell ID:</b>"+cellLocationCid[i];
			devicePhoneTypeList="Phone Type:"+devicePhoneType[i];
            timeStampForEachSampleList=timeStampForEachSample[i];

            if(k==0){
            	var d0 = new google.maps.Marker({
    				map : google_map4,
    				animation : google.maps.Animation.DROP,
    				title : addr,
    				alt:addr,
    				position : new google.maps.LatLng(lat,lng),
    				icon : image,
    				html : htmlStr,
    				info1 : htmlStr,
    				info2 : networkTypeList,
    				info4 : networkMncList,
    				info5 : networkMccList,
    				info6 : signalStrengthSnrList,
    				info7 : cellLocationCidList,
    				info8 : cellLocationLacList,
    				info9 : devicePhoneTypeList,
    				info10: timeStampForEachSampleList,
    				info11: str,
    				info12: signalStrengthEVDOECIOList,
    				info13: signalStrengthCDMACIOList,
    				info14: signalStrengthLTERSRPList,
    				info15: signalStrengthLTERSRQList,
    				info16: signalStrengthLTERSSNRList,
    				info17: signalStrengthLTECQIList,
    				topLevel : topLevelData
	
    			});
    			htmlStr = "";
    			google.maps.event.addListener(d0, 'click', function() {
    				info_window4.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
    				+'<tr><td colspan="2">'+ this.info7+'</td>'+'<td>'+ this.info8+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info12+'</td>'+'<td>'+ this.info13+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td>'+ this.info15+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td>'+ this.info17+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>'
    				+'<tr><td colspan="2">&nbsp;&nbsp;&nbsp;</td><td></td></tr>'
    				+'<tr><td colspan="2">'+ this.info10+'</td></tr></table>'
    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
    				+'<br>'
    				+ this.info11);
    				info_window4.open(google_map4, this);
    			});


    		var topLevelData = '';
    		var htmlStr = '';

            }else if(k==1){
              	var d1 = new google.maps.Marker({
    				map : google_map5,
    				animation : google.maps.Animation.DROP,
    				title : addr,
    				alt:addr,
    				position : new google.maps.LatLng(lat,lng),
    				icon : image,
    				html : htmlStr,
    				info1 : htmlStr,
    				info2 : networkTypeList,
    				info4 : networkMncList,
    				info5 : networkMccList,
    				info6 : signalStrengthSnrList,
    				info7 : cellLocationCidList,
    				info8 : cellLocationLacList,
    				info9 : devicePhoneTypeList,
    				info10: timeStampForEachSampleList,
    				info11: str,
    				info12: signalStrengthEVDOECIOList,
    				info13: signalStrengthCDMACIOList,
    				info14: signalStrengthLTERSRPList,
    				info15: signalStrengthLTERSRQList,
    				info16: signalStrengthLTERSSNRList,
    				info17: signalStrengthLTECQIList,
    				topLevel : topLevelData
	
    			});
    			htmlStr = "";
    			google.maps.event.addListener(d1, 'click', function() {
    				info_window5.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
    				+'<tr><td colspan="2">'+ this.info7+'</td>'+'<td>'+ this.info8+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info12+'</td>'+'<td>'+ this.info13+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td>'+ this.info15+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td>'+ this.info17+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>'
    				+'<tr><td colspan="2">&nbsp;&nbsp;&nbsp;</td><td></td></tr>'
    				+'<tr><td colspan="2">'+ this.info10+'</td></tr></table>'
    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
    				+'<br>'
    				+ this.info11);
    				info_window5.open(google_map5, this);
    			});
    		var topLevelData = '';
    		var htmlStr = '';
            }else if(k==2){
               	var d2 = new google.maps.Marker({
    				map : google_map6,
    				animation : google.maps.Animation.DROP,
    				title : addr,
    				alt:addr,
    				position : new google.maps.LatLng(lat,lng),
    				icon : image,
    				html : htmlStr,
    				info1 : htmlStr,
    				info2 : networkTypeList,
    				info4 : networkMncList,
    				info5 : networkMccList,
    				info6 : signalStrengthSnrList,
    				info7 : cellLocationCidList,
    				info8 : cellLocationLacList,
    				info9 : devicePhoneTypeList,
    				info10: timeStampForEachSampleList,
    				info11: str,
    				info12: signalStrengthEVDOECIOList,
    				info13: signalStrengthCDMACIOList,
    				info14: signalStrengthLTERSRPList,
    				info15: signalStrengthLTERSRQList,
    				info16: signalStrengthLTERSSNRList,
    				info17: signalStrengthLTECQIList,
    				topLevel : topLevelData
    			});
    			htmlStr = "";
    			google.maps.event.addListener(d2, 'click', function() {
    				info_window6.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
    				+'<tr><td colspan="2">'+ this.info7+'</td>'+'<td>'+ this.info8+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info12+'</td>'+'<td>'+ this.info13+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td>'+ this.info15+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td>'+ this.info17+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>'
    				+'<tr><td colspan="2">&nbsp;&nbsp;&nbsp;</td><td></td></tr>'
    				+'<tr><td colspan="2">'+ this.info10+'</td></tr></table>'
    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
    				+'<br>'
    				+ this.info11);
    				info_window6.open(google_map6, this);
    			});


    		var topLevelData = '';
    		var htmlStr = '';
            }else if(k==3){
               	var d3 = new google.maps.Marker({
    				map : google_map7,
    				animation : google.maps.Animation.DROP,
    				title : addr,
    				alt:addr,
    				position : new google.maps.LatLng(lat,lng),
    				icon : image,
    				html : htmlStr,
    				info1 : htmlStr,
    				info2 : networkTypeList,
    				info4 : networkMncList,
    				info5 : networkMccList,
    				info6 : signalStrengthSnrList,
    				info7 : cellLocationCidList,
    				info8 : cellLocationLacList,
    				info9 : devicePhoneTypeList,
    				info10: timeStampForEachSampleList,
    				info11: str,
    				info12: signalStrengthEVDOECIOList,
    				info13: signalStrengthCDMACIOList,
    				info14: signalStrengthLTERSRPList,
    				info15: signalStrengthLTERSRQList,
    				info16: signalStrengthLTERSSNRList,
    				info17: signalStrengthLTECQIList,
    				topLevel : topLevelData
	
    			});
    			htmlStr = "";
    			google.maps.event.addListener(d3, 'click', function() {
    				info_window7.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
    				+'<tr><td colspan="2">'+ this.info7+'</td>'+'<td>'+ this.info8+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info12+'</td>'+'<td>'+ this.info13+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td>'+ this.info15+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td>'+ this.info17+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>'
    				+'<tr><td colspan="2">&nbsp;&nbsp;&nbsp;</td><td></td></tr>'
    				+'<tr><td colspan="2">'+ this.info10+'</td></tr></table>'
    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
    				+'<br>'
    				+ this.info11);
    				info_window7.open(google_map7, this);
    			});


    		var topLevelData = '';
    		var htmlStr = '';
            }else if(k==4){
               	var d4 = new google.maps.Marker({
    				map : google_map8,
    				animation : google.maps.Animation.DROP,
    				title : addr,
    				alt:addr,
    				position : new google.maps.LatLng(lat,lng),
    				icon : image,
    				html : htmlStr,
    				info1 : htmlStr,
    				info2 : networkTypeList,
    				info4 : networkMncList,
    				info5 : networkMccList,
    				info6 : signalStrengthSnrList,
    				info7 : cellLocationCidList,
    				info8 : cellLocationLacList,
    				info9 : devicePhoneTypeList,
    				info10: timeStampForEachSampleList,
    				info11: str,
    				info12: signalStrengthEVDOECIOList,
    				info13: signalStrengthCDMACIOList,
    				info14: signalStrengthLTERSRPList,
    				info15: signalStrengthLTERSRQList,
    				info16: signalStrengthLTERSSNRList,
    				info17: signalStrengthLTECQIList,
    				topLevel : topLevelData
	
    			});
    			htmlStr = "";
    			google.maps.event.addListener(d4, 'click', function() {
    				info_window8.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
    				+'<tr><td colspan="2">'+ this.info7+'</td>'+'<td>'+ this.info8+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info12+'</td>'+'<td>'+ this.info13+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td>'+ this.info15+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td>'+ this.info17+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>'
    				+'<tr><td colspan="2">&nbsp;&nbsp;&nbsp;</td><td></td></tr>'
    				+'<tr><td colspan="2">'+ this.info10+'</td></tr></table>'
    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
    				+'<br>'
    				+ this.info11);
    				info_window8.open(google_map8, this);
    			});


    		var topLevelData = '';
    		var htmlStr = '';
            } else if(k==5){
               	var d5 = new google.maps.Marker({
    				map : google_map9,
    				animation : google.maps.Animation.DROP,
    				title : addr,
    				alt:addr,
    				position : new google.maps.LatLng(lat,lng),
    				icon : image,
    				html : htmlStr,
    				info1 : htmlStr,
    				info2 : networkTypeList,
    				info4 : networkMncList,
    				info5 : networkMccList,
    				info6 : signalStrengthSnrList,
    				info7 : cellLocationCidList,
    				info8 : cellLocationLacList,
    				info9 : devicePhoneTypeList,
    				info10: timeStampForEachSampleList,
    				info11: str,
    				info12: signalStrengthEVDOECIOList,
    				info13: signalStrengthCDMACIOList,
    				info14: signalStrengthLTERSRPList,
    				info15: signalStrengthLTERSRQList,
    				info16: signalStrengthLTERSSNRList,
    				info17: signalStrengthLTECQIList,
    				topLevel : topLevelData
	
    			});
    			htmlStr = "";
    			google.maps.event.addListener(d5, 'click', function() {
    				info_window9.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
    				+'<tr><td colspan="2">'+ this.info7+'</td>'+'<td>'+ this.info8+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info12+'</td>'+'<td>'+ this.info13+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td>'+ this.info15+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td>'+ this.info17+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>'
    				+'<tr><td colspan="2">&nbsp;&nbsp;&nbsp;</td><td></td></tr>'
    				+'<tr><td colspan="2">'+ this.info10+'</td></tr></table>'
    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
    				+'<br>'
    				+ this.info11);
    				info_window9.open(google_map9, this);
    			});


    		var topLevelData = '';
    		var htmlStr = '';
            }else if(k==6){
               	var d6 = new google.maps.Marker({
    				map : google_map10,
    				animation : google.maps.Animation.DROP,
    				title : addr,
    				alt:addr,
    				position : new google.maps.LatLng(lat,lng),
    				icon : image,
    				html : htmlStr,
    				info1 : htmlStr,
    				info2 : networkTypeList,
    				info4 : networkMncList,
    				info5 : networkMccList,
    				info6 : signalStrengthSnrList,
    				info7 : cellLocationCidList,
    				info8 : cellLocationLacList,
    				info9 : devicePhoneTypeList,
    				info10: timeStampForEachSampleList,
    				info11: str,
    				info12: signalStrengthEVDOECIOList,
    				info13: signalStrengthCDMACIOList,
    				info14: signalStrengthLTERSRPList,
    				info15: signalStrengthLTERSRQList,
    				info16: signalStrengthLTERSSNRList,
    				info17: signalStrengthLTECQIList,
    				topLevel : topLevelData
	
    			});
    			htmlStr = "";
    			google.maps.event.addListener(d6, 'click', function() {
    				info_window10.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
    				+'<tr><td colspan="2">'+ this.info7+'</td>'+'<td>'+ this.info8+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info12+'</td>'+'<td>'+ this.info13+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td>'+ this.info15+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td>'+ this.info17+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>'
    				+'<tr><td colspan="2">&nbsp;&nbsp;&nbsp;</td><td></td></tr>'
    				+'<tr><td colspan="2">'+ this.info10+'</td></tr></table>'
    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
    				+'<br>'
    				+ this.info11);
    				info_window10.open(google_map10, this);
    			});


    		var topLevelData = '';
    		var htmlStr = '';
            }else if(k==7){
               	var d7 = new google.maps.Marker({
    				map : google_map11,
    				animation : google.maps.Animation.DROP,
    				title : addr,
    				alt:addr,
    				position : new google.maps.LatLng(lat,lng),
    				icon : image,
    				html : htmlStr,
    				info1 : htmlStr,
    				info2 : networkTypeList,
    				info4 : networkMncList,
    				info5 : networkMccList,
    				info6 : signalStrengthSnrList,
    				info7 : cellLocationCidList,
    				info8 : cellLocationLacList,
    				info9 : devicePhoneTypeList,
    				info10: timeStampForEachSampleList,
    				info11: str,
    				info12: signalStrengthEVDOECIOList,
    				info13: signalStrengthCDMACIOList,
    				info14: signalStrengthLTERSRPList,
    				info15: signalStrengthLTERSRQList,
    				info16: signalStrengthLTERSSNRList,
    				info17: signalStrengthLTECQIList,
    				topLevel : topLevelData
	
    			});
    			htmlStr = "";
    			google.maps.event.addListener(d7, 'click', function() {
    				info_window11.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
    				+'<tr><td colspan="2">'+ this.info7+'</td>'+'<td>'+ this.info8+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info12+'</td>'+'<td>'+ this.info13+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info14+'</td>'+'<td>'+ this.info15+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info16+'</td>'+'<td>'+ this.info17+ '</td></tr>'
    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>'
    				+'<tr><td colspan="2">&nbsp;&nbsp;&nbsp;</td><td></td></tr>'
    				+'<tr><td colspan="2">'+ this.info10+'</td></tr></table>'
    				+'<table align="left"><tr><td><b>Neighbour Info</b></td><tr></table>'
    				+'<br>'
    				+ this.info11);
    				info_window11.open(google_map11, this);
    			});


    		var topLevelData = '';
    		var htmlStr = '';
            }    
     	 }  
		}
	   }   
	 }
     
               	 /* <![CDATA[ */     
        function intializeDataConnectivity(){
         var FinalFTPCount="#{sessionScope['FinalFTPCount']}";   
	     var jsonArrayLength="#{sessionScope['jsonArrayLength']}"; 
	    
	    if(jsonArrayLength>0){
		   for(var k=0;k<FinalFTPCount;k++){
			   if(k==0){
				   
                 	var lattitudes = "#{sessionScope['Datalattitudes0']}";  
	 					lattitudes = lattitudes.split(",");
	 					var longitudes = "#{sessionScope['Datalongitudes0']}";  
	 	              	longitudes = longitudes.split(",");
	 	              	var testName = "#{sessionScope['DatatestName0']}"; 
	 	              	testName = testName.split(",");
	 	              	var signalStrength = "#{sessionScope['DatasignalStrength0']}";  
	 	              	signalStrength = signalStrength.split(",");
	 	              	var networkType = "#{sessionScope['DatanetworkType0']}";  
	 	              	networkType = networkType.split(",");
	 	              	var timeStampForEachSample = "#{sessionScope['DatatimeStampForEachSample0']}";  
	 	              	timeStampForEachSample = timeStampForEachSample.split(",");
	 	              	var throughput = "#{sessionScope['Datathroughput0']}";  
	 	              	throughput = throughput.split(",");
	 	            	var signalStrengthRating = "#{sessionScope['DatasignalStrengthRating0']}";  
	 	              	signalStrengthRating = signalStrengthRating.split(",");
	 	            	var networkType = "#{sessionScope['DatanetworkType0']}";  
	 	              	networkType = networkType.split(",");
	 	            	var cellLocationCid = "#{sessionScope['DatacellLocationCID0']}";  
	 	            	cellLocationCid = cellLocationCid.split(",");
	 	            	var signalStrengthLTT = "#{sessionScope['DatasignalStrengthLTT0']}";  
	 	            	signalStrengthLTT = signalStrengthLTT.split(",");



	 	            	//DEVICE INFO POINTS INTIALIZATION
		            	
	           			var	deviceInfolattitudes = "#{sessionScope['deviceInfolattitudes0']}";  
	           			deviceInfolattitudes = deviceInfolattitudes.split(",");	
		             	
						var deviceInfolongitudes = "#{sessionScope['deviceInfolongitudes0']}";  
						deviceInfolongitudes = deviceInfolongitudes.split(",");
		             	
		              	var deviceInfotestName = "#{sessionScope['deviceInfotestName0']}"; 
		              	deviceInfotestName = deviceInfotestName.split(",");
		              	
		              	var deviceInfosignalStrength = "#{sessionScope['deviceInfosignalStrength0']}";  
		              	deviceInfosignalStrength = deviceInfosignalStrength.split(",");
		              	
		              	var deviceInfonetworkType = "#{sessionScope['deviceInfonetworkType0']}";  
		              	deviceInfonetworkType = deviceInfonetworkType.split(",");

		              	var deviceInfotimeStampForEachSample = "#{sessionScope['deviceInfotimeStampForEachSample0']}";  
		              	deviceInfotimeStampForEachSample = deviceInfotimeStampForEachSample.split(",");
		            	
		              	var deviceInfothroughput = "#{sessionScope['deviceInfothroughput0']}";  
		              	deviceInfothroughput = deviceInfothroughput.split(",");
		            	
		            	var deviceInfosignalStrengthRating = "#{sessionScope['deviceInfosignalStrengthRating0']}";  
		            	deviceInfosignalStrengthRating = deviceInfosignalStrengthRating.split(",");

		            	var deviceInfonetworkType = "#{sessionScope['deviceInfonetworkType0']}";  
		            	deviceInfonetworkType = deviceInfonetworkType.split(",");

		            	var deviceInfocellLocationCid = "#{sessionScope['deviceInfocellLocationCID0']}";  
		            	deviceInfocellLocationCid = deviceInfocellLocationCid.split(",");

		            	var deviceInfosignalStrengthLTT = "#{sessionScope['deviceInfosignalStrengthLTT0']}";  
		            	deviceInfosignalStrengthLTT = deviceInfosignalStrengthLTT.split(",");
	 	          	    var map_options0 = {
	 		    			center : new google.maps.LatLng(lattitudes[0] ,longitudes[0]),
	 		    			zoom : 12,
	 		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	 		    		};
	 		    		var google_map0 = new google.maps.Map(document.getElementById("dataConnectivityFirstMap"), map_options0);

	 		    		var info_window0 = new google.maps.InfoWindow({
	 		    			content : 'loading'
	 		    		});
	 		    		
	 		    		
                 }else if(k==1){
                 	var lattitudes = "#{sessionScope['Datalattitudes1']}";  
	 					lattitudes = lattitudes.split(",");
	 					var longitudes = "#{sessionScope['Datalongitudes1']}";  
	 	              	longitudes = longitudes.split(",");
	 	              	var testName = "#{sessionScope['DatatestName1']}"; 
	 	              	testName = testName.split(",");
	 	              	var signalStrength = "#{sessionScope['DatasignalStrength1']}";  
	 	              	signalStrength = signalStrength.split(",");
	 	              	var networkType = "#{sessionScope['DatanetworkType1']}";  
	 	              	networkType = networkType.split(",");
	 	              	var timeStampForEachSample = "#{sessionScope['DatatimeStampForEachSample1']}";  
	 	              	timeStampForEachSample = timeStampForEachSample.split(",");
	 	              	var throughput = "#{sessionScope['Datathroughput1']}";  
	 	              	throughput = throughput.split(",");
	 	            	var signalStrengthRating = "#{sessionScope['DatasignalStrengthRating1']}";  
	 	              	signalStrengthRating = signalStrengthRating.split(",");
	 	            	var networkType = "#{sessionScope['DatanetworkType1']}";  
	 	              	networkType = networkType.split(",");
	 	            	var cellLocationCid = "#{sessionScope['DatacellLocationCID1']}";  
	 	            	cellLocationCid = cellLocationCid.split(",");
	 	            	var signalStrengthLTT = "#{sessionScope['DatasignalStrengthLTT1']}";  
	 	            	signalStrengthLTT = signalStrengthLTT.split(",");
	 	          	    var map_options1 = {
	 		    			center : new google.maps.LatLng(lattitudes[0] ,longitudes[0]),
	 		    			zoom : 12,
	 		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	 		    		};

	 		    		var google_map1 = new google.maps.Map(document.getElementById("dataConnectivitySecondMap"), map_options1);

	 		    		var info_window1 = new google.maps.InfoWindow({
	 		    			content : 'loading'
	 		    		});
                 }else if(k==2){
                 	var lattitudes = "#{sessionScope['Datalattitudes2']}";  
	 					lattitudes = lattitudes.split(",");
	 					var longitudes = "#{sessionScope['Datalongitudes2']}";  
	 	              	longitudes = longitudes.split(",");
	 	              	var testName = "#{sessionScope['DatatestName2']}"; 
	 	              	testName = testName.split(",");
	 	              	var signalStrength = "#{sessionScope['DatasignalStrength2']}";  
	 	              	signalStrength = signalStrength.split(",");
	 	              	var networkType = "#{sessionScope['DatanetworkType2']}";  
	 	              	networkType = networkType.split(",");
	 	              	var timeStampForEachSample = "#{sessionScope['DatatimeStampForEachSample2']}";  
	 	              	timeStampForEachSample = timeStampForEachSample.split(",");
	 	              	var throughput = "#{sessionScope['Datathroughput2']}";  
	 	              	throughput = throughput.split(",");
	 	            	var signalStrengthRating = "#{sessionScope['DatasignalStrengthRating2']}";  
	 	              	signalStrengthRating = signalStrengthRating.split(",");
	 	            	var networkType = "#{sessionScope['DatanetworkType2']}";  
	 	              	networkType = networkType.split(",");
	 	            	var cellLocationCid = "#{sessionScope['DatacellLocationCID2']}";  
	 	            	cellLocationCid = cellLocationCid.split(",");
	 	            	var signalStrengthLTT = "#{sessionScope['DatasignalStrengthLTT2']}";  
	 	            	signalStrengthLTT = signalStrengthLTT.split(",");
	 	          	    var map_options2 = {
	 		    			center : new google.maps.LatLng(lattitudes[0] ,longitudes[0]),
	 		    			zoom : 12,
	 		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	 		    		};

	 		    		var google_map2 = new google.maps.Map(document.getElementById("dataConnectivityThirdMap"), map_options2);

	 		    		var info_window2 = new google.maps.InfoWindow({
	 		    			content : 'loading'
	 		    		});
                 }else if(k==3){
                 	var lattitudes = "#{sessionScope['Datalattitudes3']}";  
	 					lattitudes = lattitudes.split(",");
	 					var longitudes = "#{sessionScope['Datalongitudes3']}";  
	 	              	longitudes = longitudes.split(",");
	 	              	var testName = "#{sessionScope['DatatestName3']}"; 
	 	              	testName = testName.split(",");
	 	              	var signalStrength = "#{sessionScope['DatasignalStrength3']}";  
	 	              	signalStrength = signalStrength.split(",");
	 	              	var networkType = "#{sessionScope['DatanetworkType3']}";  
	 	              	networkType = networkType.split(",");
	 	              	var timeStampForEachSample = "#{sessionScope['DatatimeStampForEachSample3']}";  
	 	              	timeStampForEachSample = timeStampForEachSample.split(",");
	 	              	var throughput = "#{sessionScope['Datathroughput3']}";  
	 	              	throughput = throughput.split(",");
	 	            	var signalStrengthRating = "#{sessionScope['DatasignalStrengthRating3']}";  
	 	              	signalStrengthRating = signalStrengthRating.split(",");
	 	            	var networkType = "#{sessionScope['DatanetworkType3']}";  
	 	              	networkType = networkType.split(",");
	 	            	var cellLocationCid = "#{sessionScope['DatacellLocationCID3']}";  
	 	            	cellLocationCid = cellLocationCid.split(",");
	 	            	var signalStrengthLTT = "#{sessionScope['DatasignalStrengthLTT3']}";  
	 	            	signalStrengthLTT = signalStrengthLTT.split(",");
	 	          	    var map_options3 = {
	 		    			center : new google.maps.LatLng(lattitudes[0] ,longitudes[0]),
	 		    			zoom : 12,
	 		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	 		    		};

	 		    		var google_map3 = new google.maps.Map(document.getElementById("dataConnectivityFourthMap"), map_options3);

	 		    		var info_window3 = new google.maps.InfoWindow({
	 		    			content : 'loading'
	 		    		});
                }else if(k==4){
                 	var lattitudes = "#{sessionScope['Datalattitudes4']}";  
 					lattitudes = lattitudes.split(",");
 					var longitudes = "#{sessionScope['Datalongitudes4']}";  
 	              	longitudes = longitudes.split(",");
 	              	var testName = "#{sessionScope['DatatestName4']}"; 
 	              	testName = testName.split(",");
 	              	var signalStrength = "#{sessionScope['DatasignalStrength4']}";  
 	              	signalStrength = signalStrength.split(",");
 	              	var networkType = "#{sessionScope['DatanetworkType4']}";  
 	              	networkType = networkType.split(",");
 	              	var timeStampForEachSample = "#{sessionScope['DatatimeStampForEachSample4']}";  
 	              	timeStampForEachSample = timeStampForEachSample.split(",");
 	              	var throughput = "#{sessionScope['Datathroughput4']}";  
 	              	throughput = throughput.split(",");
 	            	var signalStrengthRating = "#{sessionScope['DatasignalStrengthRating4']}";  
 	              	signalStrengthRating = signalStrengthRating.split(",");
 	            	var networkType = "#{sessionScope['DatanetworkType4']}";  
 	              	networkType = networkType.split(",");
 	            	var cellLocationCid = "#{sessionScope['DatacellLocationCID4']}";  
 	            	cellLocationCid = cellLocationCid.split(",");
 	            	var signalStrengthLTT = "#{sessionScope['DatasignalStrengthLTT4']}";  
 	            	signalStrengthLTT = signalStrengthLTT.split(",");
 	          	    var map_options4 = {
 		    			center : new google.maps.LatLng(lattitudes[0] ,longitudes[0]),
 		    			zoom : 12,
 		    			mapTypeId : google.maps.MapTypeId.ROADMAP
 		    		};

 		    		var google_map4 = new google.maps.Map(document.getElementById("dataConnectivityFifthmap"), map_options4);

 		    		var info_window4 = new google.maps.InfoWindow({
 		    			content : 'loading'
 		    		});
            }else if(k==5){
             	var lattitudes = "#{sessionScope['Datalattitudes5']}";  
					lattitudes = lattitudes.split(",");
					var longitudes = "#{sessionScope['Datalongitudes5']}";  
	              	longitudes = longitudes.split(",");
	              	var testName = "#{sessionScope['DatatestName5']}"; 
	              	testName = testName.split(",");
	              	var signalStrength = "#{sessionScope['DatasignalStrength5']}";  
	              	signalStrength = signalStrength.split(",");
	              	var networkType = "#{sessionScope['DatanetworkType5']}";  
	              	networkType = networkType.split(",");
	              	var timeStampForEachSample = "#{sessionScope['DatatimeStampForEachSample5']}";  
	              	timeStampForEachSample = timeStampForEachSample.split(",");
	              	var throughput = "#{sessionScope['Datathroughput5']}";  
	              	throughput = throughput.split(",");
	            	var signalStrengthRating = "#{sessionScope['DatasignalStrengthRating5']}";  
	              	signalStrengthRating = signalStrengthRating.split(",");
	            	var networkType = "#{sessionScope['DatanetworkType5']}";  
	              	networkType = networkType.split(",");
	            	var cellLocationCid = "#{sessionScope['DatacellLocationCID5']}";  
	            	cellLocationCid = cellLocationCid.split(",");
	            	var signalStrengthLTT = "#{sessionScope['DatasignalStrengthLTT5']}";  
	            	signalStrengthLTT = signalStrengthLTT.split(",");
	          	    var map_options5 = {
		    			center : new google.maps.LatLng(lattitudes[0] ,longitudes[0]),
		    			zoom : 12,
		    			mapTypeId : google.maps.MapTypeId.ROADMAP
		    		};

		    		var google_map5 = new google.maps.Map(document.getElementById("dataConnectivitySixthmap"), map_options5);

		    		var info_window5 = new google.maps.InfoWindow({
		    			content : 'loading'
		    		});
	        }else if(k==6){
	         	var lattitudes = "#{sessionScope['Datalattitudes6']}";  
					lattitudes = lattitudes.split(",");
					var longitudes = "#{sessionScope['Datalongitudes6']}";  
		           	longitudes = longitudes.split(",");
		           	var testName = "#{sessionScope['DatatestName6']}"; 
		           	testName = testName.split(",");
		           	var signalStrength = "#{sessionScope['DatasignalStrength6']}";  
		           	signalStrength = signalStrength.split(",");
		           	var networkType = "#{sessionScope['DatanetworkType6']}";  
		           	networkType = networkType.split(",");
		           	var timeStampForEachSample = "#{sessionScope['DatatimeStampForEachSample6']}";  
		           	timeStampForEachSample = timeStampForEachSample.split(",");
		           	var throughput = "#{sessionScope['Datathroughput6']}";  
		           	throughput = throughput.split(",");
		         	var signalStrengthRating = "#{sessionScope['DatasignalStrengthRating6']}";  
		           	signalStrengthRating = signalStrengthRating.split(",");
		         	var networkType = "#{sessionScope['DatanetworkType6']}";  
		           	networkType = networkType.split(",");
		         	var cellLocationCid = "#{sessionScope['DatacellLocationCID6']}";  
		         	cellLocationCid = cellLocationCid.split(",");
		         	var signalStrengthLTT = "#{sessionScope['DatasignalStrengthLTT6']}";  
		         	signalStrengthLTT = signalStrengthLTT.split(",");
		       	    var map_options6 = {
			    			center : new google.maps.LatLng(lattitudes[0] ,longitudes[0]),
			    			zoom : 12,
			    			mapTypeId : google.maps.MapTypeId.ROADMAP
			    		};
		
		    		var google_map6 = new google.maps.Map(document.getElementById("dataConnectivitySeventhmap"), map_options6);
	
		    		var info_window6 = new google.maps.InfoWindow({
		    			content : 'loading'
		    		});
	             }else if(k==7){
                 	var lattitudes = "#{sessionScope['Datalattitudes7']}";  
	 					lattitudes = lattitudes.split(",");
	 					var longitudes = "#{sessionScope['Datalongitudes7']}";  
	 	              	longitudes = longitudes.split(",");
	 	              	var testName = "#{sessionScope['DatatestName7']}"; 
	 	              	testName = testName.split(",");
	 	              	var signalStrength = "#{sessionScope['DatasignalStrength7']}";  
	 	              	signalStrength = signalStrength.split(",");
	 	              	var networkType = "#{sessionScope['DatanetworkType7']}";  
	 	              	networkType = networkType.split(",");
	 	              	var timeStampForEachSample = "#{sessionScope['DatatimeStampForEachSample7']}";  
	 	              	timeStampForEachSample = timeStampForEachSample.split(",");
	 	              	var throughput = "#{sessionScope['Datathroughput7']}";  
	 	              	throughput = throughput.split(",");
	 	            	var signalStrengthRating = "#{sessionScope['DatasignalStrengthRating7']}";  
	 	              	signalStrengthRating = signalStrengthRating.split(",");
	 	            	var networkType = "#{sessionScope['DatanetworkType7']}";  
	 	              	networkType = networkType.split(",");
	 	            	var cellLocationCid = "#{sessionScope['DatacellLocationCID7']}";  
	 	            	cellLocationCid = cellLocationCid.split(",");
	 	            	var signalStrengthLTT = "#{sessionScope['DatasignalStrengthLTT7']}";  
	 	            	signalStrengthLTT = signalStrengthLTT.split(",");
	 	          	    var map_options7 = {
	 		    			center : new google.maps.LatLng(lattitudes[0] ,longitudes[0]),
	 		    			zoom : 12,
	 		    			mapTypeId : google.maps.MapTypeId.ROADMAP
	 		    		};

	 		    		var google_map7 = new google.maps.Map(document.getElementById("dataConnectivityEigthmap"), map_options7);

	 		    		var info_window7 = new google.maps.InfoWindow({
	 		    			content : 'loading'
	 		    		});
                }
                 var currSourceCellId="";
                 var prevNetworkType="";
                 var currNetworkType="";
                 var prevSourceCellId="";
                 var numberOfPoints = 0;
                 for (var i = 0;i<deviceInfosignalStrength.length;i++){
 					value = deviceInfosignalStrength[i];
					addr="deviceInfosignalStrength:"+deviceInfosignalStrength[i];
	    			lat = deviceInfolattitudes[i];
	    			lng = deviceInfolongitudes[i];
	    			topLevelData = "TestName:"+deviceInfotestName[i];
	    			networkTypeList="<b>Network Type:</b>"+deviceInfonetworkType[i];
	    			type =Number(deviceInfosignalStrength[i]);
	    			htmlStr = "<b>signalStrengths:</b>-"+deviceInfosignalStrengthLTT[i]+"dbm";
	    			timeStampForEachSampleList="<b>Test Time:</b>"+deviceInfotimeStampForEachSample[i];	
	    			testNamelist="<b>TestName:</b>"+deviceInfotestName[i];
	    			var test_type = "#{reportBean.test_type}";
	    			if((test_type!="voip") && (test_type!="browser")) {
	    				if(throughput[i]==0){
	    					throughtputList="<b>Throughput:</b>NA";
	  	    			}else{
	  	    				throughtputList="<b>Throughput:</b>"+throughput[i];
	  	    			}
	    			}
	    			deviceInfonetworkType[i]=deviceInfonetworkType[i].trim();
	    			currNetworkType=deviceInfonetworkType[i];
	    			currSourceCellId=deviceInfocellLocationCid[i];
	    			
	    		
	    			if(deviceInfosignalStrengthRating[i] == "Empty"){
                		if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
                        		 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
                			if(deviceInfonetworkType[i].toString() == "Unknown"
                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
								  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
                				image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
                			}else{
                				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_both.png';
                			}
                        }else {
                          if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                      	 	 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
                          }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){                          	  	
                        	  if(deviceInfonetworkType[i].toString() == "Unknown"
                          	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
                              	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
									  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
                  				image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
                  			}else{
                  				image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_rect.png';
                  			}
                          }
                      	  else{
                      	  	image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
                      	  }
                        }	       		
	    			}else{
	    				if(deviceInfonetworkType[i].toString()== "LTE (4G)" || deviceInfonetworkType[i].toString()== " LTE (4G)" || deviceInfonetworkType[i].toString()== "LTE"){
      	    				//if(deviceInfosignalStrengthLTT[i] >= 113){
      	    					if(deviceInfosignalStrengthLTT[i] >= lteupperRangeForPoor*-1){
                                  if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
		                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
                                	  if(deviceInfonetworkType[i].toString() == "Unknown"){
                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
  	                  	    				 }else{
  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
  	                  	    				 }
                                    }else { 
                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                    	  image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_BAD2.png';
	                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
	                                   	if(deviceInfonetworkType[i].toString() == "Unknown"){
	                                   		image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
  	                  	    				 }else{
  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
  	                  	    				 }
	                                     }else{
	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/L-BAD2.png';
                                 }
                              }       
      		    			}else if(deviceInfosignalStrengthRating[i] > 0){
          		    			//if(deviceInfosignalStrengthLTT[i] >= 97 && deviceInfosignalStrengthLTT[i] <= 112 ){
          		    				if(deviceInfosignalStrengthLTT[i] >= lteupperRangeForAverage*-1 && deviceInfosignalStrengthLTT[i] <= ltelowerRangeForAverage*-1 ){
      		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
              		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
      		    						if(deviceInfonetworkType[i].toString() == "Unknown"){
      		    							image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
	                  	    				 }else{
	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
	                  	    				 }
                                      }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                      	image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_AVG2.png';
		                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		                                	if(deviceInfonetworkType[i].toString() == "Unknown"){
		                                		image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
	                  	    				 }else{
	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
	                  	    				 }
		                                }else{
		                                	image = '../../'+"#{request.contextPath}"+'/resources/images/L-AVG2.png';
	                                    }	          		    					           
      						 //  }else if(deviceInfosignalStrengthLTT[i] >= 88 && deviceInfosignalStrengthLTT[i] <= 96 ){
      						 }else if(deviceInfosignalStrengthLTT[i] < lteupperRangeForGood*-1 ){
      							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
      								if(deviceInfonetworkType[i].toString() == "Unknown"){
      									image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
	                  	    				 }else{
	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
	                  	    				 }
                                      }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                      	image = '../../'+"#{request.contextPath}"+'/resources/images/L-plus_GOOD2.png';
		                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		                                    	if(deviceInfonetworkType[i].toString() == "Unknown"){
		                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
  	                  	    				 }else{
  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
  	                  	    				 }
		                                     }else{
		                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/L-GOOD2.png';
	                                 }	   
      						}
      		    		  }
      	    			}
	    				else 
	    					if(deviceInfonetworkType[i].toString().trim()== "UMTS (3G)"||deviceInfonetworkType[i].toString().trim()== "HSDPA (3G - Transitional)"||currNetworkType.trim()== "HSPA (3G - Transitional)" ){
	      	    				//if(deviceInfosignalStrengthRating[i] >= 113){
	      	    				if(deviceInfosignalStrengthLTT[i] >= upperRangeForPoor*-1){
	                                  if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
	    	                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
	                                	  if(deviceInfonetworkType[i].toString() == "Unknown"
	                                	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                    	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
	    									  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
	    	                  	    				 }else{
	    	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
	    	                  	    				 }
	                                    }else { 
	                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
	                                    	  image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_BAD2.png';
	                                         }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
	                                       	if(deviceInfonetworkType[i].toString() == "Unknown"
	                                    	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                        	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
	    										  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	                                       		image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
	    	                  	    				 }else{
	    	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
	    	                  	    				 }
	                                         }else{
	                                        	 image = '../../'+"#{request.contextPath}"+'/resources/images/3G-BAD2.png';
	                                 }
	                              }       
	      		    			}else 
	          		    			//if(deviceInfosignalStrengthRating[i] >= 97 && deviceInfosignalStrengthRating[i] <= 112 ){
	          		    			if(deviceInfosignalStrengthLTT[i] >= upperRangeForAverage*-1 && deviceInfosignalStrengthLTT[i] <= lowerRangeForAverage*-1){
	      		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
	              		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	      		    						if(deviceInfonetworkType[i].toString() == "Unknown"
	                                  	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                      	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
	    										  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	      		    							image = '../../'+"#{request.contextPath}"+'/resources/images/3G-AVG2.png';
	                    	    				 }else{
	                    	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-AVG2.png';
	                    	    				 }
	                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
	                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_AVG2.png';
	    	                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
	    	                                	if(deviceInfonetworkType[i].toString() == "Unknown"
	                                  	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                      	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
	    										  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	    	                                		image = '../../'+"#{request.contextPath}"+'/resources/images/3G-AVG2.png';
	                    	    				 }else{
	                    	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-AVG2.png';
	                    	    				 }
	    	                                }else{
	    	                                	image = '../../'+"#{request.contextPath}"+'/resources/images/3G-AVG2.png';
	                                        }	          		    					           
	      						   //}else if(deviceInfosignalStrengthRating[i] >= 88 && deviceInfosignalStrengthRating[i] <= 96 ){
	      						   }else if(deviceInfosignalStrengthLTT[i] >= upperRangeForGood*-1 && deviceInfosignalStrengthLTT[i] <= lowerRangeForGood*-1 ){
	      							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
	              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	      								if(deviceInfonetworkType[i].toString() == "Unknown"
	                                	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                    	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
	    									  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	      									image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
	                    	    				 }else{
	                    	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
	                    	    				 }
	                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
	                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_GOOD2.png';
	    	                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
	    	                                    	if(deviceInfonetworkType[i].toString() == "Unknown"
	                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
	    											  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	    	                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
	    	                  	    				 }else{
	    	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
	    	                  	    				 }
	    	                                     }else{
	    	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
	                                     }	   
	      						//}else if(deviceInfosignalStrengthRating[i] < 88 ){
	      						}else if(deviceInfosignalStrengthLTT[i] < upperRangeForGood*-1 ){
	      							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
	              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	      								if(deviceInfonetworkType[i].toString() == "Unknown"
	                                	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                    	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
	    									  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	      									image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
	                    	    				 }else{
	                    	    					image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
	                    	    				 }
	                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
	    	                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/3G-plus_GOOD2.png';
	    	                                     }else{
	    	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/3G-GOOD2.png';
	                                     }	   
	      						}
	      	    			}
 					else if(currNetworkType.trim() == "EDGE (2.75G)" ){
  	 	  					
  	  	 	  					
	     	    				//if(signalStrengthLTT[x] >= 113){
      	    					if(deviceInfosignalStrengthLTT[i] >= upperRangeForPoor*-1){
                                  if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
		                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
                                	  if(currNetworkType.toString() == "Unknown"){
                                		  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
  	                  	    				 }else{
  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
  	                  	    				 }
                                    }else { 
                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                    	  image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_BAD2.png';
	                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
	                                   	if(currNetworkType.toString() == "Unknown"){
	                                   		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
  	                  	    				 }else{
  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
  	                  	    				 }
	                                     }else{
	                                    	 image = '../../'+"#{request.contextPath}"+'/resources/images/2G-BAD2.png';
                                 }
                              }       
      		    			}else if(deviceInfosignalStrengthLTT[i] > 0){
          		    			//if(signalStrengthLTT[x] >= 97 && signalStrengthLTT[x] <= 112 ){
          		    				if(deviceInfosignalStrengthLTT[i] >= upperRangeForAverage*-1 && deviceInfosignalStrengthLTT[i] <= lowerRangeForAverage*-1 ){
      		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
              		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
      		    						if(currNetworkType.toString() == "Unknown"){
      		    							image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
	                  	    				 }else{
	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
	                  	    				 }
                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_AVG2.png';
		                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		                                	if(currNetworkType.toString() == "Unknown"){
		                                		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
	                  	    				 }else{
	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
	                  	    				 }
		                                }else{
		                                	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-AVG2.png';
	                                    }	          		    					           
      						 //  }else if(signalStrengthLTT[x] >= 88 && signalStrengthLTT[x] <= 96 ){
      						}else if(deviceInfosignalStrengthLTT[i] >= upperRangeForGood*-1 && deviceInfosignalStrengthLTT[i] <= lowerRangeForGood*-1 ){
      							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
      								if(currNetworkType.toString() == "Unknown"){
      									image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
	                  	    				 }else{
	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
	                  	    				 }
                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_GOOD2.png';
		                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		                                    	if(currNetworkType.toString() == "Unknown"){
		                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
  	                  	    				 }else{
  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
  	                  	    				 }
		                                     }else{
		                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
	                                 }	   
      						//}else if(signalStrengthLTT[x] < 88 ){
      						}else if(deviceInfosignalStrengthLTT[i] <= lowerRangeForGood *-1 ){
          						alert(deviceInfosignalStrengthLTT[i]);
      							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
      								if(currNetworkType.toString() == "Unknown"){
      									image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
	                  	    				 }else{
	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
	                  	    				 }
                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                        	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-plus_GOOD2.png';
		                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		                                    	if(currNetworkType.toString() == "Unknown"){
		                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
  	                  	    				 }else{
  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
  	                  	    				 }
		                                     }else{
		                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/2G-GOOD2.png';
	                                 }	   
      						}
      		    		  }
	  	  					   }
 					else if(currNetworkType.trim() == "wifi" ){
	 	  					
	 	  					
 	    				//if(signalStrengthLTT[x] >= 113){
	    					if(deviceInfosignalStrengthLTT[i] >= upperRangeForPoor*-1){
                          if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
                        	  if(currNetworkType.toString() == "Unknown"){
                        		  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
                	    				 }else{
                	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
                	    				 }
                            }else { 
                              if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                            	  image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_BAD2.png';
                                 }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
                               	if(currNetworkType.toString() == "Unknown"){
                               		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
                	    				 }else{
                	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
                	    				 }
                                 }else{
                                	 image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-BAD2.png';
                         }
                      }       
		    			}else if(deviceInfosignalStrengthLTT[i] > 0){
  		    			//if(signalStrengthLTT[x] >= 97 && signalStrengthLTT[x] <= 112 ){
  		    				if(deviceInfosignalStrengthLTT[i] >= upperRangeForAverage*-1 && deviceInfosignalStrengthLTT[i] <= lowerRangeForAverage*-1 ){
		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
      		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
		    						if(currNetworkType.toString() == "Unknown"){
		    							image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
              	    				 }else{
              	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
              	    				 }
                                }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_AVG2.png';
                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
                                	if(currNetworkType.toString() == "Unknown"){
                                		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
              	    				 }else{
              	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
              	    				 }
                                }else{
                                	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-AVG2.png';
                                }	          		    					           
						 //  }else if(signalStrengthLTT[x] >= 88 && signalStrengthLTT[x] <= 96 ){
						}else if(deviceInfosignalStrengthLTT[i] >= upperRangeForGood*-1 && deviceInfosignalStrengthLTT[i] <= lowerRangeForGood*-1 ){
							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
      							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
								if(currNetworkType.toString() == "Unknown"){
									image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
              	    				 }else{
              	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
              	    				 }
                                }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_GOOD2.png';
                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
                                    	if(currNetworkType.toString() == "Unknown"){
                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
                	    				 }else{
                	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
                	    				 }
                                     }else{
                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
                             }	   
						//}else if(signalStrengthLTT[x] < 88 ){
						}else if(deviceInfosignalStrengthLTT[i] <= lowerRangeForGood *-1 ){
  						alert(deviceInfosignalStrengthLTT[i]);
							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
      							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
								if(currNetworkType.toString() == "Unknown"){
									image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
              	    				 }else{
              	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
              	    				 }
                                }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
                                	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-plus_GOOD2.png';
                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
                                    	if(currNetworkType.toString() == "Unknown"){
                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
                	    				 }else{
                	    					image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
                	    				 }
                                     }else{
                                    	image = '../../'+"#{request.contextPath}"+'/resources/images/WIFI-GOOD2.png';
                             }	   
						}
		    		  }
	  					   }
      	    			
	    			}
	    			prevSourceCellId= deviceInfocellLocationCid[i];
	             	prevNetworkType= deviceInfonetworkType[i];
 	             	if(k==0){
 	             		var m0 = new google.maps.Marker({
     	    				map : google_map0,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m0, 'click', function() {
     	    				info_window0.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window0.open(google_map0, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==1){
 	             		var m1 = new google.maps.Marker({
     	    				map : google_map1,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m1, 'click', function() {
     	    				info_window1.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window1.open(google_map1, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==2){
 	             		var m2 = new google.maps.Marker({
     	    				map : google_map2,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m2, 'click', function() {
     	    				info_window2.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window2.open(google_map2, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==3){
 	             		var m3 = new google.maps.Marker({
     	    				map : google_map3,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m3, 'click', function() {
     	    				info_window3.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window3.open(google_map3, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==4){
 	             		var m4 = new google.maps.Marker({
     	    				map : google_map4,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m4, 'click', function() {
     	    				info_window4.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window4.open(google_map4, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==5){
 	             		var m5 = new google.maps.Marker({
     	    				map : google_map5,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m5, 'click', function() {
     	    				info_window5.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window5.open(google_map5, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==6){
 	             		var m6 = new google.maps.Marker({
     	    				map : google_map6,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m6, 'click', function() {
     	    				info_window6.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window6.open(google_map6, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==7){
 	             		var m7 = new google.maps.Marker({
     	    				map : google_map7,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m7, 'click', function() {
     	    				info_window7.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window7.open(google_map7, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}               
                 }


	         	 //THIS IS TO POPULATE DEVICE INFO POINTS
                 for (var i = 0;i<deviceInfosignalStrength.length;i++){
 					value = deviceInfosignalStrength[i];
 					addr="SignalStrength:"+deviceInfosignalStrength[i];
 					lat = deviceInfolattitudes[i];
 	    			lng = deviceInfolongitudes[i];
 	    			topLevelData = "TestName:"+deviceInfotestName[i];
 	    			networkTypeList="<b>Network Type:</b>"+deviceInfonetworkType[i];
 	    			type =Number(deviceInfosignalStrength[i]);
 	    			htmlStr = "<b>SignalStrengths:</b>"+deviceInfosignalStrength[i];
 	    			timeStampForEachSampleList="<b>Test Time:</b>"+deviceInfotimeStampForEachSample[i];	
 	    			testNamelist="<b>TestName:</b>"+deviceInfotestName[i];
 	    			var test_type = "#{reportBean.test_type}";

 	    				if(throughput[i]==0){
 	    					throughtputList="<b>Throughput:</b>NA ";
 	  	    			}else{
 	  	    				throughtputList="<b>Throughput:</b>"+throughput[i]+" bps";
 	  	    				image = '../../'+"#{request.contextPath}"+'/resources/images/star_blue.png';
 	  	    			}	
 	    			networkType[i]=networkType[i].trim();
 	    			currNetworkType=networkType[i];
 	    			currSourceCellId=cellLocationCid[i];
 	    			
 	    			
 	    		
 	    	
       	    	
 	    			prevSourceCellId= cellLocationCid[i];
 	             	prevNetworkType= networkType[i];
 	             	if(image!='' && throughput[i]!=0)
             	    {
 	             	if(k==0){
 	             		var m0 = new google.maps.Marker({
     	    				map : google_map0,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m0, 'click', function() {
     	    				info_window0.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window0.open(google_map0, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==1){
 	             		var m1 = new google.maps.Marker({
     	    				map : google_map1,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m1, 'click', function() {
     	    				info_window1.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window1.open(google_map1, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==2){
 	             		var m2 = new google.maps.Marker({
     	    				map : google_map2,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m2, 'click', function() {
     	    				info_window2.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window2.open(google_map2, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==3){
 	             		var m3 = new google.maps.Marker({
     	    				map : google_map3,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m3, 'click', function() {
     	    				info_window3.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window3.open(google_map3, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==4){
 	             		var m4 = new google.maps.Marker({
     	    				map : google_map4,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m4, 'click', function() {
     	    				info_window4.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window4.open(google_map4, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==5){
 	             		var m5 = new google.maps.Marker({
     	    				map : google_map5,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m5, 'click', function() {
     	    				info_window5.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window5.open(google_map5, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==6){
 	             		var m6 = new google.maps.Marker({
     	    				map : google_map6,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m6, 'click', function() {
     	    				info_window6.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window6.open(google_map6, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}else if(k==7){
 	             		var m7 = new google.maps.Marker({
     	    				map : google_map7,
     	    				animation : google.maps.Animation.DROP,
     	    				title : addr,
     	    				alt:addr,
     	    				position : new google.maps.LatLng(lat,lng),
     	    				icon : image,
     	    				html : htmlStr,
     	    				info1 : htmlStr,
     	    				info2 : networkTypeList,
     	    				info3: testNamelist,
     	    				info4: throughtputList,
     	    				info5: timeStampForEachSampleList,
     	    				topLevel : topLevelData
     	    			});
     	    			htmlStr = "";
     	    			google.maps.event.addListener(m7, 'click', function() {
     	    				info_window7.setContent('<table><tr><td colspan="2">' +this.info2+ '</td></tr>' 
     	    				+'<tr><td colspan="2">' +this.info1 +'</td>'+'<td>'+ this.info3+ '</td></tr>'
     	    				+'<tr><td colspan="2">' +this.info4+'</td>'+'<td>'+ this.info5+ '</td></tr></table>');
     	    				info_window7.open(google_map7, this);
     	    			});
	        	    		var topLevelData = '';
	        	    		var htmlStr = '';
 	             	}
             	    }
 	     		}
		   }
	    }
      }
        /* ]]> */
        
        
                   	 /* <![CDATA[ */ 
        function intializeVoiceDataConnectivity(){
         var FinalExternalCount="#{sessionScope['FinalExternalCount']}";   
	     var jsonArrayLength="#{sessionScope['jsonArrayLength']}"; 
	    if(jsonArrayLength>0){
		   for(var k=0;k<FinalExternalCount;k++){
               if(k==0){
                 var lattitudes = "#{sessionScope['VDlattitudes0']}";  
             	    lattitudes = lattitudes.split(",");
					var longitudes = "#{sessionScope['VDlongitudes0']}";  
	              	longitudes = longitudes.split(",");
	              	var testName = "#{sessionScope['VDtestName0']}"; 
	              	testName = testName.split(",");
	              	var signalStrength = "#{sessionScope['VDsignalStrength0']}";  
	              	signalStrength = signalStrength.split(",");
	              	var signalStrengthRating = "#{sessionScope['VDsignalStrengthLTT0']}";  
	              	signalStrengthRating = signalStrengthRating.split(",");
	              	var networkType = "#{sessionScope['VDnetworkType0']}";  
	              	networkType = networkType.split(",");
	            	var cellLocationCid = "#{sessionScope['VDcellLocationCID0']}";  
	            	cellLocationCid = cellLocationCid.split(",");             	
	              	var timeStampForSample = "#{sessionScope['VDtimeStampForSample0']}";  
	              	timeStampForSample = timeStampForSample.split(",");	              	
	            	var deviceInfoCallDropList = "#{sessionScope['VDdeviceInfoCallDropList0']}";  
	            	deviceInfoCallDropList = deviceInfoCallDropList.split(",");
	            	var througput = "#{sessionScope['VDthrougput0']}";  
	            	througput = througput.split(",");
	            	var througputTimestamp = "#{sessionScope['VDthrougputTimestamp0']}";  
	            	througputTimestamp = througputTimestamp.split(",");
	 			   var j=0;
				   var h=0;
             	  var map_options12 = {
       	    			center : new google.maps.LatLng(lattitudes[2] ,longitudes[2]),
       	    			zoom : 12,
       	    			mapTypeId : google.maps.MapTypeId.ROADMAP
       	    		};

       	    		var google_map12 = new google.maps.Map(document.getElementById("VoiceandDataFirstMap"), map_options12);

       	    		var info_window12 = new google.maps.InfoWindow({
       	    			content : 'loading'
       	    		});
               }else if(k==1){
                   var lattitudes = "#{sessionScope['VDlattitudes1']}";  
               	lattitudes = lattitudes.split(",");
 					var longitudes = "#{sessionScope['VDlongitudes1']}";  
 	              	longitudes = longitudes.split(",");
 	              	var testName = "#{sessionScope['VDtestName1']}"; 
 	              	testName = testName.split(",");
 	              	var signalStrength = "#{sessionScope['VDsignalStrength1']}";  
 	              	signalStrength = signalStrength.split(",");
 	              	var signalStrengthRating = "#{sessionScope['VDsignalStrengthLTT1']}";  
 	              	signalStrengthRating = signalStrengthRating.split(",");
 	              	var networkType = "#{sessionScope['VDnetworkType1']}";  
 	              	networkType = networkType.split(",");
 	            	var cellLocationCid = "#{sessionScope['VDcellLocationCID1']}";  
 	            	cellLocationCid = cellLocationCid.split(",");             	
 	              	var timeStampForSample = "#{sessionScope['VDtimeStampForSample1']}";  
 	              	timeStampForSample = timeStampForSample.split(",");	              	
 	            	var deviceInfoCallDropList = "#{sessionScope['VDdeviceInfoCallDropList1']}";  
 	            	deviceInfoCallDropList = deviceInfoCallDropList.split(",");
 	            	var througput = "#{sessionScope['VDthrougput1']}";  
 	            	througput = througput.split(",");
 	            	var througputTimestamp = "#{sessionScope['VDthrougputTimestamp1']}";  
 	            	througputTimestamp = througputTimestamp.split(",");
 				   var j=0;
 				   var h=0;
             	  var map_options13 = {
             	  	center : new google.maps.LatLng(lattitudes[2] ,longitudes[2]),
             	  	zoom : 12,
             	  	mapTypeId : google.maps.MapTypeId.ROADMAP
             	  };

             	  var google_map13 = new google.maps.Map(document.getElementById("VoiceandDataSecondMap"), map_options13);

             	  var info_window13 = new google.maps.InfoWindow({
             	  	content : 'loading'
             	  });
               }else if(k==2){
             	   var lattitudes = "#{sessionScope['VDlattitudes2']}";  
                  	lattitudes = lattitudes.split(",");
    					var longitudes = "#{sessionScope['VDlongitudes2']}";  
    	              	longitudes = longitudes.split(",");
    	              	var testName = "#{sessionScope['VDtestName2']}"; 
    	              	testName = testName.split(",");
    	              	var signalStrength = "#{sessionScope['VDsignalStrength2']}";  
    	              	signalStrength = signalStrength.split(",");
    	              	var signalStrengthRating = "#{sessionScope['VDsignalStrengthLTT2']}";  
    	              	signalStrengthRating = signalStrengthRating.split(",");
    	              	var networkType = "#{sessionScope['VDnetworkType2']}";  
    	              	networkType = networkType.split(",");
    	            	var cellLocationCid = "#{sessionScope['VDcellLocationCID2']}";  
    	            	cellLocationCid = cellLocationCid.split(",");             	
    	              	var timeStampForSample = "#{sessionScope['VDtimeStampForSample2']}";  
    	              	timeStampForSample = timeStampForSample.split(",");	              	
    	            	var deviceInfoCallDropList = "#{sessionScope['VDdeviceInfoCallDropList2']}";  
    	            	deviceInfoCallDropList = deviceInfoCallDropList.split(",");
    	            	var througput = "#{sessionScope['VDthrougput2']}";  
    	            	througput = througput.split(",");
    	            	var througputTimestamp = "#{sessionScope['VDthrougputTimestamp2']}";  
    	            	througputTimestamp = througputTimestamp.split(",");
    	 			   var j=0;
    				   var h=0;
             	  var map_options14 = {
             	  	center : new google.maps.LatLng(lattitudes[2] ,longitudes[2]),
             	  	zoom : 12,
             	  	mapTypeId : google.maps.MapTypeId.ROADMAP
             	  };

             	  var google_map14 = new google.maps.Map(document.getElementById("VoiceandDataThirdMap"), map_options14);

             	  var info_window14 = new google.maps.InfoWindow({
             	  	content : 'loading'
             	  });
               }else if(k==3){
             	   var lattitudes = "#{sessionScope['VDlattitudes3']}";  
                 	lattitudes = lattitudes.split(",");
   					var longitudes = "#{sessionScope['VDlongitudes3']}";  
   	              	longitudes = longitudes.split(",");
   	              	var testName = "#{sessionScope['VDtestName3']}"; 
   	              	testName = testName.split(",");
   	              	var signalStrength = "#{sessionScope['VDsignalStrength3']}";  
   	              	signalStrength = signalStrength.split(",");
   	              	var signalStrengthRating = "#{sessionScope['VDsignalStrengthLTT3']}";  
   	              	signalStrengthRating = signalStrengthRating.split(",");
   	              	var networkType = "#{sessionScope['VDnetworkType3']}";  
   	              	networkType = networkType.split(",");
   	            	var cellLocationCid = "#{sessionScope['VDcellLocationCID3']}";  
   	            	cellLocationCid = cellLocationCid.split(",");             	
   	              	var timeStampForSample = "#{sessionScope['VDtimeStampForSample3']}";  
   	              	timeStampForSample = timeStampForSample.split(",");	              	
   	            	var deviceInfoCallDropList = "#{sessionScope['VDdeviceInfoCallDropList3']}";  
   	            	deviceInfoCallDropList = deviceInfoCallDropList.split(",");
   	            	var througput = "#{sessionScope['VDthrougput3']}";  
   	            	througput = througput.split(",");
   	            	var througputTimestamp = "#{sessionScope['VDthrougputTimestamp3']}";  
   	            	througputTimestamp = througputTimestamp.split(",");
   				   var j=0;
   				   var h=0;
             	  var map_options15 = {
             	  	center : new google.maps.LatLng(lattitudes[3] ,longitudes[3]),
             	  	zoom : 12,
             	  	mapTypeId : google.maps.MapTypeId.ROADMAP
             	  };

             	  var google_map15 = new google.maps.Map(document.getElementById("VoiceandDataFourthMap"), map_options15);

             	  var info_window15 = new google.maps.InfoWindow({
             	  	content : 'loading'
             	  });
               }else if(k==4){
             	   var lattitudes = "#{sessionScope['VDlattitudes4']}";  
                	lattitudes = lattitudes.split(",");
  					var longitudes = "#{sessionScope['VDlongitudes4']}";  
  	              	longitudes = longitudes.split(",");
  	              	var testName = "#{sessionScope['VDtestName4']}"; 
  	              	testName = testName.split(",");
  	              	var signalStrength = "#{sessionScope['VDsignalStrength4']}";  
  	              	signalStrength = signalStrength.split(",");
  	              	var signalStrengthRating = "#{sessionScope['VDsignalStrengthLTT4']}";  
  	              	signalStrengthRating = signalStrengthRating.split(",");
  	              	var networkType = "#{sessionScope['VDnetworkType4']}";  
  	              	networkType = networkType.split(",");
  	            	var cellLocationCid = "#{sessionScope['VDcellLocationCID4']}";  
  	            	cellLocationCid = cellLocationCid.split(",");             	
  	              	var timeStampForSample = "#{sessionScope['VDtimeStampForSample4']}";  
  	              	timeStampForSample = timeStampForSample.split(",");	              	
  	            	var deviceInfoCallDropList = "#{sessionScope['VDdeviceInfoCallDropList4']}";  
  	            	deviceInfoCallDropList = deviceInfoCallDropList.split(",");
  	            	var througput = "#{sessionScope['VDthrougput4']}";  
  	            	througput = througput.split(",");
  	            	var througputTimestamp = "#{sessionScope['VDthrougputTimestamp4']}";  
  	            	througputTimestamp = througputTimestamp.split(",");
  				   var j=0;
  				   var h=0;
            	  var map_options16 = {
            	  	center : new google.maps.LatLng(lattitudes[4] ,longitudes[4]),
            	  	zoom : 12,
            	  	mapTypeId : google.maps.MapTypeId.ROADMAP
            	  };

            	  var google_map16 = new google.maps.Map(document.getElementById("VoiceandDataFifthMap"), map_options16);

            	  var info_window16 = new google.maps.InfoWindow({
            	  	content : 'loading'
            	  });
              }else if(k==5){
            	   var lattitudes = "#{sessionScope['VDlattitudes5']}";  
                	lattitudes = lattitudes.split(",");
  					var longitudes = "#{sessionScope['VDlongitudes5']}";  
  	              	longitudes = longitudes.split(",");
  	              	var testName = "#{sessionScope['VDtestName5']}"; 
  	              	testName = testName.split(",");
  	              	var signalStrength = "#{sessionScope['VDsignalStrength5']}";  
  	              	signalStrength = signalStrength.split(",");
  	              	var signalStrengthRating = "#{sessionScope['VDsignalStrengthLTT5']}";  
  	              	signalStrengthRating = signalStrengthRating.split(",");
  	              	var networkType = "#{sessionScope['VDnetworkType5']}";  
  	              	networkType = networkType.split(",");
  	            	var cellLocationCid = "#{sessionScope['VDcellLocationCID5']}";  
  	            	cellLocationCid = cellLocationCid.split(",");             	
  	              	var timeStampForSample = "#{sessionScope['VDtimeStampForSample5']}";  
  	              	timeStampForSample = timeStampForSample.split(",");	              	
  	            	var deviceInfoCallDropList = "#{sessionScope['VDdeviceInfoCallDropList5']}";  
  	            	deviceInfoCallDropList = deviceInfoCallDropList.split(",");
  	            	var througput = "#{sessionScope['VDthrougput5']}";  
  	            	througput = througput.split(",");
  	            	var througputTimestamp = "#{sessionScope['VDthrougputTimestamp5']}";  
  	            	througputTimestamp = througputTimestamp.split(",");
  				   var j=0;
  				   var h=0;
            	  var map_options17 = {
            	  	center : new google.maps.LatLng(lattitudes[5] ,longitudes[5]),
            	  	zoom : 12,
            	  	mapTypeId : google.maps.MapTypeId.ROADMAP
            	  };

            	  var google_map17 = new google.maps.Map(document.getElementById("VoiceandDataSixthMap"), map_options17);

            	  var info_window17 = new google.maps.InfoWindow({
            	  	content : 'loading'
            	  });
              }else if(k==6){
            	   var lattitudes = "#{sessionScope['VDlattitudes6']}";  
                	lattitudes = lattitudes.split(",");
  					var longitudes = "#{sessionScope['VDlongitudes6']}";  
  	              	longitudes = longitudes.split(",");
  	              	var testName = "#{sessionScope['VDtestName6']}"; 
  	              	testName = testName.split(",");
  	              	var signalStrength = "#{sessionScope['VDsignalStrength6']}";  
  	              	signalStrength = signalStrength.split(",");
  	              	var signalStrengthRating = "#{sessionScope['VDsignalStrengthLTT6']}";  
  	              	signalStrengthRating = signalStrengthRating.split(",");
  	              	var networkType = "#{sessionScope['VDnetworkType6']}";  
  	              	networkType = networkType.split(",");
  	            	var cellLocationCid = "#{sessionScope['VDcellLocationCID6']}";  
  	            	cellLocationCid = cellLocationCid.split(",");             	
  	              	var timeStampForSample = "#{sessionScope['VDtimeStampForSample6']}";  
  	              	timeStampForSample = timeStampForSample.split(",");	              	
  	            	var deviceInfoCallDropList = "#{sessionScope['VDdeviceInfoCallDropList6']}";  
  	            	deviceInfoCallDropList = deviceInfoCallDropList.split(",");
  	            	var througput = "#{sessionScope['VDthrougput6']}";  
  	            	througput = througput.split(",");
  	            	var througputTimestamp = "#{sessionScope['VDthrougputTimestamp6']}";  
  	            	througputTimestamp = througputTimestamp.split(",");
  				   var j=0;
  				   var h=0;
            	  var map_options18 = {
            	  	center : new google.maps.LatLng(lattitudes[6] ,longitudes[6]),
            	  	zoom : 12,
            	  	mapTypeId : google.maps.MapTypeId.ROADMAP
            	  };

            	  var google_map18 = new google.maps.Map(document.getElementById("VoiceandDataSeventhMap"), map_options18);

            	  var info_window18 = new google.maps.InfoWindow({
            	  	content : 'loading'
            	  });
              }else if(k==7){
            	   var lattitudes = "#{sessionScope['VDlattitudes7']}";  
                	lattitudes = lattitudes.split(",");
  					var longitudes = "#{sessionScope['VDlongitudes7']}";  
  	              	longitudes = longitudes.split(",");
  	              	var testName = "#{sessionScope['VDtestName7']}"; 
  	              	testName = testName.split(",");
  	              	var signalStrength = "#{sessionScope['VDsignalStrength7']}";  
  	              	signalStrength = signalStrength.split(",");
  	              	var signalStrengthRating = "#{sessionScope['VDsignalStrengthLTT7']}";  
  	              	signalStrengthRating = signalStrengthRating.split(",");
  	              	var networkType = "#{sessionScope['VDnetworkType7']}";  
  	              	networkType = networkType.split(",");
  	            	var cellLocationCid = "#{sessionScope['VDcellLocationCID7']}";  
  	            	cellLocationCid = cellLocationCid.split(",");             	
  	              	var timeStampForSample = "#{sessionScope['VDtimeStampForSample7']}";  
  	              	timeStampForSample = timeStampForSample.split(",");	              	
  	            	var deviceInfoCallDropList = "#{sessionScope['VDdeviceInfoCallDropList7']}";  
  	            	deviceInfoCallDropList = deviceInfoCallDropList.split(",");
  	            	var througput = "#{sessionScope['VDthrougput7']}";  
  	            	througput = througput.split(",");
  	            	var througputTimestamp = "#{sessionScope['VDthrougputTimestamp7']}";  
  	            	througputTimestamp = througputTimestamp.split(",");
  				   var j=0;
  				   var h=0;
            	  var map_options19 = {
            	  	center : new google.maps.LatLng(lattitudes[7] ,longitudes[7]),
            	  	zoom : 12,
            	  	mapTypeId : google.maps.MapTypeId.ROADMAP
            	  };

            	  var google_map19 = new google.maps.Map(document.getElementById("VoiceandDataEigthMap"), map_options19);

            	  var info_window19 = new google.maps.InfoWindow({
            	  	content : 'loading'
            	  });
              }

               var currSourceCellId="";
               var prevNetworkType="";
               var currNetworkType="";
               var prevSourceCellId="";
           	for (var i = 0;i<signalStrength.length;i++){
				var callDrop =false;
				var throughput=false;
           		value = signalStrength[i];
					addr="SignalStrength:"+signalStrength[i];
	    			lat = lattitudes[i];
	    			lng = longitudes[i];
	    			topLevelData = "TestName:"+testName[i];
	    			networkTypeList="<b>Network Type:</b>"+networkType[i];
	    			currNetworkType=networkType[i].trim();
	    			currSourceCellId=cellLocationCid[i];
	    			networkType[i]=networkType[i].trim();
	    			 if(deviceInfoCallDropList != null && deviceInfoCallDropList != ""){
                 	 if( j in deviceInfoCallDropList){ 
                 		  if( change(timeStampForSample[i])>change(deviceInfoCallDropList[j]) ){
                 			       callDrop = true;                                    
	                                   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_red.png';  
	                                   j=j+1; 
                                 } 
                 		  }
                 	 }
	    			 if(deviceInfoCallDropList != null && deviceInfoCallDropList != ""){
	                     if(!callDrop){  		    
	                    			if(signalStrengthRating[i] == "Empty"){
	                    				   if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())  
	    	                    				   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
	                                    	  if(networkType[i].toString() == "Unknown"
	                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
													  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	                                    		  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
	  	                  	    				 }else{
	  	                  	    				  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_both.png';
	  	                  	    				 }
	                                        }else {
		                                         if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
			                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
			                                    	 if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
			                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
		  	                  	    				 }else{
		  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_rect.png';
		  	                  	    				 }
			                                     }else{
			                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
		                                    }
	                                    }		 
	              	    			}else{	
		              	    			if(networkType[i].toString()== "LTE (4G)" || networkType[i].toString()== " LTE (4G)"){
		              	    				if(signalStrengthRating[i] >= 113){
				                                  if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
						                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
				                                	  if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
					                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_circular.png';
				  	                  	    				 }else{
				  	                  	    				  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_both.png';
				  	                  	    				 }
			                                        }else { 
				                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
					                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_circular.png';
					                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
					                                   	if(networkType[i].toString() == "Unknown"
			                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
			                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
															  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
					                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black.png';
				  	                  	    				 }else{
				  	                  	    				  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_rect.png';
				  	                  	    				 }
					                                     }else{
					                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black.png';
				                                 }
			                                  }       
		              		    			}else if(signalStrengthRating[i] > 0){
			              		    			if(signalStrengthRating[i] >= 97 && signalStrengthRating[i] <= 112 ){
		              		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
		    	              		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
		              		    						if(networkType[i].toString() == "Unknown"
		                                          	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                              	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
		  												  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
				                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
			  	                  	    				 }else{
			  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_both.png';
			  	                  	    				 }
		  	                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		  			                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
		  			                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		  			                                	if(networkType[i].toString() == "Unknown"
		                                          	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                              	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
		  												  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
				                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
			  	                  	    				 }else{
			  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_rect.png';
			  	                  	    				 }
		  			                                }else{
		  			                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
		  		                                    }	          		    					           
		              						   }else if(signalStrengthRating[i] >= 88 && signalStrengthRating[i] <= 96 ){
		              							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		    	              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
		              								if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
				                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
			  	                  	    				 }else{
			  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_both.png';
			  	                  	    				 }
		  	                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		  			                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
		  			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		  			                                    	if(networkType[i].toString() == "Unknown"
		  	                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		  	                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
		  													  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
					                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
				  	                  	    				 }else{
				  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_rect.png';
				  	                  	    				 }
		  			                                     }else{
		  			                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
		  		                                 }	   
		              						}else if(signalStrengthRating[i] < 88 ){
		              							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		    	              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
		              								if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
				                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
			  	                  	    				 }else{
			  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_both.png';
			  	                  	    				 }
		  	                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		  			                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
		  			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		  			                                    	if(networkType[i].toString() == "Unknown"
		  	                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		  	                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
		  													  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
					                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
				  	                  	    				 }else{
				  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_rect.png';
				  	                  	    				 }
		  			                                     }else{
		  			                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
		  		                                 }	   
		              						}
		              		    		  }
		              	    			}else{
		              	    				if(signalStrengthRating[i] >= 103){
				                                  if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
						                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
				                                	  if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
					                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_circular.png';
				  	                  	    				 }else{
				  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_both.png';
				  	                  	    				 }
			                                        }else { 
				                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
					                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_circular.png';
					                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
					                                    	 if(networkType[i].toString() == "Unknown"
				                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
				                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
																  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
						                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black.png';
					  	                  	    				 }else{
					  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_rect.png';
					  	                  	    				 }
					                                     }else{
					                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black.png';
				                                 }
			                                  }
		              		    			}else if(signalStrengthRating[i] > 0){
		              		    				if(signalStrengthRating[i] > 80 && signalStrengthRating[i] <= 102 ){
		              		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
		    	              		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
		              		    						if(networkType[i].toString() == "Unknown"
		                                          	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                              	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
		  												  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
					                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
				  	                  	    				 }else{
				  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_both.png';
				  	                  	    				 }
		  	                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		  			                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
		  			                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		  			                                	if(networkType[i].toString() == "Unknown"
		                                          	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                              	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
		  												  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
						                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
					  	                  	    				 }else{
					  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_rect.png';
					  	                  	    				 }
		  			                                }else{
		  			                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
		  		                                    }	          		    					           
		              						   }else if(signalStrengthRating[i] >=50 && signalStrengthRating[i] <= 80 ){
		              							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		    	              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
		              								if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
			  	                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
			  	                  	    				 }else{
			  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_both.png';	
			  	                  	    				 }
		  	                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		  			                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
		  			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		  			                                    	if(networkType[i].toString() == "Unknown"
		  	                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		  	                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
		  													  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
				  	                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
				  	                  	    				 }else{
				  	                  	    				  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_rect.png';
				  	                  	    				 }
		  			                                     }else{
		  			                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
		  		                                    }	   
		              							}else if(signalStrengthRating[i] < 50){
			              							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
			    	              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
			              								if(networkType[i].toString() == "Unknown"
			                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
			                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
															  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
				  	                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
				  	                  	    				 }else{
				  	                  	    					image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_both.png';	
				  	                  	    				 }
			  	                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
			  			                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
			  			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
			  			                                    	if(networkType[i].toString() == "Unknown"
			  	                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
			  	                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
			  													  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
					  	                                    		image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
					  	                  	    				 }else{
					  	                  	    				  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_rect.png';
					  	                  	    				 }
			  			                                     }else{
			  			                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
			  		                                    }	   
			              					      }
		              		    			}
		              	    			}	
	              	    			}	
	                    		 }
		    			 }
		    			 
		                if(deviceInfoCallDropList==""){   
	                    	if(signalStrengthRating[i] == "Empty"){
	                    		if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
	                            		 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	                    			if(networkType[i].toString() == "Unknown"
	                            	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
										  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	                    				image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
	                    			}else{
	                    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_both.png';
	                    			}
	                            }else {
	                              if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
	                          	 	 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
	                              }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){                          	  	
	                            	  if(networkType[i].toString() == "Unknown"
	                              	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                  	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
											  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
		                  				image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
		                  			}else{
		                  				image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_rect.png';
		                  			}
	                              }
	                          	  else{
	                          	  	image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
	                          	  }
	                            }	       		
	    	    			}else{
	    	    				if(networkType[i].toString()== "LTE (4G)" || networkType[i].toString()== " LTE (4G)"){
	          	    				//if(signalStrengthRating[i] >= 113){
	          	    				if(signalStrengthRating[i] >= lteupperRangeForGood*-1){
		                                  if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
				                                   && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
		                                	  if(networkType[i].toString() == "Unknown"
	                                    	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                        	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
												  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
			                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_circular.png';
		  	                  	    				 }else{
		  	                  	    				  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_both.png';
		  	                  	    				 }
	                                        }else { 
		                                      if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
			                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_circular.png';
			                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
			                                   	if(networkType[i].toString() == "Unknown"
	                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
													  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
			                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black.png';
		  	                  	    				 }else{
		  	                  	    				  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_rect.png';
		  	                  	    				 }
			                                     }else{
			                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black.png';
		                                 }
	                                  }       
	          		    			}else if(signalStrengthRating[i] > 0){
	              		    			//if(signalStrengthRating[i] >= 97 && signalStrengthRating[i] <= 112 ){
	          		    				if(signalStrengthRating[i] >= upperRangeForAverage*-1 && signalStrengthRating[i] <= lowerRangeForAverage*-1){
	          		    					if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()) 
		              		    					 && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	          		    						if(networkType[i].toString() == "Unknown"
	                                      	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                          	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
													  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
		                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
	  	                  	    				 }else{
	  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_both.png';
	  	                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
				                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
				                                }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                	if(networkType[i].toString() == "Unknown"
	                                      	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                          	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
													  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
		                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
	  	                  	    				 }else{
	  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_rect.png';
	  	                  	    				 }
				                                }else{
				                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
			                                    }	          		    					           
	          						  // }else if(signalStrengthRating[i] >= 88 && signalStrengthRating[i] <= 96 ){
	          						 
	          						    }else if(signalStrengthRating[i] >= lteupperRangeForGood*-1 && signalStrengthRating[i] <= ltelowerRangeForGood*-1 ){
	          							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	          								if(networkType[i].toString() == "Unknown"
	                                    	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                        	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
												  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
		                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
	  	                  	    				 }else{
	  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_both.png';
	  	                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
				                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
				                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                    	if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
			                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
		  	                  	    				 }else{
		  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_rect.png';
		  	                  	    				 }
				                                     }else{
				                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
			                                 }	   
	          						//}else if(signalStrengthRating[i] < 88 ){
	          						}else if(signalStrengthRating[i] < lteupperRangeForGood*-1 ){
	          							 if((prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString())
		              							   && (prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString())){
	          								if(networkType[i].toString() == "Unknown"
	                                    	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                        	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
												  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
		                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
	  	                  	    				 }else{
	  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_both.png';
	  	                  	    				 }
		                                        }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
				                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
				                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
				                                    	if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
			                                   	   image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
		  	                  	    				 }else{
		  	                  	    				 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_rect.png';
		  	                  	    				 }
				                                     }else{
				                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
			                                 }	   
	          						}
	          		    		  }
	          	    			}else {
	              	    			//if(signalStrengthRating[i] >= 103){
	              	    				if(signalStrengthRating[i] >= lowerRangeForPoor*-1){
	    	    					if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())
	    	    	    					  && (prevNetworkType.toString() == "" ||prevNetworkType != currNetworkType.toString())){
	    	    						if(networkType[i].toString() == "Unknown"
	                                	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                    	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
											  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
		                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_circular.png';
		                              	 }else{
		                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_both.png';
		                              	 }
	                                  }else { 
	                                        if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_circular.png';
		                                     }else if(prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString() ){
		                                    	 if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
			                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black.png';
			                              	 }else{
			                              		image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black_rect.png';
			                              	 }
		                                     }else{
		                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_black.png';
	                                   }
	                               }
	    		    			}else 	if(signalStrengthRating[i] > 0){
	    		    				//if(signalStrengthRating[i] > 80 && signalStrengthRating[i] <= 102 ){
	    		    					if(signalStrengthRating[i] > upperRangeForAverage*-1 && signalStrengthRating[i] <= lowerRangeForAverage*-1 ){
	      		    					if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString()) 
	      	      		    					 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
	      		    						if(networkType[i].toString() == "Unknown"
	                                    	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                        	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
												  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
			                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
			                              	 }else{
			                              		  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_both.png';
			                              	 }
	                                      }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString() ){
		                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_circular.png';
		                                     }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		                                    	 if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
			                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
			                              	 }else{
			                              		  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue_rect.png';
			                              	 }
		                                     }else{
		                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_blue.png';
		                                    }	          		    					           
	      						  // }else if(signalStrengthRating[i] >=50 && signalStrengthRating[i] <= 80 ){
	      						 }else if(signalStrengthRating[i] >=upperRangeForGood*-1 && signalStrengthRating[i] <= lowerRangeForGood*-1 ){
	      							 if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
	      	      							 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
	      								if(networkType[i].toString() == "Unknown"
	                                	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                    	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
											  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
				                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
				                              	 }else{
				                              		  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_both.png';
				                              	 }
	                                      }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()){
		                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
		                                  }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){
		                                	  if(networkType[i].toString() == "Unknown"
	                                      	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                          	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
													  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
			                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
			                              	 }else{
			                              		image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_rect.png';
			                              	 }
		                                  }else{
		                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
		                                }	   
	      							//}else if(signalStrengthRating[i] < 50 ){
	      							}else if(signalStrengthRating[i] < upperRangeForGood*-1 ){
	         							 if((prevSourceCellId.toString() == "" || prevSourceCellId.toString() != currSourceCellId.toString())  
	          	      							 && (prevNetworkType.toString() == "" || prevNetworkType.toString() != currNetworkType.toString())){
	         								if(networkType[i].toString() == "Unknown"
	                                    	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
	                                        	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
												  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	    		                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
	    		                              	 }else{
	    		                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_both.png';
	    		                              	 }
	                                          }else if(prevSourceCellId.toString() == "" ||prevSourceCellId.toString() != currSourceCellId.toString()){
	    	                                   	  image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_circular.png';
	    	                                  }else if(prevNetworkType.toString() == "" ||prevNetworkType.toString() != currNetworkType.toString() ){	 
	    	                                	  if(networkType[i].toString() == "Unknown"
		                                        	      ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()!= "Unknown")
		                                            	  ||(prevNetworkType.toString()!= "Unknown" && currNetworkType.toString()== "Unknown")
														  ||(prevNetworkType.toString()== "Unknown" && currNetworkType.toString()== "Unknown")){
	    		                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
	    		                              	 }else{
	    		                              		 image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green_rect.png';
	    		                              	 }
	    	                                  }else{
	    	                                      image = '../../'+"#{request.contextPath}"+'/resources/images/mm_20_green.png';
	    	                                }	   
	          							}
	    		    			   }	
	          	    		    }
	    	    			}
	                    }
	    			if(througputTimestamp != null && througputTimestamp != ""){
        				 for(var z = h ;z< througputTimestamp.length;z++){ 
        				  if(change(timeStampForSample[i])> change(througputTimestamp[z])){
        					throughput=true;
        					TCPthrouhput=througput[z];
                 			h=z+1; 
        				  }
        				  else{
        					  throughput=true;
	                    		TCPthrouhput=througput[z-1];
      				 }
        				 }
	    			}

	    	    	if(througputTimestamp != null && througputTimestamp != ""){
	                     if(!throughput){  
	                    		TCPthrouhput="0  Mbps";
	                     }
	    	    	}
	    	    	if(througputTimestamp == null || througputTimestamp == ""){
	                    		TCPthrouhput="0  Mbps";
	    	    	}
	    			
          	    prevSourceCellId= cellLocationCid[i];
          	    prevNetworkType= networkType[i].trim();
          	     
	    			type =Number(signalStrength[i]);
	    			htmlStr = "<b>SignalStrength:</b>"+signalStrength[i];
	    			cellLocationCidList="<b>Source Cell ID:</b>"+cellLocationCid[i];
                 timeStampForEachSampleList="<b> Timestamp:</b>"+timeStampForSample[i];
                 throuhputMain="<b>Througput:</b>"+TCPthrouhput;
                 if(k==0){
                 	var d12 = new google.maps.Marker({
 	    				map : google_map12,
 	    				animation : google.maps.Animation.DROP,
 	    				title : addr,
 	    				alt:addr,
 	    				position : new google.maps.LatLng(lat,lng),
 	    				icon : image,
 	    				html : htmlStr,
 	    				info1 : htmlStr,
 	    				info2 : networkTypeList,
 	    				info3 : cellLocationCidList,
 	    				info4: timeStampForEachSampleList,
 	    				info5: throuhputMain,
 	    				topLevel : topLevelData
 	    			});
 	    			htmlStr = "";
 	    			google.maps.event.addListener(d12, 'click', function() {
 	    				info_window12.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
 	    	    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>');
 	    				info_window12.open(google_map12, this);
 	    			});
 	    		var topLevelData = '';
 	    		var htmlStr = '';
                 }else if(k==1){
                 var d13 = new google.maps.Marker({
 	    				map : google_map13,
 	    				animation : google.maps.Animation.DROP,
 	    				title : addr,
 	    				alt:addr,
 	    				position : new google.maps.LatLng(lat,lng),
 	    				icon : image,
 	    				html : htmlStr,
 	    				info1 : htmlStr,
 	    				info2 : networkTypeList,
 	    				info3 : cellLocationCidList,
 	    				info4: timeStampForEachSampleList,
 	    				info5: throuhputMain,
 	    				topLevel : topLevelData
 	    			});
 	    			htmlStr = "";
 	    			google.maps.event.addListener(d13, 'click', function() {
 	    				info_window13.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
 	    	    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>');
 	    				info_window13.open(google_map13, this);
 	    			});
 	    		var topLevelData = '';
 	    		var htmlStr = '';
                 }else if(k==2){
                    var d14 = new google.maps.Marker({
 	    				map : google_map14,
 	    				animation : google.maps.Animation.DROP,
 	    				title : addr,
 	    				alt:addr,
 	    				position : new google.maps.LatLng(lat,lng),
 	    				icon : image,
 	    				html : htmlStr,
 	    				info1 : htmlStr,
 	    				info2 : networkTypeList,
 	    				info3 : cellLocationCidList,
 	    				info4: timeStampForEachSampleList,
 	    				info5: throuhputMain,
 	    				topLevel : topLevelData
 	    			});
 	    			htmlStr = "";
 	    			google.maps.event.addListener(d14, 'click', function() {
 	    				info_window14.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
 	    	    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>');
 	    				info_window14.open(google_map14, this);
 	    			});
 	    		var topLevelData = '';
 	    		var htmlStr = '';
                 }else if(k==3){
                    var d15 = new google.maps.Marker({
 	    				map : google_map15,
 	    				animation : google.maps.Animation.DROP,
 	    				title : addr,
 	    				alt:addr,
 	    				position : new google.maps.LatLng(lat,lng),
 	    				icon : image,
 	    				html : htmlStr,
 	    				info1 : htmlStr,
 	    				info2 : networkTypeList,
 	    				info3 : signalStrengthSnrList,
 	    				info4 : cellLocationCidList,
 	    				info5: timeStampForEachSampleList,
 	    				info6: throuhputMain,
 	    				topLevel : topLevelData
 	    			});
 	    			htmlStr = "";
 	    			google.maps.event.addListener(d15, 'click', function() {
 	    				info_window15.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
 	    	    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
 	    	    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>');
 	    				info_window15.open(google_map15, this);
 	    			});
 	    		var topLevelData = '';
 	    		var htmlStr = '';
             }else if(k==4){
                 var d16 = new google.maps.Marker({
	    				map : google_map16,
	    				animation : google.maps.Animation.DROP,
	    				title : addr,
	    				alt:addr,
	    				position : new google.maps.LatLng(lat,lng),
	    				icon : image,
	    				html : htmlStr,
	    				info1 : htmlStr,
	    				info2 : networkTypeList,
	    				info3 : signalStrengthSnrList,
	    				info4 : cellLocationCidList,
	    				info5: timeStampForEachSampleList,
	    				info6: throuhputMain,
	    				topLevel : topLevelData
	    			});
	    			htmlStr = "";
	    			google.maps.event.addListener(d16, 'click', function() {
	    				info_window16.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
	    	    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
	    	    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>');
	    				info_window16.open(google_map16, this);
	    			});
	    		var topLevelData = '';
	    		var htmlStr = '';
	          }else if(k==5){
	              var d17 = new google.maps.Marker({
	   				map : google_map17,
	   				animation : google.maps.Animation.DROP,
	   				title : addr,
	   				alt:addr,
	   				position : new google.maps.LatLng(lat,lng),
	   				icon : image,
	   				html : htmlStr,
	   				info1 : htmlStr,
	   				info2 : networkTypeList,
	   				info3 : signalStrengthSnrList,
	   				info4 : cellLocationCidList,
	   				info5: timeStampForEachSampleList,
	   				info6: throuhputMain,
	   				topLevel : topLevelData
	   			});
	   			htmlStr = "";
	   			google.maps.event.addListener(d17, 'click', function() {
	   				info_window17.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
	   	    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
	   	    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>');
	   				info_window17.open(google_map17, this);
	   			});
	   		var topLevelData = '';
	   		var htmlStr = '';
	       }else if(k==6){
               var d18 = new google.maps.Marker({
    				map : google_map18,
    				animation : google.maps.Animation.DROP,
    				title : addr,
    				alt:addr,
    				position : new google.maps.LatLng(lat,lng),
    				icon : image,
    				html : htmlStr,
    				info1 : htmlStr,
    				info2 : networkTypeList,
    				info3 : signalStrengthSnrList,
    				info4 : cellLocationCidList,
    				info5: timeStampForEachSampleList,
    				info6: throuhputMain,
    				topLevel : topLevelData
    			});
    			htmlStr = "";
    			google.maps.event.addListener(d18, 'click', function() {
    				info_window18.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
    	    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
    	    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>');
    				info_window18.open(google_map18, this);
    			});
    		var topLevelData = '';
    		var htmlStr = '';
        }else if(k==7){
            var d18 = new google.maps.Marker({
 				map : google_map19,
 				animation : google.maps.Animation.DROP,
 				title : addr,
 				alt:addr,
 				position : new google.maps.LatLng(lat,lng),
 				icon : image,
 				html : htmlStr,
 				info1 : htmlStr,
 				info2 : networkTypeList,
 				info3 : signalStrengthSnrList,
 				info4 : cellLocationCidList,
 				info5: timeStampForEachSampleList,
 				info6: throuhputMain,
 				topLevel : topLevelData
 			});
 			htmlStr = "";
 			google.maps.event.addListener(d19, 'click', function() {
 				info_window19.setContent('<table><tr><td colspan="2">' +this.info1+ '</td>' +'<td>'+this.info2+'</td></tr>' 
 	    				+'<tr><td colspan="2">' +this.info4 +'</td>'+'<td>'+ this.info5+ '</td></tr>'  
 	    				+'<tr><td colspan="2">'+ this.info6+'</td></tr>');
 				info_window19.open(google_map19, this);
 			});
 		var topLevelData = '';
 		var htmlStr = '';
     }               
		} 				
    }
  	}
}
         function setPage(){
				 var browserName = navigator.appName;	
	           if(browserName.match("Microsoft Internet Explorer")) {
	                document.getElementById("map_canvas").style.left = "-69px";
	           }
			}
         function changed(){
        	    //alert("submitButton");
        	    var button = document.getElementById("j_idt9:submitButton");
        	   // alert(button);
        	    button.click();
        	   }
  	   function activeTab(){
  	  	   document.getElementById("edge").className = "tab-pane active";
  	  	 document.getElementById("edge").className = "tab-pane active";
  	   }
  	   function assignHtmlValue(){
  		
			//document.getElementById("j_idt9:testValue").value = google_map.getZoom()+"--__--"+document.getElementById("headerDiv").innerHTML+document.getElementById("containerInnerDiv").innerHTML;
			document.getElementById("j_idt9:testValue").value = google_map.getZoom()+"--__--"+document.getElementById("bodyHTML").innerHTML;
			
			//alert(document.getElementById("j_idt9:testValue").value);
  	   }
function handleAjax(data){
	if (data.status == "success"){
	
		checkBoxClicked();
		getDownLinkChartForVQ();
	}
}  
//CHART GENERATION JAVASCRIPT

/* <![CDATA[ */

function processData(data) {
	$('.popuptest').show();
	var myValue = document.getElementById("output").innerHTML;
	var parent = document.getElementById("vqTable");
	while(parent.hasChildNodes())
	{
		parent.removeChild(parent.firstChild);
	}
	var detailedValue = myValue.split(",");
	var parameterValue = document.getElementById("hiddenValuesToGetForChart").value.split(",")[1];
	var row = parent.insertRow(0);
	var cell1 = row.insertCell(0);
	cell1.innerHTML = parameterValue;
	for(var i=0;i<detailedValue.length;i++){
		 row = parent.insertRow(i+1);

		// Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:
		 cell1 = row.insertCell(0);
		cell1.innerHTML = detailedValue[i];
	}
}
 
function processDataDc(data) {
	$('.popuptest').show();
	var myValue = document.getElementById("outputDc").innerHTML;
	var parent = document.getElementById("vqTable");
	while(parent.hasChildNodes())
	{
		parent.removeChild(parent.firstChild);
	}
	var detailedValue = myValue.split(",");
	var parameterValue = document.getElementById("hiddenValuesToGetForChart").value.split(",")[1];
	var row = parent.insertRow(0);
	var cell1 = row.insertCell(0);
	cell1.innerHTML = parameterValue;
	for(var i=0;i<detailedValue.length;i++){
		 row = parent.insertRow(i+1);

		// Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:
		 cell1 = row.insertCell(0);
		cell1.innerHTML = detailedValue[i];
	}
}


function processDataDcLte(data) {
	$('.popuptest').show();
	var myValue = document.getElementById("outputDcLte").innerHTML;
	var parent = document.getElementById("vqTable");
	while(parent.hasChildNodes())
	{
		parent.removeChild(parent.firstChild);
	}
	var detailedValue = myValue.split(",");
	var parameterValue = document.getElementById("hiddenValuesToGetForChart").value.split(",")[1];
	var row = parent.insertRow(0);
	var cell1 = row.insertCell(0);
	cell1.innerHTML = parameterValue;
	for(var i=0;i<detailedValue.length;i++){
		 row = parent.insertRow(i+1);

		// Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:
		 cell1 = row.insertCell(0);
		cell1.innerHTML = detailedValue[i];
	}
}

function isBothPolaPesq(){
	 var isBothSelected = "#{sessionScope['isBothPesqPolqa']}";
		multipleMarketsUpLink();
		multipleMarketsDownLink();
		vQsignalStrength();
	}
function vQsignalStrength(){
	var vqSignalStrengthCat = #{sessionScope['vqSignalStrengthCat_0']};
	var seriesValue = #{sessionScope['vqSignalStrengthvals_0']};
	var seriesTitle = "#{sessionScope['VQbucketlinecharttitle']}";


	 if(seriesValue.length>0){
	   		document.getElementById("voiceQtyThirdChartMarket_0").style.display="";
	   		document.getElementById("downlinkVoiceQuality_Label").style.display="";
	       }
    $('#voiceQtyThirdChartMarket_0').highcharts({
        xAxis: {
            categories: vqSignalStrengthCat,
            title: {
            text: seriesTitle
        }
        },
        colors: [
		'#001780',
		'#005A4C', 
		'#002FFF',
		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            },
            valueSuffix: '%',
        },
        title: {
            text: 'Airometric'
        },
        yAxis: {
            title: {
                text: ' Percentage (%)'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },
        plotOptions: {
            line: {
                marker: {
                    enabled: true
                }
            }
        },
    credits: {
        enabled: false
    },
        series:seriesValue
    });

     vqSignalStrengthCat = #{sessionScope['vqSignalStrengthCat_1']};
	 seriesValue = #{sessionScope['vqSignalStrengthvals_1']};
	 if(seriesValue.length>0){
	   		document.getElementById("voiceQtyThirdChartMarket_1").style.display="";
	   		document.getElementById("downlinkVoiceQuality_Label").style.display="";
	       }
    $('#voiceQtyThirdChartMarket_1').highcharts({
        xAxis: {
            categories: vqSignalStrengthCat,
            title: {
            text: seriesTitle
        }
        },
        colors: [
             	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            },
            valueSuffix: '%',
        },
        title: {
        	text: 'Airometric'
        },
        yAxis: {
            title: {
                text: ' Percentage (%)'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },
        plotOptions: {
            line: {
                marker: {
                    enabled: true
                }
            }
        },
    credits: {
        enabled: false
    },
        series:seriesValue
    });
    vqSignalStrengthCat = #{sessionScope['vqSignalStrengthCat_2']};
	 seriesValue = #{sessionScope['vqSignalStrengthvals_2']};

	 if(seriesValue.length>0){
	   		document.getElementById("voiceQtyThirdChartMarket_2").style.display="";
	   		document.getElementById("downlinkVoiceQuality_Label").style.display="";
	       }
    $('#voiceQtyThirdChartMarket_2').highcharts({
        xAxis: {
            categories: vqSignalStrengthCat,
            title: {
            text: seriesTitle
        }
        },
        colors: [
             	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            },
            valueSuffix: '%',
        },
        title: {
        	text: 'Airometric'
        },
        yAxis: {
            title: {
                text: ' Percentage (%)'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },
        plotOptions: {
            line: {
                marker: {
                    enabled: true
                }
            }
        },
    credits: {
        enabled: false
    },
        series:seriesValue
    });
    vqSignalStrengthCat = #{sessionScope['vqSignalStrengthCat_3']};
	 seriesValue = #{sessionScope['vqSignalStrengthvals_3']};
	 if(seriesValue.length>0){
	   		document.getElementById("voiceQtyThirdChartMarket_3").style.display="";
	   		document.getElementById("downlinkVoiceQuality_Label").style.display="";
	       }
    $('#voiceQtyThirdChartMarket_3').highcharts({
        xAxis: {
            categories: vqSignalStrengthCat,
            title: {
            text: seriesTitle
        }
        },
        colors: [
             	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            },
            valueSuffix: '%',
        },
        title: {
        	text: 'Airometric'
        },
        yAxis: {
            title: {
                text: ' Percentage (%)'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },
        plotOptions: {
            line: {
                marker: {
                    enabled: true
                }
            }
        },
    credits: {
        enabled: false
    },
        series:seriesValue
    });
}
function multipleMarketsDownLink(){

	var jsonUplinkArr = #{sessionScope['voiceQualityDownLinkChart_Market_0']};
    var vqDownlinkcategories = #{sessionScope['voiceQualityDownLinkVal_Market_0']};
    if(vqDownlinkcategories.length>0){
  		document.getElementById("voiceQtySecondChartMarket_0").style.display="";
  		document.getElementById("downlink_Label").style.display="";
      }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceQtySecondChartMarket_0",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
        
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForChart").value = "down_"+seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: vqDownlinkcategories,
        xAxis: {
            categories: jsonUplinkArr
        },
        colors: [
             	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });

	 jsonUplinkArr = #{sessionScope['voiceQualityDownLinkChart_Market_1']};
     vqDownlinkcategories = #{sessionScope['voiceQualityDownLinkVal_Market_1']};
     if(vqDownlinkcategories.length>0){
   		document.getElementById("voiceQtySecondChartMarket_1").style.display="";
  		document.getElementById("downlink_Label").style.display="";
       }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceQtySecondChartMarket_1",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForChart").value = "down_"+seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: vqDownlinkcategories,
        xAxis: {
            categories: jsonUplinkArr
        },
        colors: [
             	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });
	 
	 jsonUplinkArr = #{sessionScope['voiceQualityDownLinkChart_Market_2']};
     vqDownlinkcategories = #{sessionScope['voiceQualityDownLinkVal_Market_2']};
     if(vqDownlinkcategories.length>0){
	   		document.getElementById("voiceQtySecondChartMarket_2").style.display="";
	  		document.getElementById("downlink_Label").style.display="";
	       }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceQtySecondChartMarket_2",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForChart").value = "down_"+seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: vqDownlinkcategories,
        xAxis: {
            categories: jsonUplinkArr
        },
        colors: [
             	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });

	 jsonUplinkArr = #{sessionScope['voiceQualityDownLinkChart_Market_3']};
     vqDownlinkcategories = #{sessionScope['voiceQualityDownLinkVal_Market_3']};
	 if(vqDownlinkcategories.length>0){
	   		document.getElementById("voiceQtySecondChartMarket_3").style.display="";
	  		document.getElementById("downlink_Label").style.display="";
	}     
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceQtySecondChartMarket_3",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForChart").value = "down_"+seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: vqDownlinkcategories,
        xAxis: {
            categories: jsonUplinkArr
        },
        colors: [
             	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });

}

function multipleMarketsUpLink(){

	var jsonUplinkArr = #{sessionScope['voiceQualityUplinkChart_Market_0']};
    var vqDownlinkcategories = #{sessionScope['voiceQualityUplinkChartValue_Market_0']};
   // var marketName = #{sessionScope['graphMarket_0']};
    if(vqDownlinkcategories.length>0){
		document.getElementById("voiceQtyFirstChart").style.display="";
		document.getElementById("uplink_Label").style.display="";
    }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceQtyFirstChart",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
        	 column: {
            pointPadding: 0.0,
            borderWidth: 0
        },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForChart").value = "up_"+seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: vqDownlinkcategories,
        xAxis: {
            categories: jsonUplinkArr
        },
        colors: [
             	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });
	 jsonUplinkArr = #{sessionScope['voiceQualityUplinkChart_Market_1']};
     vqDownlinkcategories = #{sessionScope['voiceQualityUplinkChartValue_Market_1']};
     //marketName = #{sessionScope['graphMarket_0']};
     if(vqDownlinkcategories.length>0){
 		document.getElementById("voiceQtyFirstChartMarket2").style.display="";
 		document.getElementById("uplink_Label").style.display="";
     }
	var chart1 = new Highcharts.Chart({
        chart: {
            renderTo: "voiceQtyFirstChartMarket2",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForChart").value = "up_"+seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: vqDownlinkcategories,
        xAxis: {
            categories: jsonUplinkArr
        },
          colors: [
               	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
                ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });
	 jsonUplinkArr = #{sessionScope['voiceQualityUplinkChart_Market_2']};
     vqDownlinkcategories = #{sessionScope['voiceQualityUplinkChartValue_Market_2']};
   //  marketName = #{sessionScope['graphMarket_0']};
     if(vqDownlinkcategories.length>0){
  		document.getElementById("voiceQtyFirstChartMarket3").style.display="";
  		document.getElementById("uplink_Label").style.display="";
      }
	var chart1 = new Highcharts.Chart({
        chart: {
            renderTo: "voiceQtyFirstChartMarket3",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForChart").value = "up_"+seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: vqDownlinkcategories,
        xAxis: {
            categories: jsonUplinkArr
        },
        colors: [
             	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });
	jsonUplinkArr = #{sessionScope['voiceQualityUplinkChart_Market_3']};
    vqDownlinkcategories = #{sessionScope['voiceQualityUplinkChartValue_Market_3']};
  //  marketName = #{sessionScope['graphMarket_0']};
    
    if(vqDownlinkcategories.length>0){
  		document.getElementById("voiceQtyFirstChartMarket4").style.display="";
  		document.getElementById("uplink_Label").style.display="";
      }
	var chart1 = new Highcharts.Chart({
        chart: {
            renderTo: "voiceQtyFirstChartMarket4",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForChart").value = "up_"+seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: vqDownlinkcategories,
        xAxis: {
            categories: jsonUplinkArr
        },
        colors: [
             	'#001780',
        		'#005A4C', 
        		'#002FFF',
        		'#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });
}

/***************************************CONNECTIVITY******************************************/
function callSetupUpLink(){
 	var callSetupUplinkArr = #{sessionScope['callSetupUplinkCat_0']};
    var callSetupUplinkCategories = #{sessionScope['callSetupUplinkVal_0']};
    var marketName = #{sessionScope['graphMarket_0']};
    if(callSetupUplinkCategories.length>0){
  		document.getElementById("voiceConnectivityFirstChartMarket_0").style.display="";
  		document.getElementById("callSetup_Label").style.display="";
      }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityFirstChartMarket_0",
            type: "line"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            line: {
                marker: {
                    enabled: false
                }
            },
            series: {
                cursor: 'pointer',
            }
        },
        series: callSetupUplinkCategories,
        xAxis: {
            categories: callSetupUplinkArr,
            title: {
                text: marketName.text
            },
            labels:
            {
              enabled: false
            }
        },
        colors: [
                 '#001780',
                 '#005A4C',
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        yAxis: {
            title: {
                text: 'Duration in ms'
            }
        },
        credits: {
            enabled: false
        }
      
    }); 
	 callSetupUplinkArr = #{sessionScope['callSetupUplinkCat_1']};
     callSetupUplinkCategories = #{sessionScope['callSetupUplinkVal_1']};
      marketName = #{sessionScope['graphMarket_1']};
     if(callSetupUplinkCategories.length>0){
   		document.getElementById("voiceConnectivityFirstChartMarket_1").style.display="";
   		document.getElementById("callSetup_Label").style.display="";
       }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityFirstChartMarket_1",
            type: "line"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            line: {
                marker: {
                    enabled: false
                }
            },
            series: {
                cursor: 'pointer',
            }
        },
        series: callSetupUplinkCategories,
        xAxis: {
            categories: callSetupUplinkArr,
            title: {
                text: marketName.text
            },
            labels:
            {
              enabled: false
            }
        },
        colors: [
                 '#001780',
                 '#005A4C',
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        yAxis: {
            title: {
                text: 'Duration in ms'
            }
        },
        credits: {
            enabled: false
        }
      
    });
   
	callSetupUplinkArr = #{sessionScope['callSetupUplinkCat_2']};
    callSetupUplinkCategories = #{sessionScope['callSetupUplinkVal_2']};
    marketName = #{sessionScope['graphMarket_2']};
    if(callSetupUplinkCategories.length>0){
   		document.getElementById("voiceConnectivityFirstChartMarket_2").style.display="";
   		document.getElementById("callSetup_Label").style.display="";
       }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityFirstChartMarket_2",
            type: "line"
        },
        title: {
        	text: 'Airometric'
        },
        yAxis: {
            title: {
                text: 'Duration in ms'
            }
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            line: {
                marker: {
                    enabled: false
                }
            },
            series: {
                cursor: 'pointer',
            }
        },
        series: callSetupUplinkCategories,
        xAxis: {
            categories: callSetupUplinkArr,
            title: {
                text: marketName.text
            },
            labels:
            {
              enabled: false
            }
        },
        colors: [
                 '#001780',
                 '#005A4C',
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });
	callSetupUplinkArr = #{sessionScope['callSetupUplinkCat_3']};
    callSetupUplinkCategories = #{sessionScope['callSetupUplinkVal_3']};
    marketName = #{sessionScope['graphMarket_3']};
    if(callSetupUplinkCategories.length>0){
   		document.getElementById("voiceConnectivityFirstChartMarket_3").style.display="";
   		document.getElementById("callSetup_Label").style.display="";
       }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityFirstChartMarket_3",
            type: "line"
        },
        yAxis: {
            title: {
                text: 'Duration in ms'
            }
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            line: {
                marker: {
                    enabled: false
                }
            },
            series: {
                cursor: 'pointer',
            }
        },
        series: callSetupUplinkCategories,
        xAxis: {
            categories: callSetupUplinkArr,
            title: {
                text: marketName.text
            },
            labels:
            {
              enabled: false
            }
        },
        colors: [
                 '#001780',
                 '#005A4C', 
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });
}

function callTearDown(){
 	var callSetupDownlinkArr = #{sessionScope['callSetupDownlinkCat_0']};
    var callSetupDownlinkCategories = #{sessionScope['callTearDownValArr_0']};
    var marketName = #{sessionScope['graphMarket_0']};
    if(callSetupDownlinkCategories.length>0){
   		document.getElementById("voiceConnectivityCallTearDownChartMarket_0").style.display="";
   		document.getElementById("callTeardown_Label").style.display="";
       }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityCallTearDownChartMarket_0",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        yAxis: {
            title: {
                text: 'ms'
            }
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("callSetupDownLink");
/*                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
            }
        },
        series: callSetupDownlinkCategories,
        xAxis: {
            categories: callSetupDownlinkArr,
            title: {
                text: marketName.text
            }
        },
        colors: [
                 '#001780',
                 '#005A4C', 
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 


	 callSetupDownlinkArr = #{sessionScope['callSetupDownlinkCat_1']};
     callSetupDownlinkCategories = #{sessionScope['callTearDownValArr_1']};
     marketName = #{sessionScope['graphMarket_1']};
     if(callSetupDownlinkCategories.length>0){
    		document.getElementById("voiceConnectivityCallTearDownChartMarket_1").style.display="";
    		document.getElementById("callTeardown_Label").style.display="";
        }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityCallTearDownChartMarket_1",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        yAxis: {
            title: {
                text: 'ms'
            }
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("callSetupDownLink");
/*                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
            }
        },
        series: callSetupDownlinkCategories,
        xAxis: {
            categories: callSetupDownlinkArr,
            title: {
                text: marketName.text
            }
        },
        colors: [
                 '#001780',
                 '#005A4C', 
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 

	 callSetupDownlinkArr = #{sessionScope['callSetupDownlinkCat_2']};
     callSetupDownlinkCategories = #{sessionScope['callTearDownValArr_2']};
     marketName = #{sessionScope['graphMarket_2']};
     if(callSetupDownlinkCategories.length>0){
 		document.getElementById("voiceConnectivityCallTearDownChartMarket_2").style.display="";
 		document.getElementById("callTeardown_Label").style.display="";
     }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityCallTearDownChartMarket_2",
            type: "column"
        },
        yAxis: {
            title: {
                text: 'ms'
            }
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("callSetupDownLink");
/*                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
            }
        },
        series: callSetupDownlinkCategories,
        xAxis: {
            categories: callSetupDownlinkArr,
            title: {
                text: marketName.text
            }
        },
        colors: [
                 '#001780',
                 '#005A4C', 
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 

	callSetupDownlinkArr = #{sessionScope['callSetupDownlinkCat_3']};
    callSetupDownlinkCategories = #{sessionScope['callTearDownValArr_3']};
    marketName = #{sessionScope['graphMarket_3']};
    if(callSetupDownlinkCategories.length>0){
 		document.getElementById("voiceConnectivityCallTearDownChartMarket_3").style.display="";
 		document.getElementById("callTeardown_Label").style.display="";
     }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityCallTearDownChartMarket_3",
            type: "column"
        },
        yAxis: {
            title: {
                text: 'ms'
            }
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("callSetupDownLink");
/*                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
            }
        },
        series: callSetupDownlinkCategories,
        xAxis: {
            categories: callSetupDownlinkArr,
            title: {
                text: marketName.text
            }
        },
        colors: [
                 '#001780',
                 '#005A4C', 
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 
}

function callIdleTime(){
 	var callSetupDownlinkArr = #{sessionScope['callSetupDownlinkCat_0']};
    var callSetupDownlinkCategories = #{sessionScope['idleModeValArr_0']};
    var marketName = #{sessionScope['graphMarket_0']};
    if(callSetupDownlinkCategories.length>0){
 		document.getElementById("voiceConnectivityIdleChart_0").style.display="";
 		document.getElementById("idleTime_Label").style.display="";
     }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityIdleChart_0",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        yAxis: {
            title: {
                text: 'Duration in seconds'
            }
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("callSetupDownLink");
/*                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: callSetupDownlinkCategories,
        xAxis: {
            categories: callSetupDownlinkArr,
            title: {
                text: marketName.text
            }
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 

	 callSetupDownlinkArr = #{sessionScope['callSetupDownlinkCat_1']};
     callSetupDownlinkCategories = #{sessionScope['idleModeValArr_1']};
     marketName = #{sessionScope['graphMarket_1']};
     if(callSetupDownlinkCategories.length>0){
  		document.getElementById("voiceConnectivityIdleChart_1").style.display="";
  		document.getElementById("idleTime_Label").style.display="";
      }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityIdleChart_1",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        yAxis: {
            title: {
                text: 'Duration in seconds'
            }
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("callSetupDownLink");
/*                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: callSetupDownlinkCategories,
        xAxis: {
            categories: callSetupDownlinkArr,
            title: {
                text: marketName.text
            }
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 

	 callSetupDownlinkArr = #{sessionScope['callSetupDownlinkCat_2']};
     callSetupDownlinkCategories = #{sessionScope['idleModeValArr_2']};
     marketName = #{sessionScope['graphMarket_2']};
     if(callSetupDownlinkCategories.length>0){
   		document.getElementById("voiceConnectivityIdleChart_2").style.display="";
   		document.getElementById("idleTime_Label").style.display="";
       }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityIdleChart_2",
            type: "column"
        },
        yAxis: {
            title: {
                text: 'Duration in seconds'
            }
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("callSetupDownLink");
/*                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: callSetupDownlinkCategories,
        xAxis: {
            categories: callSetupDownlinkArr,
            title: {
                text: marketName.text
            }
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 


	 callSetupDownlinkArr = #{sessionScope['callSetupDownlinkCat_3']};
     callSetupDownlinkCategories = #{sessionScope['idleModeValArr_3']};
     marketName = #{sessionScope['graphMarket_3']};
     if(callSetupDownlinkCategories.length>0){
    		document.getElementById("voiceConnectivityIdleChart_3").style.display="";
    		document.getElementById("idleTime_Label").style.display="";
        }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityIdleChart_3",
            type: "column"
        },
        yAxis: {
            title: {
                text: 'Duration in seconds'
            }
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("callSetupDownLink");
/*                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: callSetupDownlinkCategories,
        xAxis: {
            categories: callSetupDownlinkArr,
            title: {
                text: marketName.text
            }
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 
}




//RVP
function callDropDownLink(){/* Gets data for Call setup details */

	var callDropJsonUplinkArr = #{sessionScope['callDropJsoArr_0']};
    var callDropDownlinkcategories = #{sessionScope['callDropJsoDownlinkValArr_0']};
    if(callDropDownlinkcategories.length>0){
		document.getElementById("callDropChartMarket_0").style.display="";
		document.getElementById("callRetention_Label").style.display="";
    }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "callDropChartMarket_0",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                		/*	var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForChart").value = "down_"+seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: callDropDownlinkcategories,
        xAxis: {
            categories: callDropJsonUplinkArr
        },
        colors: [
                 '#001780',
                 '#005A4C',
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
      
    });
	 callDropJsonUplinkArr = #{sessionScope['callDropJsoArr_1']};
     callDropDownlinkcategories = #{sessionScope['callDropJsoDownlinkValArr_1']};
     if(callDropDownlinkcategories.length>0){
 		document.getElementById("callDropChartMarket_1").style.display="";
 		document.getElementById("callRetention_Label").style.display="";
     }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "callDropChartMarket_1",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                		/*	var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForChart").value = "down_"+seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: callDropDownlinkcategories,
        xAxis: {
            categories: callDropJsonUplinkArr
        },
        colors: [
                 '#001780',
                 '#005A4C',
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });

	 callDropJsonUplinkArr = #{sessionScope['callDropJsoArr_2']};
     callDropDownlinkcategories = #{sessionScope['callDropJsoDownlinkValArr_2']};
     if(callDropDownlinkcategories.length>0){
  		document.getElementById("callDropChartMarket_2").style.display="";
  		document.getElementById("callRetention_Label").style.display="";
      }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "callDropChartMarket_2",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                		/*	var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForChart").value = "down_"+seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: callDropDownlinkcategories,
        xAxis: {
            categories: callDropJsonUplinkArr
        },
        colors: [
                 '#001780',
                 '#005A4C',
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });
    
	 callDropJsonUplinkArr = #{sessionScope['callDropJsoArr_3']};
     callDropDownlinkcategories = #{sessionScope['callDropJsoDownlinkValArr_3']};
     if(callDropDownlinkcategories.length>0){
   		document.getElementById("callDropChartMarket_3").style.display="";
   		document.getElementById("callRetention_Label").style.display="";
       }
	chart = new Highcharts.Chart({
        chart: {
            renderTo: "callDropChartMarket_3",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                		/*	var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            document.getElementById("hiddenValuesToGetForChart").value = "down_"+seriesname+","+category;
                            getChartDetails(); */
                        }
                    }
                },
                pointWidth:pointWidth
            }
        },
        series: callDropDownlinkcategories,
        xAxis: {
            categories: callDropJsonUplinkArr
        },
        colors: [
                 '#001780',
                 '#005A4C',
                 '#002FFF',
                 '#263780'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });
}

//RVP

/**************************************Charts***********************************************/
 

/***************************************CONNECTIVITY  LTE******************************************/
function callSetupUpLinkLte(){
 	var callSetupUplinkArrLte = #{sessionScope['callSetupUplinkCat_0']};
    var callSetupUplinkCategoriesLte = #{sessionScope['callSetupUplinkValLte_0']};
    if(callSetupUplinkCategoriesLte.length>0){
  		document.getElementById("voiceConnectivityFirstChart_lte_0").style.display="";
  		document.getElementById("callSetupLte_Label").style.display="";
      }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityFirstChart_lte_0",
            type: "line"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            line: {
                marker: {
                    enabled: false
                }
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("voiceConnectivityFirstChart_lte table data");
                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                }
            }
        },
        series: callSetupUplinkCategoriesLte,
        xAxis: {
            categories: callSetupUplinkArrLte
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 
 	 callSetupUplinkArrLte = #{sessionScope['callSetupUplinkCat_1']};
     callSetupUplinkCategoriesLte = #{sessionScope['callSetupUplinkValLte_1']};
    if(callSetupUplinkCategoriesLte.length>0){
  		document.getElementById("voiceConnectivityFirstChart_lte_1").style.display="";
  		document.getElementById("callSetupLte_Label").style.display="";
      }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityFirstChart_lte_1",
            type: "line"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            line: {
                marker: {
                    enabled: false
                }
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("voiceConnectivityFirstChart_lte table data");
                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                }
            }
        },
        series: callSetupUplinkCategoriesLte,
        xAxis: {
            categories: callSetupUplinkArrLte
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
      
    }); 
	 callSetupUplinkArrLte = #{sessionScope['callSetupUplinkCat_2']};
     callSetupUplinkCategoriesLte = #{sessionScope['callSetupUplinkValLte_2']};
    if(callSetupUplinkCategoriesLte.length>0){
  		document.getElementById("voiceConnectivityFirstChart_lte_2").style.display="";
  		document.getElementById("callSetupLte_Label").style.display="";
      }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityFirstChart_lte_2",
            type: "line"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            line: {
                marker: {
                    enabled: false
                }
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("voiceConnectivityFirstChart_lte table data");
                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                }
            }
        },
        series: callSetupUplinkCategoriesLte,
        xAxis: {
            categories: callSetupUplinkArrLte
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    });

	 callSetupUplinkArrLte = #{sessionScope['callSetupUplinkCat_3']};
     callSetupUplinkCategoriesLte = #{sessionScope['callSetupUplinkValLte_3']};
    if(callSetupUplinkCategoriesLte.length>0){
  		document.getElementById("voiceConnectivityFirstChart_lte_3").style.display="";
  		document.getElementById("callSetupLte_Label").style.display="";
      }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivityFirstChart_lte_3",
            type: "line"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            },
            line: {
                marker: {
                    enabled: false
                }
            },
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function() {
                        	//alert("voiceConnectivityFirstChart_lte table data");
                 			var myObj = this; 
                            var seriesname = this.series.name;
                            var category = this.category;
                            if(seriesname.indexOf("wifi")==0){
                                seriesname = seriesname.substring(5,seriesname.length);
                           }
                            document.getElementById("hiddenValuesToGetForSecondChart").value = seriesname+","+category;
                            getChartDetails(); 
                        }
                    }
                }
            }
        },
        series: callSetupUplinkCategoriesLte,
        xAxis: {
            categories: callSetupUplinkArrLte
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
      
    });


}



function callSetupDownLinkLte(){
 	var callSetupDownlinkArrLte = #{sessionScope['callDropJsoArrLte_0']};
    var callSetupDownlinkCategoriesLte = #{sessionScope['callDropJsoDownlinkValArrLte_0']};
    if(callSetupDownlinkCategoriesLte.length>0){
		document.getElementById("voiceConnectivitySecondChart_lte_0").style.display="";
		document.getElementById("callRetentionLte_Label").style.display="";
    }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivitySecondChart_lte_0",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            }
        },
        series: callSetupDownlinkCategoriesLte,
        xAxis: {
            categories: callSetupDownlinkArrLte
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 

 	 callSetupDownlinkArrLte = #{sessionScope['callDropJsoArrLte_1']};
     callSetupDownlinkCategoriesLte = #{sessionScope['callDropJsoDownlinkValArrLte_1']};
    if(callSetupDownlinkCategoriesLte.length>0){
		document.getElementById("voiceConnectivitySecondChart_lte_1").style.display="";
		document.getElementById("callRetentionLte_Label").style.display="";
    }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivitySecondChart_lte_1",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            }
        },
        series: callSetupDownlinkCategoriesLte,
        xAxis: {
            categories: callSetupDownlinkArrLte
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 


 	 callSetupDownlinkArrLte = #{sessionScope['callDropJsoArrLte_2']};
     callSetupDownlinkCategoriesLte = #{sessionScope['callDropJsoDownlinkValArrLte_2']};
    if(callSetupDownlinkCategoriesLte.length>0){
		document.getElementById("voiceConnectivitySecondChart_lte_2").style.display="";
		document.getElementById("callRetentionLte_Label").style.display="";
    }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivitySecondChart_lte_2",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            }
        },
        series: callSetupDownlinkCategoriesLte,
        xAxis: {
            categories: callSetupDownlinkArrLte
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 


 	 callSetupDownlinkArrLte = #{sessionScope['callDropJsoArrLte_3']};
     callSetupDownlinkCategoriesLte = #{sessionScope['callDropJsoDownlinkValArrLte_3']};
    if(callSetupDownlinkCategoriesLte.length>0){
		document.getElementById("voiceConnectivitySecondChart_lte_3").style.display="";
		document.getElementById("callRetentionLte_Label").style.display="";
    }
	var chart = new Highcharts.Chart({
        chart: {
            renderTo: "voiceConnectivitySecondChart_lte_3",
            type: "column"
        },
        title: {
        	text: 'Airometric'
        },
        plotOptions: {
            column: {
                pointPadding: 0.0,
                borderWidth: 0
            }
        },
        series: callSetupDownlinkCategoriesLte,
        xAxis: {
            categories: callSetupDownlinkArrLte
        },
        colors: [
                 '#001780',
                 '#005A4C'
             ],
        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        credits: {
            enabled: false
        }
    }); 
	

}

/**************************************Charts LTE***********************************************/
//data connectivity TCP

$(function () {
	  var tcpdownloadChartCat = #{sessionScope['dataConnectivitytcpDownloadArr_0']};
	  var tcpdownloadChartVal = #{sessionScope['dataConnectivitytcpValArr_0']};
	  if(tcpdownloadChartVal.length>0){
	 		document.getElementById("DataConnectivityFirstChartMarket_0").style.display="";
	 		document.getElementById("tcp_Label").style.display="";
	  }
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "DataConnectivityFirstChartMarket_0",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
               			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          //alert("***"+"dcTcp_"+seriesname+","+category);
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "dcTcp_"+seriesname+","+category;
                          getChartDetailsDC(); 
                      }
                  }
              }
          }
      },        
      series:tcpdownloadChartVal,
      xAxis: {
              categories: tcpdownloadChartCat
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#002FFF',
               '#263780',
               '#0025CC',
               '#8050FF',
               '#005A4C',
               '#1B795D',
               '#C9DEB9',
               '#FFC48B',
               '#D86E52',
               '#FE7100'
           ],
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true
          }],
          credits: {
          enabled: false
      }
  });
});

$(function () {
	 var tcpdownloadChartCat1 = #{sessionScope['dataConnectivitytcpDownloadArr_1']};
	 var tcpdownloadChartVal1 = #{sessionScope['dataConnectivitytcpValArr_1']};
	 if(tcpdownloadChartVal1.length>0){
			document.getElementById("DataConnectivityFirstChartMarket_1").style.display="";
			document.getElementById("tcp_Label").style.display="";
	}
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "DataConnectivityFirstChartMarket_1",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("DataConnectivityFirstChart table data");
               			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          //alert("***"+"dcTcp_"+seriesname+","+category);
                          document.getElementById("hiddenValuesToGetForChart").value = "dcTcp_"+seriesname+","+category;
                          getChartDetailsDC(); 
                      }
                  }
              }
          }
      },        
      series:tcpdownloadChartVal1,
      xAxis: {
              categories: tcpdownloadChartCat1
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#002FFF',
               '#263780',
               '#0025CC',
               '#8050FF',
               '#005A4C',
               '#1B795D',
               '#C9DEB9',
               '#FFC48B',
               '#D86E52',
               '#FE7100'
           ],
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true
          }],
          credits: {
          enabled: false
      }
  });
});


$(function () {
	 var tcpdownloadChartCat2 = #{sessionScope['dataConnectivitytcpDownloadArr_2']};
	 var tcpdownloadChartVal2 = #{sessionScope['dataConnectivitytcpValArr_2']};
	 if(tcpdownloadChartVal2.length>0){
			document.getElementById("DataConnectivityFirstChartMarket_2").style.display="";
			document.getElementById("tcp_Label").style.display="";
	 }
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "DataConnectivityFirstChartMarket_2",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("DataConnectivityFirstChart table data");
               			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          //alert("***"+"dcTcp_"+seriesname+","+category);
                          document.getElementById("hiddenValuesToGetForChart").value = "dcTcp_"+seriesname+","+category;
                          getChartDetailsDC(); 
                      }
                  }
              }
          }
      },        
      series:tcpdownloadChartVal2,
      xAxis: {
              categories: tcpdownloadChartCat2
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#002FFF',
               '#263780',
               '#0025CC',
               '#8050FF',
               '#005A4C',
               '#1B795D',
               '#C9DEB9',
               '#FFC48B',
               '#D86E52',
               '#FE7100'
           ],
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true
          }],
          credits: {
          enabled: false
      }
  });
});


$(function () {
	 var tcpdownloadChartCat3 = #{sessionScope['dataConnectivitytcpDownloadArr_3']};
	 var tcpdownloadChartVal3 = #{sessionScope['dataConnectivitytcpValArr_3']};
	 if(tcpdownloadChartVal3.length>0){
			document.getElementById("DataConnectivityFirstChartMarket_3").style.display="";
			document.getElementById("tcp_Label").style.display="";
	}	 
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "DataConnectivityFirstChartMarket_3",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("DataConnectivityFirstChart table data");
               			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          //alert("***"+"dcTcp_"+seriesname+","+category);
                          document.getElementById("hiddenValuesToGetForChart").value = "dcTcp_"+seriesname+","+category;
                          getChartDetailsDC(); 
                      }
                  }
              }
          }
      },        
      series:tcpdownloadChartVal3,
      xAxis: {
              categories: tcpdownloadChartCat3
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#002FFF',
               '#263780',
               '#0025CC',
               '#8050FF',
               '#005A4C',
               '#1B795D',
               '#C9DEB9',
               '#FFC48B',
               '#D86E52',
               '#FE7100'
           ],
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true
          }],
          credits: {
          enabled: false
      }
  });
});

$(function () {
	 var ftpdownloadChartCat = #{sessionScope['dataConnectivityftpDownloadArr_0']};
	 var ftpdownloadChartVal = #{sessionScope['dataConnectivityftpValArr_0']};
	 if(ftpdownloadChartVal.length>0){
			document.getElementById("DataConnectivityFTPChart").style.display="";
			document.getElementById("ftp_Label").style.display="";
	 }	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityFTPChart",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
               			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "dcFtp_"+seriesname+","+category;
                          getChartDetails(); 
                      }
                  }
              },
              pointWidth:pointWidth
          }
      }, 
	        series:ftpdownloadChartVal,
	        xAxis: {
	                categories: ftpdownloadChartCat
	        },
	        tooltip: {
              formatter: function() {
                  var s;
                      s = this.series.name + ' : ' +
                          this.x  +': '+ this.y;
                  return s;
              }
          },
          colors: [
                   '#001780',
                   '#4D6DFF',
                   '#002FFF',
                   '#005A4C',
                   '#1B795D',
                   '#C9DEB9'
               ],
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true
	            }],
	            credits: {
	            enabled: false
	        },
	    });
	});


$(function () {
	 var ftpdownloadChartCat_1 = #{sessionScope['dataConnectivityftpDownloadArr_1']};
	 var ftpdownloadChartVal_1 = #{sessionScope['dataConnectivityftpValArr_1']};
	 if(ftpdownloadChartVal_1.length>0){
			document.getElementById("DataConnectivityFTPChartMarket_1").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityFTPChartMarket_1",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
               			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "dcFtp_"+seriesname+","+category;
                          getChartDetails(); 
                      }
                  }
          },
          pointWidth:pointWidth
          }
      }, 
	        series:ftpdownloadChartVal_1,
	        xAxis: {
	                categories: ftpdownloadChartCat_1
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true
	            }],
	            credits: {
	            enabled: false
	        }
	    });
	});



$(function () {
	 var ftpdownloadChartCat_2 = #{sessionScope['dataConnectivityftpDownloadArr_2']};
	 var ftpdownloadChartVal_2 = #{sessionScope['dataConnectivityftpValArr_2']};
	 if(ftpdownloadChartVal_2.length>0){
			document.getElementById("DataConnectivityFTPChartMarket_2").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityFTPChartMarket_2",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
               			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "dcFtp_"+seriesname+","+category;
                          getChartDetails(); 
                      }
                  }
          },
          pointWidth:pointWidth
          }
      }, 
	        series:ftpdownloadChartVal_2,
	        xAxis: {
	                categories: ftpdownloadChartCat_2
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9'
	             ],
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true
	            }],
	            credits: {
	            enabled: false
	        }
	    });
	});

$(function () {
	 var ftpdownloadChartCat_3 = #{sessionScope['dataConnectivityftpDownloadArr_3']};
	 var ftpdownloadChartVal_3 = #{sessionScope['dataConnectivityftpValArr_3']};
	 if(ftpdownloadChartVal_3.length>0){
			document.getElementById("DataConnectivityFTPChartMarket_3").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityFTPChartMarket_3",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
               			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "dcFtp_"+seriesname+","+category;
                          getChartDetails(); 
                      }
                  }
          },
          pointWidth:pointWidth
          }
      }, 
	        series:ftpdownloadChartVal_3,
	        xAxis: {
	                categories: ftpdownloadChartCat_3
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9'
	             ],
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true
	            }],
	            credits: {
	            enabled: false
	        }
	    });
	});
	
	
$(function () {
	 var ftpuploadChartCat = #{sessionScope['dataConnectivityftpUploadArr_0']};
	 var ftpuploadChartVal = #{sessionScope['dataConnectivityftpUploadValArr_0']};
	 if(ftpuploadChartVal.length>0){
			document.getElementById("DataConnectivityFTPChartTx").style.display="";
			document.getElementById("ftp_Label").style.display="";
	 }	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityFTPChartTx",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
        column: {
            pointPadding: 0.0,
            borderWidth: 0
        },
        series: {
            cursor: 'pointer',
            point: {
                events: {
                    click: function() {
             			var myObj = this; 
                        var seriesname = this.series.name;
                        var category = this.category;
                        if(seriesname.indexOf("wifi")==0){
                            seriesname = seriesname.substring(5,seriesname.length);
                       }
                        document.getElementById("hiddenValuesToGetForChart").value = "dcFtp_"+seriesname+","+category;
                        getChartDetails(); 
                    }
                }
        },
        pointWidth:pointWidth
        }
    }, 
	        series:ftpuploadChartVal,
	        xAxis: {
	                categories: ftpuploadChartCat
	        },
	        tooltip: {
            formatter: function() {
                var s;
                    s = this.series.name + ' : ' +
                        this.x  +': '+ this.y;
                return s;
            }
        },
        colors: [
                 '#001780',
                 '#4D6DFF',
                 '#002FFF',
                 '#005A4C',
                 '#1B795D',
                 '#C9DEB9'
             ],
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true
	            }],
	            credits: {
	            enabled: false
	        },
	    });
	});


$(function () {
	 var ftpuploadChartCat_1 = #{sessionScope['dataConnectivityftpUploadArr_1']};
	 var ftpuploadChartVal_1 = #{sessionScope['dataConnectivityftpUploadValArr_1']};
	 if(ftpuploadChartVal_1.length>0){
			document.getElementById("DataConnectivityFTPChartMarket_1Tx").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityFTPChartMarket_1Tx",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
        column: {
            pointPadding: 0.0,
            borderWidth: 0
        },
        series: {
            cursor: 'pointer',
            point: {
                events: {
                    click: function() {
             			var myObj = this; 
                        var seriesname = this.series.name;
                        var category = this.category;
                        if(seriesname.indexOf("wifi")==0){
                            seriesname = seriesname.substring(5,seriesname.length);
                       }
                        document.getElementById("hiddenValuesToGetForChart").value = "dcFtp_"+seriesname+","+category;
                        getChartDetails(); 
                    }
                }
        },
        pointWidth:pointWidth
        }
    }, 
	        series:ftpuploadChartVal_1,
	        xAxis: {
	                categories: ftpuploadChartCat_1
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true
	            }],
	            credits: {
	            enabled: false
	        }
	    });
	});



$(function () {
	 var ftpuploadChartCat_2 = #{sessionScope['dataConnectivityftpUploadArr_2']};
	 var ftpuploadChartVal_2 = #{sessionScope['dataConnectivityftpUploadValArr_2']};
	 if(ftpuploadChartVal_2.length>0){
			document.getElementById("DataConnectivityFTPChartMarket_2Tx").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityFTPChartMarket_2Tx",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
        column: {
            pointPadding: 0.0,
            borderWidth: 0
        },
        series: {
            cursor: 'pointer',
            point: {
                events: {
                    click: function() {
             			var myObj = this; 
                        var seriesname = this.series.name;
                        var category = this.category;
                        if(seriesname.indexOf("wifi")==0){
                            seriesname = seriesname.substring(5,seriesname.length);
                       }
                        document.getElementById("hiddenValuesToGetForChart").value = "dcFtp_"+seriesname+","+category;
                        getChartDetails(); 
                    }
                }
        },
        pointWidth:pointWidth
        }
    }, 
	        series:ftpuploadChartVal_2,
	        xAxis: {
	                categories: ftpuploadChartCat_2
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9'
	             ],
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true
	            }],
	            credits: {
	            enabled: false
	        }
	    });
	});

$(function () {
	 var ftpuploadChartCat_3 = #{sessionScope['dataConnectivityftpUploadArr_3']};
	 var ftpuploadChartVal_3 = #{sessionScope['dataConnectivityftpUploadValArr_3']};
	 if(ftpuploadChartVal_3.length>0){
			document.getElementById("DataConnectivityFTPChartMarket_3Tx").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityFTPChartMarket_3Tx",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
        column: {
            pointPadding: 0.0,
            borderWidth: 0
        },
        series: {
            cursor: 'pointer',
            point: {
                events: {
                    click: function() {
             			var myObj = this; 
                        var seriesname = this.series.name;
                        var category = this.category;
                        if(seriesname.indexOf("wifi")==0){
                            seriesname = seriesname.substring(5,seriesname.length);
                       }
                        document.getElementById("hiddenValuesToGetForChart").value = "dcFtp_"+seriesname+","+category;
                        getChartDetails(); 
                    }
                }
        },
        pointWidth:pointWidth
        }
    }, 
	        series:ftpuploadChartVal_3,
	        xAxis: {
	                categories: ftpuploadChartCat_3
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9'
	             ],
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true
	            }],
	            credits: {
	            enabled: false
	        }
	    });
	});
$(function () {
	 var udpdownloadChartCat = #{sessionScope['dataConnectivityudpDownloadArr_0']};
	 var udpdownloadChartVal = #{sessionScope['dataConnectivityudpValArr_0']};
	 if(udpdownloadChartVal.length>0){
			document.getElementById("DataConnectivityUDPChart").style.display="";
			document.getElementById("udp_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityUDPChart",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityUDPChart table data----");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "dcUdp_"+seriesname+","+category;
	                           // alert(document.getElementById("hiddenValuesToGetForChart").value);
	                            getChartDetailsDC(); 
	                        }
	                    }
	                }
	            }
	        },	        
	        series:udpdownloadChartVal,
	        xAxis: {
	                categories: udpdownloadChartCat
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#263780',
	                 '#0025CC',
	                 '#8050FF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B',
	                 '#D86E52',
	                 '#FE7100'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	            enabled: false
	        }
	    });
	});

$(function () {
	  var udpdownloadChartCat1 = #{sessionScope['dataConnectivityudpDownloadArr_1']};
	  var udpdownloadChartVal1 = #{sessionScope['dataConnectivityudpValArr_1']};
	  if(udpdownloadChartVal1.length>0){
			document.getElementById("DataConnectivityUDPChartMarket_1").style.display="";
			document.getElementById("udp_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityUDPChartMarket_1",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityUDPChart table data----");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "dcUdp_"+seriesname+","+category;
	                           // alert(document.getElementById("hiddenValuesToGetForChart").value);
	                            getChartDetailsDC(); 
	                        }
	                    }
	                }
	            }
	        },	        
	        series:udpdownloadChartVal1,
	        xAxis: {
	                categories: udpdownloadChartCat1
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#263780',
	                 '#0025CC',
	                 '#8050FF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B',
	                 '#D86E52',
	                 '#FE7100'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	            enabled: false
	        }
	    });
	});

$(function () {
	 var udpdownloadChartCat2 = #{sessionScope['dataConnectivityudpDownloadArr_2']};
	 var udpdownloadChartVal2 = #{sessionScope['dataConnectivityudpValArr_2']};
	 if(udpdownloadChartVal2.length>0){
			document.getElementById("DataConnectivityUDPChartMarket_2").style.display="";
			document.getElementById("udp_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityUDPChartMarket_2",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityUDPChart table data----");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "dcUdp_"+seriesname+","+category;
	                           // alert(document.getElementById("hiddenValuesToGetForChart").value);
	                            getChartDetailsDC(); 
	                        }
	                    }
	                }
	            }
	        },	        
	        series:udpdownloadChartVal2,
	        xAxis: {
	                categories: udpdownloadChartCat2
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#263780',
	                 '#0025CC',
	                 '#8050FF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B',
	                 '#D86E52',
	                 '#FE7100'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	            enabled: false
	        }
	    });
	});


$(function () {
	 var udpdownloadChartCat3 = #{sessionScope['dataConnectivityudpDownloadArr_3']};
	 udpdownloadChartVal3 = #{sessionScope['dataConnectivityudpValArr_3']};
	 if(udpdownloadChartVal3.length>0){
			document.getElementById("DataConnectivityUDPChartMarket_3").style.display="";
			document.getElementById("udp_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityUDPChartMarket_3",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityUDPChart table data----");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "dcUdp_"+seriesname+","+category;
	                           // alert(document.getElementById("hiddenValuesToGetForChart").value);
	                            getChartDetailsDC(); 
	                        }
	                    }
	                }
	            }
	        },	        
	        series:udpdownloadChartVal3,
	        xAxis: {
	                categories: udpdownloadChartCat3
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#263780',
	                 '#0025CC',
	                 '#8050FF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B',
	                 '#D86E52',
	                 '#FE7100'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	            enabled: false
	        }
	    });
	});
	
	
/*********************************************************/

/**************/

$(function () {
	  var voipChartCat = #{sessionScope['dataConnectivityVoipDownloadArr_0']};
	  var voipChartVal = #{sessionScope['dataConnectivityVoipValArr_0']};
	  if(voipChartVal.length>0){
	 		document.getElementById("voipFirstChart").style.display="";
	 		document.getElementById("voip_Label").style.display="";
	 }	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "voipFirstChart",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "dcVoip_"+seriesname+","+category;
	                            getChartDetailsDC(); 
	                        }
	                    }
	                }
	            }
	        },	        
	        series:voipChartVal,
	        xAxis: {
	                categories: voipChartCat
	        } ,   
	        colors: [
	 	                 '#001780',
		                 '#4D6DFF',
		                 '#002FFF',
		                 '#263780',
		                 '#0025CC',
		                 '#8050FF',
                       '#922FFF',
                       '#7A3780',
		                 '#005A4C',
		                 '#1B795D',
		                 '#C9DEB9',
		                 '#FFC48B',
		                 '#D86E52',
                       '#826447',
                       '#64DEB9',
		                 '#FE7100'
		             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});



$(function () {
	 var voipChartCat1 = #{sessionScope['dataConnectivityVoipDownloadArr_1']};
	 var voipChartVal1 = #{sessionScope['dataConnectivityVoipValArr_1']};
	 if(voipChartVal1.length>0){
			document.getElementById("voipFirstChartMarket_1").style.display="";
			document.getElementById("voip_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "voipFirstChartMarket_1",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "dcVoip_"+seriesname+","+category;
	                            getChartDetailsDC(); 
	                        }
	                    }
	                }
	            }
	        },	        
	        series:voipChartVal1,
	        xAxis: {
	                categories: voipChartCat1
	        },   
	        colors: [
		 	                 '#001780',
			                 '#4D6DFF',
			                 '#002FFF',
			                 '#263780',
			                 '#0025CC',
			                 '#8050FF',
	                         '#922FFF',
	                         '#7A3780',
			                 '#005A4C',
			                 '#1B795D',
			                 '#C9DEB9',
			                 '#FFC48B',
			                 '#D86E52',
	                         '#826447',
	                         '#64DEB9',
			                 '#FE7100'
			             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});



$(function () {
	 var voipChartCat2 = #{sessionScope['dataConnectivityVoipDownloadArr_2']};
	 var voipChartVal2 = #{sessionScope['dataConnectivityVoipValArr_2']};
	 if(voipChartVal2.length>0){
			document.getElementById("voipFirstChartMarket_2").style.display="";
			document.getElementById("voip_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "voipFirstChartMarket_2",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "dcVoip_"+seriesname+","+category;
	                            getChartDetailsDC(); 
	                        }
	                    }
	                }
	            }
	        },	        
	        series:voipChartVal2,
	        xAxis: {
	                categories: voipChartCat2
	        },  
	         colors: [
		 	                 '#001780',
			                 '#4D6DFF',
			                 '#002FFF',
			                 '#263780',
			                 '#0025CC',
			                 '#8050FF',
	                         '#922FFF',
	                         '#7A3780',
			                 '#005A4C',
			                 '#1B795D',
			                 '#C9DEB9',
			                 '#FFC48B',
			                 '#D86E52',
	                         '#826447',
	                         '#64DEB9',
			                 '#FE7100'
			             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});


$(function () {
	 var voipChartCat3 = #{sessionScope['dataConnectivityVoipDownloadArr_3']};
	 var voipChartVal3 = #{sessionScope['dataConnectivityVoipValArr_3']};
	 if(voipChartVal3.length>0){
			document.getElementById("voipFirstChartMarket_3").style.display="";
			document.getElementById("voip_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "voipFirstChartMarket_3",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "dcVoip_"+seriesname+","+category;
	                            getChartDetailsDC(); 
	                        }
	                    }
	                }
	            }
	        },	        
	        series:voipChartVal3,
	        xAxis: {
	                categories: voipChartCat3
	        },  
	         colors: [
		 	                 '#001780',
			                 '#4D6DFF',
			                 '#002FFF',
			                 '#263780',
			                 '#0025CC',
			                 '#8050FF',
	                         '#922FFF',
	                         '#7A3780',
			                 '#005A4C',
			                 '#1B795D',
			                 '#C9DEB9',
			                 '#FFC48B',
			                 '#D86E52',
	                         '#826447',
	                         '#64DEB9',
			                 '#FE7100'
			             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});
/**/
//voice and data


$(function () {
	 var tcpDrivedownloadChartCat = #{sessionScope['dataConnectivitytcpDriveDownloadArr_0']};
	 var tcpDrivedownloadChartVal = #{sessionScope['dataConnectivitytcpDriveValArr_0']};
	 if(tcpDrivedownloadChartVal.length>0){
			document.getElementById("voiceDataFirstChart").style.display="";
			document.getElementById("voiceDataTcp_Label").style.display="";
	}	 
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "voiceDataFirstChart",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("voiceDataFirstChart table data");
              			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "vdTcp_"+seriesname+","+category;
                          getChartDetailsDC();
                      }
                  }
              }
          }
      },
      series: tcpDrivedownloadChartVal,
      xAxis: {
              categories: tcpDrivedownloadChartCat
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#005A4C',
               '#1B795D',
           ],
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true,
          }],
          credits: {
              enabled: false
          }
  });
});



$(function () {
	 var tcpDrivedownloadChartCat1 = #{sessionScope['dataConnectivitytcpDriveDownloadArr_1']};
	 var tcpDrivedownloadChartVal1 = #{sessionScope['dataConnectivitytcpDriveValArr_1']};
	 if(tcpDrivedownloadChartVal1.length>0){
			document.getElementById("voiceDataFirstChartMarket_1").style.display="";
			document.getElementById("voiceDataTcp_Label").style.display="";
	}	 
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "voiceDataFirstChartMarket_1",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("voiceDataFirstChart table data");
              			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "vdTcp_"+seriesname+","+category;
                          getChartDetailsDC();
                      }
                  }
              }
          }
      },
      series: tcpDrivedownloadChartVal1,
      xAxis: {
              categories: tcpDrivedownloadChartCat1
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#005A4C',
               '#1B795D',
           ],
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true,
          }],
          credits: {
              enabled: false
          }
  });
});



$(function () {
	 var tcpDrivedownloadChartCat2= #{sessionScope['dataConnectivitytcpDriveDownloadArr_2']};
	 var tcpDrivedownloadChartVal2 = #{sessionScope['dataConnectivitytcpDriveValArr_2']};
	 if(tcpDrivedownloadChartVal2.length>0){
			document.getElementById("voiceDataFirstChartMarket_2").style.display="";
			document.getElementById("voiceDataTcp_Label").style.display="";
	 }	 
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "voiceDataFirstChartMarket_2",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("voiceDataFirstChart table data");
              			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "vdTcp_"+seriesname+","+category;
                          getChartDetailsDC();
                      }
                  }
              }
          }
      },
      series: tcpDrivedownloadChartVal2,
      xAxis: {
              categories: tcpDrivedownloadChartCat2
      },
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#005A4C',
               '#1B795D',
           ],
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true,
          }],
          credits: {
              enabled: false
          }
  });
});


$(function () {
	 var tcpDrivedownloadChartCat3 = #{sessionScope['dataConnectivitytcpDriveDownloadArr_3']};
	 var tcpDrivedownloadChartVal3 = #{sessionScope['dataConnectivitytcpDriveValArr_3']};
	 if(tcpDrivedownloadChartVal3.length>0){
			document.getElementById("voiceDataFirstChartMarket_3").style.display="";
			document.getElementById("voiceDataTcp_Label").style.display="";
	}	 
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "voiceDataFirstChartMarket_3",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("voiceDataFirstChart table data");
              			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "vdTcp_"+seriesname+","+category;
                          getChartDetailsDC();
                      }
                  }
              }
          }
      },
      series: tcpDrivedownloadChartVal3,
      xAxis: {
              categories: tcpDrivedownloadChartCat3
      },
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#005A4C',
               '#1B795D',
           ],
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true,
          }],
          credits: {
              enabled: false
          }
  });
});

/******************************************/


$(function () {
	 var tcpdownloadChartCat_tcpLte = #{sessionScope['dataConnectivitytcpDownloadArrLte_0']};
	 var tcpdownloadChartVal_tcpLte = #{sessionScope['dataConnectivitytcpValArrLte_0']};
	 if(tcpdownloadChartVal_tcpLte.length>0){
			document.getElementById("DataConnectivityFirstChart_tcp").style.display="";
			document.getElementById("tcpLte_Label").style.display="";
	}
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "DataConnectivityFirstChart_tcp",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("DataConnectivityFirstChart_tcp table data");
              			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "lteTcp_"+seriesname+","+category;
                          getChartDetailsDCLte();
                      }
                  }
              }
          }
      },        
      series:tcpdownloadChartVal_tcpLte,
      xAxis: {
              categories: tcpdownloadChartCat_tcpLte
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#002FFF',
               '#005A4C',
               '#1B795D',
               '#C9DEB9',
               '#FFC48B'
           ],
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true
          }],
          credits: {
              enabled: false
          }
  });
});



$(function () {
	 var tcpdownloadChartCat_tcpLte1 = #{sessionScope['dataConnectivitytcpDownloadArrLte_1']};
	 var tcpdownloadChartVal_tcpLte1 = #{sessionScope['dataConnectivitytcpValArrLte_1']};
	 if(tcpdownloadChartVal_tcpLte1.length>0){
			document.getElementById("DataConnectivityFirstChart_tcpMarket_1").style.display="";
			document.getElementById("tcpLte_Label").style.display="";
	}	 
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "DataConnectivityFirstChart_tcpMarket_1",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("DataConnectivityFirstChart_tcp table data");
              			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "lteTcp_"+seriesname+","+category;
                          getChartDetailsDCLte();
                      }
                  }
              }
          }
      },        
      series:tcpdownloadChartVal_tcpLte1,
      xAxis: {
              categories: tcpdownloadChartCat_tcpLte1
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#002FFF',
               '#005A4C',
               '#1B795D',
               '#C9DEB9',
               '#FFC48B'
           ],
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true
          }],
          credits: {
              enabled: false
          }
  });
});



$(function () {
	 var tcpdownloadChartCat_tcpLte2 = #{sessionScope['dataConnectivitytcpDownloadArrLte_2']};
	 var tcpdownloadChartVal_tcpLte2 = #{sessionScope['dataConnectivitytcpValArrLte_2']};
	 if(tcpdownloadChartVal_tcpLte2.length>0){
			document.getElementById("DataConnectivityFirstChart_tcpMarket_2").style.display="";
			document.getElementById("tcpLte_Label").style.display="";
	}	 
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "DataConnectivityFirstChart_tcpMarket_2",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("DataConnectivityFirstChart_tcp table data");
              			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "lteTcp_"+seriesname+","+category;
                          getChartDetailsDCLte();
                      }
                  }
              }
          }
      },        
      series:tcpdownloadChartVal_tcpLte2,
      xAxis: {
              categories: tcpdownloadChartCat_tcpLte2
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#002FFF',
               '#005A4C',
               '#1B795D',
               '#C9DEB9',
               '#FFC48B'
           ],
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true
          }],
          credits: {
              enabled: false
          }
  });
});



$(function () {
	 var tcpdownloadChartCat_tcpLte3 = #{sessionScope['dataConnectivitytcpDownloadArrLte_3']};
	 var tcpdownloadChartVal_tcpLte3 = #{sessionScope['dataConnectivitytcpValArrLte_3']};
	 if(tcpdownloadChartVal_tcpLte3.length>0){
			document.getElementById("DataConnectivityFirstChart_tcpMarket_3").style.display="";
			document.getElementById("tcpLte_Label").style.display="";
	}	 
  var chart = new Highcharts.Chart({
      chart: {
          renderTo: "DataConnectivityFirstChart_tcpMarket_3",
          type: "column"
      },
      title: {
      	text: 'Airometric'
      },
      plotOptions: {
          column: {
              pointPadding: 0.0,
              borderWidth: 0
          },
          series: {
              cursor: 'pointer',
              point: {
                  events: {
                      click: function() {
                      	//alert("DataConnectivityFirstChart_tcp table data");
              			var myObj = this; 
                          var seriesname = this.series.name;
                          var category = this.category;
                          if(seriesname.indexOf("wifi")==0){
                              seriesname = seriesname.substring(5,seriesname.length);
                         }
                          document.getElementById("hiddenValuesToGetForChart").value = "lteTcp_"+seriesname+","+category;
                          getChartDetailsDCLte();
                      }
                  }
              }
          }
      },        
      series:tcpdownloadChartVal_tcpLte3,
      xAxis: {
              categories: tcpdownloadChartCat_tcpLte3
      },
      colors: [
               '#001780',
               '#4D6DFF',
               '#002FFF',
               '#005A4C',
               '#1B795D',
               '#C9DEB9',
               '#FFC48B'
           ],
      tooltip: {
          formatter: function() {
              var s;
                  s = this.series.name + ' : ' +
                      this.x  +': '+ this.y;
              return s;
          }
      },
       yAxis: [{ // Primary yAxis
              labels: {
                  format: '{value}Mbps',
                  style: {
                      color: '#89A54E'
                  }
              },
              title: {
                  text: 'Speed',
                  style: {
                      color: '#89A54E'
                  }
              }
          }, { // Secondary yAxis
              title: {
                  text: 'Strength',
                  style: {
                      color: '#4572A7'
                  }
              },
              labels: {
                  format: '{value} dbm',
                  style: {
                      color: '#4572A7'
                  }
              },
              opposite: true
          }],
          credits: {
              enabled: false
          }
  });
});


$(function () {
	 var udpdownloadChartCat_udpLte = #{sessionScope['dataConnectivityudpDownloadArrLte_0']};
	 var udpdownloadChartVal_udpLte = #{sessionScope['dataConnectivityudpValArrLte_0']};
	 if(udpdownloadChartVal_udpLte.length>0){
			document.getElementById("DataConnectivityUDPChart_udp").style.display="";
			document.getElementById("udpLte_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityUDPChart_udp",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityUDPChart_udp table data");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "lteUdp_"+seriesname+","+category;
	                            getChartDetailsDCLte();
	                        }
	                    }
	                }
	            }
	        },	        
	        series:udpdownloadChartVal_udpLte,
	        xAxis: {
	                categories: udpdownloadChartCat_udpLte
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#263780',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B',
	                 '#D86E52'
	             ],
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});


$(function () {
	 var udpdownloadChartCat_udpLte1 = #{sessionScope['dataConnectivityudpDownloadArrLte_1']};
	 var udpdownloadChartVal_udpLte1 = #{sessionScope['dataConnectivityudpValArrLte_1']};
	 if(udpdownloadChartVal_udpLte1.length>0){
			document.getElementById("DataConnectivityUDPChart_udpMarket_1").style.display="";
			document.getElementById("udpLte_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityUDPChart_udpMarket_1",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityUDPChart_udp table data");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "lteUdp_"+seriesname+","+category;
	                            getChartDetailsDCLte();
	                        }
	                    }
	                }
	            }
	        },	        
	        series:udpdownloadChartVal_udpLte1,
	        xAxis: {
	                categories: udpdownloadChartCat_udpLte1
	        },
	         colors: [
		                 '#001780',
		                 '#4D6DFF',
		                 '#002FFF',
		                 '#263780',
		                 '#005A4C',
		                 '#1B795D',
		                 '#C9DEB9',
		                 '#FFC48B',
		                 '#D86E52'
		             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});


$(function () {
	 var udpdownloadChartCat_udpLte2 = #{sessionScope['dataConnectivityudpDownloadArrLte_2']};
	 var udpdownloadChartVal_udpLte2 = #{sessionScope['dataConnectivityudpValArrLte_2']};
	 if(udpdownloadChartVal_udpLte2.length>0){
			document.getElementById("DataConnectivityUDPChart_udpMarket_2").style.display="";
			document.getElementById("udpLte_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityUDPChart_udpMarket_2",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityUDPChart_udp table data");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "lteUdp_"+seriesname+","+category;
	                            getChartDetailsDCLte();
	                        }
	                    }
	                }
	            }
	        },	        
	        series:udpdownloadChartVal_udpLte2,
	        xAxis: {
	                categories: udpdownloadChartCat_udpLte2
	        }, 
	        colors: [
		                 '#001780',
		                 '#4D6DFF',
		                 '#002FFF',
		                 '#263780',
		                 '#005A4C',
		                 '#1B795D',
		                 '#C9DEB9',
		                 '#FFC48B',
		                 '#D86E52'
		             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});


$(function () {
	 var udpdownloadChartCat_udpLte3 = #{sessionScope['dataConnectivityudpDownloadArrLte_3']};
	 var udpdownloadChartVal_udpLte3 = #{sessionScope['dataConnectivityudpValArrLte_3']};
	 if(udpdownloadChartVal_udpLte3.length>0){
			document.getElementById("DataConnectivityUDPChart_udpMarket_3").style.display="";
			document.getElementById("udpLte_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityUDPChart_udpMarket_3",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityUDPChart_udp table data");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "lteUdp_"+seriesname+","+category;
	                            getChartDetailsDCLte();
	                        }
	                    }
	                }
	            }
	        },	        
	        series:udpdownloadChartVal_udpLte3,
	        xAxis: {
	                categories: udpdownloadChartCat_udpLte3
	        }, 
	        colors: [
		                 '#001780',
		                 '#4D6DFF',
		                 '#002FFF',
		                 '#263780',
		                 '#005A4C',
		                 '#1B795D',
		                 '#C9DEB9',
		                 '#FFC48B',
		                 '#D86E52'
		             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});




$(function () {

	 var udpdownloadChartCat_udpLte = #{sessionScope['dataConnectivityudpDownloadArrLte_0']};
	 var udpdownloadChartVal_udpLte = #{sessionScope['dataConnectivityudpValArrLte_0']};
	 if(udpdownloadChartVal_udpLte.length>0){
			document.getElementById("DataConnectivityUDPChart_udp").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityUDPChart_udp",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityUDPChart_udp table data");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "lteUdp_"+seriesname+","+category;
	                            getChartDetailsDCLte();
	                        }
	                    }
	                }
	            }
	        },	        
	        series:udpdownloadChartVal_udpLte,
	        xAxis: {
	                categories: udpdownloadChartCat_udpLte
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         colors: [
		                 '#001780',
		                 '#4D6DFF',
		                 '#002FFF',
		                 '#263780',
		                 '#005A4C',
		                 '#1B795D',
		                 '#C9DEB9',
		                 '#FFC48B',
		                 '#D86E52'
		             ],
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}Mbps',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Speed',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true,
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});


$(function () {
	 var dnsdownloadChartCat_DnsLte = #{sessionScope['dataConnectivitydnsDownloadArrLte_0']};
	 var dnsdownloadChartVal_DnsLte = #{sessionScope['dataConnectivitydnsValArrLte_0']};
	 if(dnsdownloadChartVal_DnsLte.length>0){
			document.getElementById("DataConnectivityDNSChart_dns").style.display="";
			document.getElementById("dnsLte_Label").style.display="";
	}
	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityDNSChart_dns",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityDNSChart_dns table data");
               				var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "lteDns_"+seriesname+","+category;
	                            getChartDetailsDCLte();
	                        }
	                    }
	                }
	            }
	        },	        
	        series:dnsdownloadChartVal_DnsLte,
	        xAxis: {
	                categories: dnsdownloadChartCat_DnsLte
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                	 text: 'Delay ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true, 
	                max:-10
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});


$(function () {
	 var dnsdownloadChartCat_DnsLte1 = #{sessionScope['dataConnectivitydnsDownloadArrLte_1']};
	 var dnsdownloadChartVal_DnsLte1 = #{sessionScope['dataConnectivitydnsValArrLte_1']};
	 if(dnsdownloadChartVal_DnsLte1.length>0){
			document.getElementById("DataConnectivityDNSChart_dnsMarket_1").style.display="";
			document.getElementById("dnsLte_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityDNSChart_dnsMarket_1",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityDNSChart_dns table data");
               				var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "lteDns_"+seriesname+","+category;
	                            getChartDetailsDCLte();
	                        }
	                    }
	                }
	            }
	        },	        
	        series:dnsdownloadChartVal_DnsLte1,
	        xAxis: {
	                categories: dnsdownloadChartCat_DnsLte1
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                	 text: 'Delay ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true, 
	                max:-10
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});


$(function () {
	 var dnsdownloadChartCat_DnsLte2 = #{sessionScope['dataConnectivitydnsDownloadArrLte_2']};
	 var dnsdownloadChartVal_DnsLte2 = #{sessionScope['dataConnectivitydnsValArrLte_2']};
	 if(dnsdownloadChartVal_DnsLte2.length>0){
			document.getElementById("DataConnectivityDNSChart_dnsMarket_2").style.display="";
			document.getElementById("dnsLte_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityDNSChart_dnsMarket_2",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityDNSChart_dns table data");
               				var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "lteDns_"+seriesname+","+category;
	                            getChartDetailsDCLte();
	                        }
	                    }
	                }
	            }
	        },	        
	        series:dnsdownloadChartVal_DnsLte2,
	        xAxis: {
	                categories: dnsdownloadChartCat_DnsLte2
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                	 text: 'Delay ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true, 
	                max:-10
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});


$(function () {
	 var dnsdownloadChartCat_DnsLte3 = #{sessionScope['dataConnectivitydnsDownloadArrLte_3']};
	 var dnsdownloadChartVal_DnsLte3 = #{sessionScope['dataConnectivitydnsValArrLte_3']};
	 if(dnsdownloadChartVal_DnsLte3.length>0){
			document.getElementById("DataConnectivityDNSChart_dnsMarket_3").style.display="";
			document.getElementById("dnsLte_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityDNSChart_dnsMarket_3",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityDNSChart_dns table data");
               				var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value = "lteDns_"+seriesname+","+category;
	                            getChartDetailsDCLte();
	                        }
	                    }
	                }
	            }
	        },	        
	        series:dnsdownloadChartVal_DnsLte3,
	        xAxis: {
	                categories: dnsdownloadChartCat_DnsLte3
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            }
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Delay ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true, 
	                max:-10
	            }],
	            credits: {
	                enabled: false
	            }
	    });
	});



function vQsignalStrengthLte(){
		var vqSignalStrengthCatLte = #{sessionScope['vqSignalStrengthCatLte_0']};
		var seriesValueLte = #{sessionScope['vqSignalStrengthvalsLte_0']};
		 if(seriesValueLte.length>0){
		   		document.getElementById("voiceQtyThirdChartMarketLte_0").style.display="";
		   		document.getElementById("downLinkVoiceQualityLte_Label").style.display="";
		       }
	    $('#voiceQtyThirdChartMarketLte_0').highcharts({
	        xAxis: {
	            categories: vqSignalStrengthCatLte,
	            title: {
	            text: 'PESQ Values'
	        }
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            },
	            valueSuffix: '%',
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        yAxis: {
	            title: {
	                text: 'PESQ Percentage (%)'
	            },
	            plotLines: [{
	                value: 0,
	                width: 1,
	                color: '#808080'
	            }]
	        },
	        plotOptions: {
	            line: {
	                marker: {
	                    enabled: true
	                }
	            }
	        },
	        colors: [
	                 '#001780',
	                 '#005A4C'
	             ],
	    credits: {
	        enabled: false
	    },
	       
	        series:seriesValueLte
	    });

	    vqSignalStrengthCatLte = #{sessionScope['vqSignalStrengthCatLte_1']};
	     seriesValueLte = #{sessionScope['vqSignalStrengthvalsLte_1']};
		 if(seriesValueLte.length>0){
		   		document.getElementById("voiceQtyThirdChartMarketLte_1").style.display="";
		   		document.getElementById("downLinkVoiceQualityLte_Label").style.display="";
		       }
	    $('#voiceQtyThirdChartMarketLte_1').highcharts({
	        xAxis: {
	            categories: vqSignalStrengthCatLte,
	            title: {
	            text: 'PESQ Values'
	        }
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            },
	            valueSuffix: '%',
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        yAxis: {
	            title: {
	                text: 'PESQ Percentage (%)'
	            },
	            plotLines: [{
	                value: 0,
	                width: 1,
	                color: '#808080'
	            }]
	        },
	        colors: [
	                 '#001780',
	                 '#005A4C'
	             ],
	        plotOptions: {
	            line: {
	                marker: {
	                    enabled: true
	                }
	            }
	        },
	        colors: [
	                 '#001780',
	                 '#005A4C'
	             ],
	    credits: {
	        enabled: false
	    },
	     
	        series:seriesValueLte
	    });
	    vqSignalStrengthCatLte = #{sessionScope['vqSignalStrengthCatLte_2']};
		 seriesValueLte = #{sessionScope['vqSignalStrengthvalsLte_2']};

		 if(seriesValueLte.length>0){
		   		document.getElementById("voiceQtyThirdChartMarketLte_2").style.display="";
		   		document.getElementById("downLinkVoiceQualityLte_Label").style.display="";
		       }
	    $('#voiceQtyThirdChartMarketLte_2').highcharts({
	        xAxis: {
	            categories: vqSignalStrengthCatLte,
	            title: {
	            text: 'PESQ Values'
	        }
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        yAxis: {
	            title: {
	                text: 'PESQ Percentage (%)'
	            },
	            plotLines: [{
	                value: 0,
	                width: 1,
	                color: '#808080'
	            }]
	        },
	        plotOptions: {
	            line: {
	                marker: {
	                    enabled: true
	                }
	            }
	        },
	        colors: [
	                 '#001780',
	                 '#005A4C'
	             ],
	        colors: [
	                 '#001780',
	                 '#005A4C'
	             ],
	    credits: {
	        enabled: false
	    },
	        tooltip: {
	            valueSuffix: '%',
	                
	        },
	        series:seriesValueLte
	    });
	    vqSignalStrengthCatLte = #{sessionScope['vqSignalStrengthCatLte_3']};
		 seriesValueLte = #{sessionScope['vqSignalStrengthvalsLte_3']};
		 if(seriesValueLte.length>0){
		   		document.getElementById("voiceQtyThirdChartMarketLte_3").style.display="";
		   		document.getElementById("downLinkVoiceQualityLte_Label").style.display="";
		       }
	    $('#voiceQtyThirdChartMarketLte_3').highcharts({
	        xAxis: {
	            categories: vqSignalStrengthCatLte,
	            title: {
	            text: 'PESQ Values'
	        }
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            },
	            valueSuffix: '%',
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        yAxis: {
	            title: {
	                text: 'PESQ Percentage (%)'
	            },
	            plotLines: [{
	                value: 0,
	                width: 1,
	                color: '#808080'
	            }]
	        },
	        colors: [
	                 '#001780',
	                 '#005A4C'
	             ],
	        plotOptions: {
	            line: {
	                marker: {
	                    enabled: true
	                }
	            }
	        },
	    credits: {
	        enabled: false
	    },
	        series:seriesValueLte
	    });
	    
	}
/************************/


$(function () {
	 var dnsdownloadChartCat = #{sessionScope['dataConnectivitydnsDownloadArr_0']};
	 var dnsdownloadChartVal = #{sessionScope['dataConnectivitydnsValArr_0']};
	 if(dnsdownloadChartVal.length>0){
			document.getElementById("DataConnectivityDNSChart").style.display="";
			document.getElementById("dns_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityDNSChart",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityDNSChart table data");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value ="dcDns_"+ seriesname+","+category;
	                            getChartDetailsDC(); 
	  				        }
	                    }
	                }
	            }
	        },	        
	        series:dnsdownloadChartVal,
	        xAxis: {
	                categories: dnsdownloadChartCat
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#263780',
	                 '#0025CC',
	                 '#8050FF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B',
	                 '#D86E52',
	                 '#FE7100'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            },
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                	text: 'Delay ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true, 
	                max:-10
	            }],
	            credits: {
	            enabled: false
	        },
	        credits: {
	            enabled: false
	        }
	    });
	});



$(function () {
	 var dnsdownloadChartCat1 = #{sessionScope['dataConnectivitydnsDownloadArr_1']};
	 var dnsdownloadChartVal1 = #{sessionScope['dataConnectivitydnsValArr_1']};
	 if(dnsdownloadChartVal1.length>0){
			document.getElementById("DataConnectivityDNSChartMarket_1").style.display="";
			document.getElementById("dns_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityDNSChartMarket_1",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityDNSChart table data");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value ="dcDns_"+ seriesname+","+category;
	                            getChartDetailsDC(); 
	  				        }
	                    }
	                }
	            }
	        },	        
	        series:dnsdownloadChartVal1,
	        xAxis: {
	                categories: dnsdownloadChartCat1
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#263780',
	                 '#0025CC',
	                 '#8050FF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B',
	                 '#D86E52',
	                 '#FE7100'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            },
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                	text: 'Delay ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true, 
	                max:-10
	            }],
	            credits: {
	            enabled: false
	        },
	        credits: {
	            enabled: false
	        }
	    });
	});


$(function () {
	 var dnsdownloadChartCat2 = #{sessionScope['dataConnectivitydnsDownloadArr_2']};
	 var dnsdownloadChartVal2 = #{sessionScope['dataConnectivitydnsValArr_2']};
	 if(dnsdownloadChartVal2.length>0){
			document.getElementById("DataConnectivityDNSChartMarket_2").style.display="";
			document.getElementById("dns_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityDNSChartMarket_2",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityDNSChart table data");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value ="dcDns_"+ seriesname+","+category;
	                            getChartDetailsDC(); 
	  				        }
	                    }
	                }
	            }
	        },	        
	        series:dnsdownloadChartVal2,
	        xAxis: {
	                categories: dnsdownloadChartCat2
	        },
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            },
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#263780',
	                 '#0025CC',
	                 '#8050FF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B',
	                 '#D86E52',
	                 '#FE7100'
	             ],
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                	text: 'Delay ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true, 
	                max:-10
	            }],
	            credits: {
	            enabled: false
	        },
	        credits: {
	            enabled: false
	        }
	    });
	});


$(function () {
	 var dnsdownloadChartCat3 = #{sessionScope['dataConnectivitydnsDownloadArr_3']};
	 var dnsdownloadChartVal3 = #{sessionScope['dataConnectivitydnsValArr_3']};
	 if(dnsdownloadChartVal3.length>0){
			document.getElementById("DataConnectivityDNSChartMarket_3").style.display="";
			document.getElementById("dns_Label").style.display="";
	}	 
	    var chart = new Highcharts.Chart({
	        chart: {
	            renderTo: "DataConnectivityDNSChartMarket_3",
	            type: "column"
	        },
	        title: {
	        	text: 'Airometric'
	        },
	        plotOptions: {
	            column: {
	                pointPadding: 0.0,
	                borderWidth: 0
	            },
	            series: {
	                cursor: 'pointer',
	                point: {
	                    events: {
	                        click: function() {
	                        	//alert("DataConnectivityDNSChart table data");
	                			var myObj = this; 
	                            var seriesname = this.series.name;
	                            var category = this.category;
	                            if(seriesname.indexOf("wifi")==0){
	                                 seriesname = seriesname.substring(5,seriesname.length);
	                            }
	                            document.getElementById("hiddenValuesToGetForChart").value ="dcDns_"+ seriesname+","+category;
	                            getChartDetailsDC(); 
	  				        }
	                    }
	                }
	            }
	        },	        
	        series:dnsdownloadChartVal3,
	        xAxis: {
	                categories: dnsdownloadChartCat3
	        },
	        colors: [
	                 '#001780',
	                 '#4D6DFF',
	                 '#002FFF',
	                 '#263780',
	                 '#0025CC',
	                 '#8050FF',
	                 '#005A4C',
	                 '#1B795D',
	                 '#C9DEB9',
	                 '#FFC48B',
	                 '#D86E52',
	                 '#FE7100'
	             ],
	        tooltip: {
	            formatter: function() {
	                var s;
	                    s = this.series.name + ' : ' +
	                        this.x  +': '+ this.y;
	                return s;
	            },
	        },
	         yAxis: [{ // Primary yAxis
	                labels: {
	                    format: '{value}',
	                    style: {
	                        color: '#89A54E'
	                    }
	                },
	                title: {
	                    text: 'Delay ms',
	                    style: {
	                        color: '#89A54E'
	                    }
	                }
	            }, { // Secondary yAxis
	                title: {
	                    text: 'Strength',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                labels: {
	                    format: '{value} dbm',
	                    style: {
	                        color: '#4572A7'
	                    }
	                },
	                opposite: true, 
	                max:-10
	            }],
	            credits: {
	            enabled: false
	        },
	        credits: {
	            enabled: false
	        }
	    });
	});




 
 /*******************************************************************************************/
function sendAjaxTogetTest(id){
	var selectedDev = "''";
	var numberOfMar = 0;
	document.getElementById("selectedMarkets").value = "";
	var selectBoxObj = document.getElementById(id);
	for(var i=0;i<selectBoxObj.length;i++){
		var selectedObj = selectBoxObj[i];
		if(selectedObj.selected){
			selectedDev = selectedDev+",'"+selectedObj.value+"'";
			numberOfMar++;
		}
	}
	if(numberOfMar<4){
		document.getElementById("selectedMarkets").value = selectedDev;
		numberTimesCallMade ++;
		document.getElementById("numberTimesCallMade").value = numberTimesCallMade;
		submitApplication();
	}
	else{
			alert("Please select less than three markets");
	}
}
function checkboxFun(status){
	var compareData = '"#{reportBean.ajaxResponseStr}"';
}

function addToCompare(){
var phoneName = document.getElementById("deviceName").value;
document.getElementById("compareDiv_"+compareCount).innerHTML="<h5><b>"+phoneName+"</b></h5>";
compareCount++;
}

function eraseCompare(divId){
	//alert("here");
	document.getElementById(divId).innerHTML = "";
}

function listIterate(){
	//alert("hello");
	//var my list = "#{sessionScope['myList']}";
	//alert(list);
}

function getCompareCount(){
	//alert("compareCount:"+compareCount);
	compareCount++;
	}
function validate(){
	formJsonBeforeSubmit();
	for(var i=0;i<configurationArray.length;i++){
		if(configurationArray[i]!=null){
			return true;
		}
	}
	//alert("Please Select a combination");
	//return false;
	return true;
}


function removeFromDiv(divId) {
		//alert("inside removeFromDiv");
		var htmlVal = "<a href='javascript:removeFromDiv("+divId+");' class='remove'>X</a> ";
		document.getElementById("compareDiv_"+divId).innerHTML =document.getElementById("emptyCompare").innerHTML;
		var obj = jQuery.parseJSON( configurationArray[divId] );
		var needToRemove = obj.marketName;
   		var originalString = mlist;
   		var originalList = new Array();
   		originalList = originalString.split(",");

     	for(var i=0; i < originalList.length; i++)
      	{
			if(originalList[i] == needToRemove)
         	{
          		originalList[i] = null;
         	}
      	}
     	originalString = "";
		for(var i=0; i < originalList.length; i++)
      	{
        	if(originalList[i] != null)
         	{
            	if(originalString == "")
             	{
              		originalString = originalList[i];
             	}
	            else
	            {
	            	originalString = originalString + "," + originalList[i];
	            }
         	}
      	}
	   mlist = originalString;
	   for(var j=0;j<needToRemove.length;j++){
			var indexToRemove = $.inArray(needToRemove[j], allMarkets);
			allMarkets.splice(indexToRemove,1);
	   }
		configurationArray[divId] = null;
}


function gotoWifi() {
	alert("heliio");
}
function gotoNonWifi() {
	alert("heliioss");
}
function checkIfGettinSavedConfig(){
	var isDatafromConfig = #{sessionScope['retrievedConfig']};
	//alert("isDatafromConfig--++--"+isDatafromConfig);
	if(isDatafromConfig ==true){
		document.getElementById("reportSubmit").click();
		pleaseWait(true, true);
	}
}

function setPrecalparam(precalparam){
	document.getElementById('precalparam').value = precalparam;
	 var button = document.getElementById("preCalVQ");
	        	   // alert(button);
	        	    button.click();
	}

function printpdf(){
	document.getElementById('printspacing').style.display='';
	 var vqDownlinkcategories = #{sessionScope['voiceQualityUplinkChartValue_Market_0']};
	 if(vqDownlinkcategories.length>0){
		 document.getElementById('voiceconnectivityspacing').style.display='';
	 }
	 else{
		
		 document.getElementById('panel-test-one').style.display='none';
	 }
	 var callSetupUplinkCategories = #{sessionScope['callSetupUplinkVal_0']};
	 if(callSetupUplinkCategories.length<0){
			document.getElementById('panel-test-two').style.display='none';
		 }
		 else{
			 document.getElementById('connectivitySpacing').style.display='';
			 document.getElementById('retentionSpacing').style.display='';
		 }
	//document.getElementById('panel-test-two').style.display='none';
	
	window.print('pdf');
	
}

/* ]]> */
       </script>
  	<script type="text/javascript">
  	//THIS IS THE EXPAND AND COLLAPSE OF THE COMMENTS
//--><![CDATA[//>
//$(function() {
 //   $("#comment h3.expand").toggler();
  //  $("#comment div.demo").expandAll({trigger: "h3.expand", ref: "h3.expand"});
  //  $("#comment div.other").expandAll({
  //    expTxt : "[Show]", 
  //    cllpsTxt : "[Hide]",
  //    ref : "ul.collapse",
  //    showMethod : "show",
  //    hideMethod : "hide"
    	  //  });
  //  $("#comment div.post").expandAll({
  //    expTxt : "[Read this entry]", 
  //    cllpsTxt : "[Hide this entry]",
  //    ref : "div.collapse", 
  //    localLinks: "p.top a"    
  //  });    
//});
//--><!]]>
</script>
	<style type="text/css">
	.compare{
float: left;
height: 45px;
width:150px;
position: relative;
padding-right: 10px;
border: 1px solid #a9d9e7;
}
	}
	</style>
  </h:head>
  <body id="bodyHTML" onload="intializeSummaryFirstMap();isBothPolaPesq();callSetupUpLink();callDropDownLink();callSetupUpLinkLte();callSetupDownLinkLte();intializeVoiceQuality();intializeVoiceConnectivity(); setValues();intializeDataConnectivity();intializeVoiceDataConnectivity();checkIfGettinSavedConfig();intializeSummaryFirstMap();">
 <ui:insert name="pleaseWait">
	<ui:include src="../..#{request.contextPath}/Pages/pleaseWait/pleaseWait.xhtml"/>
</ui:insert> 
<h:form class="form-horizontal filter-form" role="form" prependId="false" onsubmit="return validate()" enctype="multipart/form-data">
			<input type="hidden" name="reportingParams" id= "reportingParams" value="#{sessionScope['configJsonArray']}" />
			<input type="hidden" name="precalparam" id= "precalparam"  />
 			<input type="hidden" name="allMarkets" id= "allMarkets"  value="#{sessionScope['allMarketsList']}"/>
 			<input type="hidden" name="allDevices" id= "allDevices"  value="#{sessionScope['allDevicesList']}"/>
 			<input type="hidden" name="hiddenTestcaseArr" id= "hiddenTestcaseArr"  value="#{sessionScope['allTestsList']}" />
 			<input type="hidden" name="filesSelectedArr" id= "filesSelectedArr" value="#{sessionScope['allFilesList']}"/>
 			<input type="hidden" name="configJsonArray" id= "configJsonArray"  value="#{sessionScope['configJsonArray']}" />
 			<input type="hidden" name="hiddenValuesToGetForChart" id= "hiddenValuesToGetForChart"  />
 			<input type="hidden" name="hiddenValuesToGetForSecondChart" id= "hiddenValuesToGetForSecondChart"  />
 			<div style="display:none">
 			<h:outputText id="output" value="#{reportBean.graphDetailValues}" /> 
 			<h:outputText id="outputDc" value="#{reportBean.chartDetailsForDC}" /> 
 			<h:outputText id="outputDcLte" value="#{reportBean.chartDetailsForDCForLTE}" />
 			</div>
 			<!-- <input type="hidden" name="hiddenValuesToGetForDcTcpChart" id= "hiddenValuesToGetForDcTcpChart"  /> -->
<a4j:jsFunction 
        name="submitApplication"
        action="#{reportBean.ajaxThroughJavaScript}"
        oncomplete="processData(event.data)" 
        data="#{reportBean.testCaseName}"
        render="testCaseName"
        immediate="true">
        <a4j:param name="param1" assignTo="#{reportBean.deviceName}"/>  
    </a4j:jsFunction>
    <a4j:jsFunction 
        name="getChartDetails"
        action="#{reportBean.getChartDetails}"
        oncomplete="processData(event.data)" 
        data="#{reportBean.testCaseName}"
        render="output"
        immediate="true">
        <a4j:param name="param1" assignTo="#{reportBean.deviceName}"/>  
    </a4j:jsFunction>
    
        <a4j:jsFunction 
        name="getChartDetailsDC"
        action="#{reportBean.getChartDetailsForDC}"
        oncomplete="processDataDc(event.data)" 
        data="#{reportBean.testCaseName}"
        render="outputDc"
        immediate="true">
        <a4j:param name="param1" assignTo="#{reportBean.deviceName}"/>  
    </a4j:jsFunction>
    
    <a4j:jsFunction 
        name="getChartDetailsDCLte"
        action="#{reportBean.getChartDetailsForDCForLTE}"
        oncomplete="processDataDcLte(event.data)" 
        data="#{reportBean.testCaseName}"
        render="outputDcLte"
        immediate="true">
        <a4j:param name="param1" assignTo="#{reportBean.deviceName}"/>  
    </a4j:jsFunction>
    
    <a4j:jsFunction 
        name="checkBocClicked"
        action="#{reportBean.compareCheck}"
        oncomplete="checkboxFun( status)" 
        data="#{reportBean.testCaseName}"
        render="testCaseName"
        immediate="true">
        <a4j:param name="param1" assignTo="#{reportBean.deviceName}"/>  
    </a4j:jsFunction>
	<div id="headerDiv">
    <div class="row header-row">
      <div class="container header">
        <h1 class="pull-left"><h:graphicImage library="images" name="airometric-wireless-logo.jpg" 
         alt="Airometric Wireless" class="img-responsive"/>
		</h1>
        <div class="pull-right headerBtns">
         <h:commandLink id="logOut" action="#{userBean.logoutUser}">		
				<button class="btn btn-xs btn-default" type="button">Logout</button>
		</h:commandLink>
		
		<h:commandLink id="reports" style="position :relative;left:32px;" action="#{reportBean.welcomeReports}" >		
						<h:graphicImage value="../..#{request.contextPath}/resources/images/home-icon.png" width="20" height="20"/>
		</h:commandLink>
        </div>
      </div>
    </div>

     <!-- existing configuration section -->
	<div class="container">
		<div class="filter"> 
    		<div class="row">         
		    	<div class="col-md-2">
		        	<h:outputText value="Existing Configuration" styleClass="fontlabel" />
		       </div>
		       <div style="right: 40px;position: relative;" class="col-md-2">
		       		<h:selectOneListbox class="form-control" id="existingConfigName" name="existingConfigName" 
		               	value="#{reportBean.configName}" title="#{reportBean.configName}" 
		               	onchange="this.title = this.options[this.selectedIndex].text" 
		               	size="1" style="width:165px; height:30px;"  >
		 			<f:selectItem itemValue="Select Configuration" itemLabel="Select Configuration" /> 
		 			<f:selectItems value="#{sessionScope['configurationNameMap']}"/>  
		 	  		</h:selectOneListbox >
		       </div>
<script type="text/javascript">
    var options = document.getElementsByTagName("option");     
    for (var optIndex in options)
    options[optIndex].title = options[optIndex].text;
</script>		       
		       <div style="right: 40px;position: relative;" class="col-md-2">
		 	  		<h:commandButton class="btn btn-success" style="font-size:10px" id="saveConfigs" name="saveConfigs" 
		 	  		  	action="#{reportBean.getConfigurationToSave}" value="Get Saved Configuration" />       
		       </div> 
		       <div style="left: 20px;position: relative;"  class="col-md-2">
					<h:commandLink  class="btn btn-success" style="font-size:10px" id="exportReport"   
						action="#{reportBean.exportReport}" >
						Historical Indices
						</h:commandLink>
		       </div>
		     <div  style="right: 43px;position: relative;" class="col-md-1">
		         <a class="btn btn-success" style="font-size:10px" href="javascript:printpdf()">Download Report</a>
		      </div> 
		       <div style="left: 29px;position: relative;" class="col-md-1">
				       <h:outputText value="Ranges" styleClass="fontlabel"/>
	  		  </div>  
	  		   <div class="col-md-2">
	  		   <h:selectOneListbox class="form-control" id="rangeName" name="devrangeNameiceName" value="#{reportBean.rangeName}" size="1" style="width:100%;height:30px;"  >
 					<f:selectItems value="#{sessionScope['customRangeMap']}" />   
 					 					  							
	  		 </h:selectOneListbox >   
	  		 </div>
 		       <div class="col-md-2">
		       		<h:outputText value="#{reportBean.generatedMapCountLabel}" styleClass="fontlabel" />
		       		<h:outputText value="#{reportBean.generatedMapCount}" styleClass="fontlabel"/>
		       </div>
       		</div>   
       </div> 
    </div>
        <div class="row">
			<h:outputText id="messageId" name="messageId" 
				style="font-family: Arial, Helvetica, Sans-Serif;font-size: 10pt;font-weight: bold;color: green;position: relative;
				float: right;white-space: nowrap; padding-right: 115px;" 
				value="#{reportBean.sucessMessage}">
			</h:outputText>	
			<h:outputText id="messageId2" name="messageId2" 
				style="font-family: Arial, Helvetica, Sans-Serif;font-size: 10pt;font-weight: bold;color: red;position: relative;
				float: right;white-space: nowrap; padding-right: 115px;" 
				value="#{reportBean.errorMessage}">
			</h:outputText>        
        </div>
    <!-- filter section -->
    <div   class="row">
      <div class="container">
      <div class="filter">  
              <div class="row">
        <div class="col-md-2">
        <h:outputText value="Device Type" styleClass="fontlabel"/>
                <h:selectOneListbox class="form-control" id="deviceName" name="deviceName" value="#{reportBean.deviceName}" size="1" style="width:100%;height:30px;"  >
 					<f:selectItem itemValue="Select Device" itemLabel="Select Device Type" /> 
 					<f:selectItems value="#{sessionScope['deviceNameMap']}" />   
 					<f:ajax listener="#{reportBean.ajaxThroughJavaScript}" event="change"  render="testCaseName reportType marketId filesIds" /> 
 					 					  							
	  		 </h:selectOneListbox >
        </div>
       <div class="col-md-2">
       <h:outputText value="Test Name" styleClass="fontlabel"/>
                  <h:selectOneListbox class="form-control" id="testCaseName" name="testCaseName" value="#{reportBean.testCaseName}" size="1" style="width:100%;height:30px;">
   					<f:selectItem itemValue="Select Test" itemLabel="Select Test Name" /> 
   					<f:selectItems value="#{sessionScope['testNameMap']}" /> 
   					<f:ajax listener="#{reportBean.listener}" event="change"  render="reportType marketId filesIds" />     					  							
			    </h:selectOneListbox> 
        </div>
         <div class="col-md-2">
         <h:outputText value="Report Type" styleClass="fontlabel"/>
               <h:selectOneListbox class="form-control" id="reportType" name="reportType" value="#{reportBean.reportType}" size="1" style="width:100%;height:30px;">
					<f:selectItem itemValue="Select Report" itemLabel="Select Report Type" />
					<f:selectItems value="#{sessionScope['filesOpts']}" />   
					<f:ajax listener="#{reportBean.getMarketsForType}" event="change"  render="marketId filesIds" />  					  							
  				 </h:selectOneListbox> 
        </div>
        <div class="col-md-2">
        <h:outputText value="Market Place" styleClass="fontlabel"/>
		     	<h:selectManyListbox class="form-control" id="marketId" name="marketId" value="#{reportBean.marketId}" size="1" style="width:100%;height:90px;"   >
   					<f:selectItems value="#{sessionScope['marketIdMap']}" /> 
   					<f:ajax listener="#{reportBean.fetchFiles}" event="click"  render="filesIds" />
			    </h:selectManyListbox>
        </div>
            <div class="col-md-2">
          <h:outputText value="Files" styleClass="fontlabel"/>
			       	<h:selectManyListbox class="form-control" id="filesIds" name="filesIds" value="#{reportBean.filesIds}"
			       	 size="1" style="width:100%;height:90px;"   >
   					 <f:selectItems value="#{sessionScope['filesIdsMap']}" /> 
   					 	<script>
   					 var mySelect = document.getElementById("filesIds");
   					 if(null!=mySelect){
   						 var theOptions = mySelect.getElementsByTagName('option');
   	   					for(var i=0; i &lt; theOptions.length; i++) {
   	   					   theOptions[i].title = theOptions[i].label;
   					 }
   					
   					}
   					 	</script>
			    </h:selectManyListbox>
        </div>
              <br/>
        <div class="col-md-2">
       		<INPUT type="button" class="btn btn-success"   id="compare" name="compare" onclick="checkMaxNumberMarkets();" style="width: 130px;font-size:10px" value="Add to compare"/>
        </div>
        
       </div>
       <br></br>
      <div class="row">
       <div class="compare-box cf">
        <div class="col-md-10" >
        <div class="add-compare-placeholder" id="emptyCompare" style="display:none">
             <a href="javascript:void(0);" class="remove">X</a> 
          </div>
          <div id="compareDiv_0" class="compare">
             <a href="javascript:removeFromDiv(0);" class="remove">X</a> 
          </div>
          <div id="compareDiv_1" class="compare">
             <a href="javascript:removeFromDiv(1);" class="remove">X</a>  
          </div>
          <div id="compareDiv_2" class="compare">
             <a href="javascript:removeFromDiv(2);" class="remove">X</a> 
          </div>
          <div id="compareDiv_3" class="compare">
             <a href="javascript:removeFromDiv(3);" class="remove">X</a> 
          </div>
         
        <div class='popup' id='overlay'>
            <div class='popUpContent'>
                <b style="font-size:small;">Enter configuration name</b> <a href='' class='close' title='close'>X</a>
                    <h:inputText id="reportConfigName" name="reportConfigName" value="#{reportBean.reportConfigName}" 
        				style="width:300px;height:45px;padding-top: 5px;" />&nbsp;
        				<div id='saveDiv' style=";">
	        				<h:commandButton class="btn btn-primary" color="blue" id="saveConfig" name="saveConfig"  value="Save" 
	       						action="#{reportBean.saveConfiguration}" >
		       				</h:commandButton> 
	       				</div>
	       				<div id='draftDiv' style=";">
		       				<h:commandButton class="btn btn-primary" color="blue" id="draftConfig" name="draftConfig"  value="Save Draft" 
		       					action="#{reportBean.saveAsDraft}" >
		       				</h:commandButton> 
	       				</div>  
            </div>
        </div>
           <div class='popuptest' id='overlayTest'>
             <div class='popUpContenttest'>
                <!-- <img src='http://www.developertips.net/demos/popup-dialog/img/x.png' alt='quit' class='x' id='x' /> -->
                <b style="font-size:small;">Tests:</b> <a href='' class='close' title='close'>X</a>
		        <table class="tablesorter" id="vqTable">
		           <thead>
		             <tr>
		               <th>Device Name</th>
		               <th>Location</th>
		               <th>Test Values</th>
		               <th>Average</th>
		             </tr>
		           </thead>
		           <tbody>
		             <tr class="tableRow">
		               <td>#{reportBean.deviceName}</td>
		               <td>#{sessionScope['marketName']}</td>
		               <td class="vals">#{sessionScope['primaryDeviceVoice']}</td>
		               <td class="avarageTotal"></td>
		             </tr>
		           </tbody>
		        </table>
            </div>
        </div>
               
        </div>
        <div class="col-md-2" style="float:right;" id="buttonDiv" >
          <div class="compare-btn">
			<h:commandButton class="btn btn-success" style="font-size:10px" id="reportSubmit" name="reportSubmit" action="#{reportBean.generateMapReport}" value="Generate Report" />
         		<br></br><br></br>
                <!-- <INPUT  type="button"  id="draftConfigs" name="draftConfigs" onclick="enableTextBox('draftConfigs');"  value="Add Draft Configuration"/>
         		<br></br><br></br> --> 
               	<INPUT type="button" class="btn btn-success" style="font-size:10px" id="saveConfigs" name="saveConfigs" onclick="enableTextBox('saveConfigs');" value="Save Configuration"/> 
			   	<br></br><br></br>
						<h:commandLink id="exportExtraInfo" style="font-size:10px;"  action="#{reportBean.exportReport1}" >		
							Download Extra Info
						</h:commandLink>
          		<!-- <a href="javascript:enableTextBox('browse');"><h:graphicImage library="images" name="Alarm-Arrow-Up-icon.png" title="browse" style="width:25px; height:25px;"/></a> -->
          </div>
        </div>
       </div>
      </div>
      </div>
      </div>
    </div>
 </div>
 
 
 
 
 <div id="testDetailDiv" style=";">
     <!-- test section -->
      <div class="container">
       <div  class="row" id="containerInnerDiv">
          <div class="col-md-2 device clearfix">
            <div class="device-details">
            <!-- <h2>#{reportBean.deviceName}</h2> -->
            </div>
            <h:inputHidden  id="testValue"  name = "testValue"
 				 value="#{reportBean.testValue}"></h:inputHidden>
           <!-- <div class="device-holder"><h:graphicImage library="images" name="lg-nexus-phone.jpg"/></div> --> 
           <div class="device-holder"><img src="#{reportBean.imageUrl}"></img></div>
           </div> 
          <div class="col-md-10">
             <ul id="myTab">
              <li class="active">
              <a href="#summaryMap" id="voice_QCom" class="first scroll-link" >
                <div class="row">
                <div class="col-sm-1 text-center"><h:graphicImage library="images" name="vq-icon.jpg" /></div>
                <div class="col-sm-4">
                <strong onclick ="activeTab()">Voice Quality</strong>
                  <span class="details scroll-link" data-id="panel-test-one">Details</span>
                </div>
              <div class="col-sm-7 text-center">
                <!--  replaced -->
				<table>
					<tr>
					
                <c:forEach items="#{sessionScope['avgHealthIndexMap']}" var="mapEntry">
				<td>
	            <span title="#{mapEntry.key}" class="chart scroll-link" data-percent="#{mapEntry.value.voicequalityHealthIndex}" data-size="30" data-id="vqTable"> 
              <span class="percent"></span> 
            </span>
			</td>
	      </c:forEach>
		  </tr>
				</table>
                </div>
              </div>
              </a>
              </li>
              <li>
                <a href="#summaryMap">
                <div class="row">
                <div class="col-sm-1 text-center"><h:graphicImage library="images" name="connectivity-icon.jpg" /></div>
                <div class="col-sm-4">
                  <strong>Voice Connectivity</strong>
                  <span class="details scroll-link" data-id="panel-test-two">Details</span>
                 </div>
                <div class="col-sm-7 text-center">
            	<table>
					<tr>
					
                <c:forEach items="#{sessionScope['avgHealthIndexMap']}" var="mapEntry">
				<td>
	            <span title="#{mapEntry.key}" class="chart scroll-link" data-percent="#{mapEntry.value.voiceConnectivityHealthIndex}" data-size="30" data-id="vqTable"> 
              <span class="percent"></span> 
            </span>
			</td>
	      </c:forEach>
		  </tr>
				</table>
                </div>
              </div> 
                </a>
              </li>
              <li>
                <a href="#summaryMap">
                  <div class="row">
                <div class="col-sm-1 text-center"><h:graphicImage  library="images" name="rentention-icon.jpg"/></div>
                <div class="col-sm-4">
                  <strong>Data Connectivity</strong>
                  <span class="details scroll-link" data-id="panel-test-three">Details</span>
                  </div>
                <div class="col-sm-7 text-center">
               <table>
					<tr>
					
                <c:forEach items="#{sessionScope['avgHealthIndexMap']}" var="mapEntry">
				<td>
	            <span title="#{mapEntry.key}" class="chart scroll-link" data-percent="#{mapEntry.value.dataConnectivityHealthIndex}" data-size="30" data-id="vqTable"> 
              <span class="percent"></span> 
            </span>
			</td>
	      </c:forEach>
		  </tr>
				</table>
                </div>
              </div>
                </a>
              </li>
              <li>
                <a href="#summaryMap">
                  <div class="row">
                <div class="col-sm-1 text-center"><h:graphicImage library="images" name="edge-icon.jpg"/></div>
                <div class="col-sm-4">
                   <strong>Simultaneous Voice and Data</strong>
                  <span class="details scroll-link" data-id="panel-test-four">Details</span>
                  </div>
                <div class="col-sm-7 text-center">
               <table>
					<tr>
					
                <c:forEach items="#{sessionScope['avgHealthIndexMap']}" var="mapEntry">
				<td>
	            <span title="#{mapEntry.key}" class="chart scroll-link" data-percent="#{mapEntry.value.voiceDataHealthIndex}" data-size="30" data-id="vqTable"> 
              <span class="percent"></span> 
            </span>
			</td>
	      </c:forEach>
		  </tr>
				</table>
                </div>
              </div>
                </a>
              </li>
              <li>
                <a href="#summaryMap">
                  <div class="row">
                <div class="col-sm-1 text-center"><h:graphicImage library="images" name="browser-speed-icon.jpg"/></div>
                <div class="col-sm-4">
                  <strong>LTE</strong>
                  <span class="details scroll-link" data-id="panel-test-five">Details</span>
                  </div>
                <div class="col-sm-7 text-center">
                 <table>
					<tr>
					
                <c:forEach items="#{sessionScope['avgHealthIndexMap']}" var="mapEntry">
				<td>
	            <span title="#{mapEntry.key}" class="chart scroll-link" data-percent="#{mapEntry.value.lteHealthIndex}" data-size="30" data-id="vqTable"> 
              <span class="percent"></span> 
            </span>
			</td>
	      </c:forEach>
		  </tr>
				</table>
                </div>
              </div>
                </a>
              </li>
              <li>
                <a href="#summaryMap">
                  <div class="row">
                <div class="col-sm-1 text-center"><h:graphicImage library="images" name="browser-speed-icon.jpg"/></div>
                <div class="col-sm-4">
                  <strong>Browser</strong>
                  <span class="details scroll-link" data-id="panel-test-five">Details</span>
                  </div>
                <div class="col-sm-7 text-center">
                 <table>
					<tr>
					
                <c:forEach items="#{sessionScope['avgHealthIndexMap']}" var="mapEntry">
				<td>
	            <span title="#{mapEntry.key}" class="chart scroll-link" data-percent="#{mapEntry.value.browserHealthIndex}" data-size="30" data-id="vqTable"> 
              <span class="percent"></span> 
            </span>
			</td>
	      </c:forEach>
		  </tr>
				</table>
                </div>
              </div>
                </a>
              </li>
              <li>
                <a href="#summaryMap">
                  <div class="row">
                <div class="col-sm-1 text-center"><h:graphicImage library="images" name="browser-speed-icon.jpg"/></div>
                <div class="col-sm-4">
                  <strong>VoIP</strong>
                  <span class="details scroll-link" data-id="panel-test-five">Details</span>
                  </div>
                <div class="col-sm-7 text-center">
               <table>
					<tr>
					
                <c:forEach items="#{sessionScope['avgHealthIndexMap']}" var="mapEntry">
				<td>
	            <span title="#{mapEntry.key}" class="chart scroll-link" data-percent="#{mapEntry.value.voipHealthIndex}" data-size="30" data-id="vqTable"> 
              <span class="percent"></span> 
            </span>
			</td>
	      </c:forEach>
		  </tr>
				</table>
                </div>
              </div>
                </a>
              </li>                            
            </ul>
            <div class="tab-content">
              <div class="tab-pane active" id="summaryMap" >
                 <div id="map-canvas"></div> 
              </div>
              <div class="tab-pane" id="connectivity">
                <div id="map-canvas1"></div>
              </div>
              <div class="tab-pane" id="call-rentention">
                <div id="map-canvas2"></div>
              </div>
              <div class="tab-pane" id="edge">
                <div id="map-canvas3"></div>
              </div>
              <div class="tab-pane" id="browser-speed">
                <div id="map-canvas4"></div>
              </div>
              <div class="tab-pane" id="data-voip">
                <div id="map-canvas5"></div>
              </div>                            
            </div> 
          </div> 
      </div><!--
      <div id="commentContainer"  style="height:100px;overflow: auto">
      <div id="comment" >  
        <h4 class="heading">Coments</h4>
          <div class="demo">
			<ui:repeat value="#{sessionScope['vqtTosList']}" var="value">
  				<h3 class="expand">#{value}</h3>
	            <div class="collapse">
	                <p><i>"#{value} The Device is performing on average"</i></p>
	            </div>
			</ui:repeat>
           </div>
          </div>
      </div>
          Please Comment:
           -->
         <div id="firstPageSpacing" >
        	 <br/> <br/> <br/> <br/><br/> <br/><br/> <br/><br/> <br/><br/> <br/>
         </div>
	<div>
	     <h:commandLink  style="font-size:10px;"  action="#{reportBean.exportVoiceSummaryReport}" >	
			<h5> <h:graphicImage library="images" name="page_right.gif" />	Voice Summary Report </h5>
		</h:commandLink>
			 
		<br/>
		<b>SummaryComments:</b>	
    	<h:inputTextarea class="form-control" value="#{reportBean.testSummaryComment}" name="testSummaryComment" id="testSummaryComment"  cols="5" rows="10" style="height:50px;width:1025px"/>
	
		<h:dataTable id="summaryTable" value="#{sessionScope['vQSummaryCommentsList']}" var="o">
			<h:column>
				<i>"#{o}"</i>
			</h:column>
		</h:dataTable> 

		<ui:repeat value="#{sessionScope['myList']}" var="a">
		    <ui:repeat value="#{a}" var="b">
		    #{b}
		    </ui:repeat>
		</ui:repeat>     
	</div>
      <div class="row">
      <div class="container test-details-box">
  <h2>Test Details</h2>
  

  
 <div id="voiceDiv" style="display:none">
  <div class="panel-group" id="accordion">
  <div class="panel test" id="panel-test-one">
    <div class="test-heading clearfix">
      <h3><i><h:graphicImage library="images" name="vq-icon-big.jpg"
         alt="Airometric Wireless" class="img-responsive"/></i>
         
         
        <b>Voice Quality</b>
        <h:commandLink id="preCalVQ" style="font-size:10px;"  action="#{reportBean.exportPrecalReport}" >		
			<!-- Precalculation  -->
		</h:commandLink>
		<a onclick="setPrecalparam('VQ')" style="cursor: pointer;"><h:graphicImage library="images" name="page_right.gif" />Precalculation info </a>
          <!--<a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapsefour"></a> 
      --></h3>
   <!--    <div class="analysis-box">
        <strong>Analysis: <a href="#">see details</a></strong>
        <ul>
          <li><span class="orangeBgColor">&nbsp;</span>The device under test ( Galaxy) was able to utilize the available network earlier than reference device</li>
          <li><span class="orangeBgColor">&nbsp;</span>The reference device was not able to find a stable channel to sustain a call.</li>
        </ul> 
       <table class="tablesorter" id="vqTable">
           <thead>
             <tr>
               <th>Device Name</th>
               <th>Location</th>
               <th>Test Values</th>
               <th>Average</th>
             </tr>
           </thead>
           <tbody>
             <tr class="tableRow">
               <td>#{reportBean.deviceName}</td>
               <td>#{sessionScope['marketName']}</td>
               <td class="vals">#{sessionScope['primaryDeviceVoice']}</td>
               <td class="avarageTotal"></td>
             </tr>
           </tbody>
        </table>
     </div>-->
     
 
     <div class="container" >
   <!--   <div class="row">
       <div class="col-md-1" style="float:left;">
     <table> 
     <tr><td>Test Name:</td></tr>
	<tr>
			<td height="80">
 <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
		<div title="Seattle East_LG-D801" style="height:50px">
				<b>#{marketName}</b>
				</div>
			
			</c:forEach>
			</td>
		</tr>

</table>
</div>
  <div class="col-md-1" style="float:right;right:80%">
  <table >
  		<tr>
  			<c:forEach
		items="#{sessionScope['testWiseMarketMap']}" var="mapEntry">
		<td>#{mapEntry.key}</td>
		</c:forEach>
  		
  		</tr>
     <tr>
		<c:forEach
		items="#{sessionScope['testWiseMarketMap']}" var="mapEntry">
		<td>
		  <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
			
				<c:forEach items="#{mapEntry.value}" var="testData">
					<c:forEach items="#{testData.value}" var="pref">
						<h:panelGroup rendered="#{testData.key == marketName}">
							<div title = "#{testData.key}_#{pref.deviceName}" style="height:50px">
						<span  class="chart chartBig"
							data-percent="#{pref.voicequalityHealthIndex}" data-size="50"
							data-lineWidth="8"> <span class="percent"></span> </span></div>
						</h:panelGroup>
					</c:forEach>
				</c:forEach>
				
			
	</c:forEach>
	</td>
	</c:forEach>
	</tr>
	</table>
	</div>
	</div>-->
	</div> 
	</div>    
	<div>
		 <b>Voice Quality Comments:</b>
         <h:inputTextarea class="form-control" value="#{reportBean.testCommentKpi1}" name="testCommentKpi1" id="testCommentKpi1" 
          cols="5" rows="10" style="height:50px;width:1025px"/>

         <h:dataTable id="testable" value="#{sessionScope['VQCommentsList']}" var="o">
 			<h:column>
				<i>"#{o}"</i>
			</h:column>
		</h:dataTable>
	</div>
    <div id="collapseOne" class="panel-collapse collapse">
	  <b id="uplink_Label" >Uplink Quality:</b>
	   <div class="row">
              <div id="voiceQtyFirstChart" style="display:none" class="detailsMap"><h:graphicImage library="images" name="vq-icon.jpg" /></div>
              <div id="voiceQtyFirstChartMarket2"  style="display:none" class="vq-compare-networks"><h:graphicImage library="images" name="vq-icon.jpg" /></div>
            </div>
        <div class="row">
          <div id="voiceQtyFirstChartMarket3"  style="display:none" class="uplink-vq"><h:graphicImage library="images" name="vq-icon.jpg" /></div>
          <div id="voiceQtyFirstChartMarket4"  style="display:none" class="downlink-vq"><h:graphicImage library="images" name="vq-icon.jpg" /></div>
        </div>
        <br/><br/><br/><br/><br/><br/>
        <b id="downlink_Label" style="display:none">Downlink Quality:</b>
         <div class="row">
          <div id="voiceQtySecondChartMarket_0" style="display:none" class="uplink-vq"></div>
          <div id="voiceQtySecondChartMarket_1" style="display:none" class="downlink-vq"></div>
        </div>
         <div class="row">
          <div id="voiceQtySecondChartMarket_2" style="display:none" class="uplink-vq"></div>
          <div id="voiceQtySecondChartMarket_3" style="display:none" class="downlink-vq"></div>
        </div>
      <div id="voiceDistributionSpacing" >
        	 <br/> <br/> <br/> <br/><br/> <br/><br/> <br/> <br/><br/> <br/><br/> <br/><br/> <br/> <br/> <br/><br/> <br/><br/> <br/> <br/><br/> <br/><br/> <br/>
         </div>
         <b id="downlinkVoiceQuality_Label" style="display:none">Downlink Voice Quality Distribution:</b>
          <div class="row">
          <div id="voiceQtyThirdChartMarket_0" style="display:none" class="uplink-vq"></div>
          <div id="voiceQtyThirdChartMarket_1" style="display:none" class="downlink-vq"></div>
        </div>
         <div class="row">
          <div id="voiceQtyThirdChartMarket_2" style="display:none" class="uplink-vq"></div>
          <div id="voiceQtyThirdChartMarket_3" style="display:none" class="downlink-vq"></div>
        </div>
        <br/>
            <div id="printspacing" style="display:none">
            </div>
         <div class="row">
        <rich:panel header="Voice Quality" style="min-width: 1100px; height: 100px;" >
            					     <h:graphicImage value="../..#{request.contextPath}/resources/images/star_pink.png" width="15" height="20"/>
								<h:outputText value=" Excellent " styleClass="fontlabel"/>
								<h:graphicImage value="../..#{request.contextPath}/resources/images/star_green.png" width="15" height="20"/>
								<h:outputText value=" Good " styleClass="fontlabel"/>
								<h:graphicImage value="../..#{request.contextPath}/resources/images/star_blue.png" width="15" height="20"/>
								 <h:outputText value=" Fair " styleClass="fontlabel"/>
								<h:graphicImage value="../..#{request.contextPath}/resources/images/star_grey.png" width="15" height="20"/>
								<h:outputText value=" Poor " styleClass="fontlabel"/>
									<h:graphicImage value="../..#{request.contextPath}/resources/images/L-GOOD2.png"/>
							<h:outputText value=" Good(LTE:#{sessionScope['lteupperRangeForGood']}; to #{sessionScope['ltelowerRangeForGood']} ,2G/3G/HSPA/UMTS:#{sessionScope['upperRangeForGood']}; to #{sessionScope['lowerRangeForGood']}) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/L-AVG2.png"/>
							<h:outputText value=" Average(LTE:#{sessionScope['lteupperRangeForAverage']}; to #{sessionScope['ltelowerRangeForAverage']} ,2G/3G/HSPA/UMTS:#{sessionScope['upperRangeForAverage']}; to #{sessionScope['lowerRangeForAverage']}) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/L-BAD2.png"/>
							<h:outputText value=" Bad(LTE:>=#{sessionScope['lteupperRangeForPoor']} 2G/3G/HSPA/UMTS:>=-103) " styleClass="fontlabel"/>
			
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_red.png"/>
							<h:outputText value=" CallDrop " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/circ.JPG"/>
							<h:outputText value=" Cell ID Change " styleClass="fontlabel"/>
        </rich:panel>
        </div>
		
        <div class="row">
        <c:choose>
	      <c:when test="#{not empty sessionScope['VoiceQtydevice0']!=''}">
	      <b><h:outputText value="#{sessionScope['VoiceQtydevice0']}"/></b><br/>
	          <div id="voiceQtyFirstMap"  name="thoughtfocus"></div>
	      </c:when>
	
	      <c:otherwise><div id="voiceQtyFirstMap" style="display:none"></div>
	      </c:otherwise>
	</c:choose>
          <c:if test="#{not empty sessionScope['VoiceQtydevice1']!=''}">
           <b><h:outputText value="#{sessionScope['VoiceQtydevice1']}" style="position: relative;bottom: 19px;left: 20px;"/></b> <br/>
           <div id="voiceQtySecondMap" ></div>
          </c:if>
        </div>
        
        <div class="row">
       <c:choose>
	      <c:when test="#{not empty sessionScope['VoiceQtydevice2']!=''}">
	      <b><h:outputText value="#{sessionScope['VoiceQtydevice2']}"/></b><br/>
	          <div id="voiceQtyThirdMap" ></div>
	      </c:when>
	
	      <c:otherwise><div id="voiceQtyThirdMap" style="display:none"></div>
	      </c:otherwise>
		</c:choose>
          <c:if test="#{not empty  sessionScope['VoiceQtydevice3'] }">
           <b><h:outputText value="#{sessionScope['VoiceQtydevice3']}" style="position: relative;bottom: 19px;left: 20px;"/></b> <br/>
           <div id="voiceQtyFourthMap"></div>
          </c:if>  
        </div>
        
         <div class="row">
        <c:choose>
	      <c:when test="#{not empty sessionScope['VoiceQtydevice4']!=''}">
	      <b><h:outputText value="#{sessionScope['VoiceQtydevice4']}"/></b><br/>
	          <div id="voiceQtyFifthMap" ></div>
	      </c:when>
	
	      <c:otherwise><div id="voiceQtyFifthMap" style="display:none"></div>
	      </c:otherwise>
		</c:choose>
          <c:if test="#{not empty  sessionScope['VoiceQtydevice5'] }">
           <b><h:outputText value="#{sessionScope['VoiceQtydevice5']}" style="position: relative;bottom: 19px;left: 20px;"/></b> <br/>
           <div id="voiceQtySixthMap"></div>
          </c:if>  
        </div>
        
         <div class="row">
         
         <c:choose>
	      <c:when test="#{not empty sessionScope['VoiceQtydevice6']!=''}">
	      <b><h:outputText value="#{sessionScope['VoiceQtydevice6']}"/></b><br/>
	          <div id="voiceQtySeventhMap" ></div>
	      </c:when>
	
	      <c:otherwise><div id="voiceQtyFifthMap" style="display:none"></div>
	      </c:otherwise>
		</c:choose>
          <c:if test="#{not empty  sessionScope['VoiceQtydevice7'] }">
           <b><h:outputText value="#{sessionScope['VoiceQtydevice7']}" style="position: relative;bottom: 19px;left: 20px;"/></b> <br/>
           <div id="voiceQtyEigthMap"></div>
          </c:if>  
        </div>

      </div >
      <div id = "voiceconnectivityspacing" style="display:none">
     </div>
     </div>
     <div class="down-arrow">
        <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapseOne">&nbsp;</a>
      </div>
  </div>
   
 <div class="panel test" id="panel-test-two">

    <div class="test-heading clearfix">
 
      <h3><i><h:graphicImage library="images" name="connectivity-icon-big.jpg"/></i>
        <b>Voice Connectivity</b>
        <a onclick="setPrecalparam('VC')" style="cursor: pointer;"><h:graphicImage library="images" name="page_right.gif" />Precalculation info </a>
          <!--<a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo"></a> 
      --></h3>
<!--       <div class="analysis-box">
        <strong>Analysis: <a href="#">see details</a></strong>
        <ul>
          <li><span class="redBgColor">&nbsp;</span>The device under test ( Galaxy) was able to utilize the available network earlier than reference device</li>
          <li><span class="orangeBgColor">&nbsp;</span>The reference device was not able to find a stable channel to sustain a call.</li>
        </ul> 
                <table class="tablesorter" id="connectivityTable">
                <thead>
                  <tr>
                    <th>Device Name</th>
                    <th>Location</th>
                    <th>Test Values</th>
                    <th>Average</th>
                  </tr>
                </thead>
                <tbody>
                  <tr class="tableRow">
                    <td>LG Nexus 4</td>
                    <td>Seattle, WA</td>
                    <td class="vals">50</td>
                    <td class="avarageTotal"></td>
                  </tr>
                </tbody>
              </table>
              
			<h:dataTable class="tablesorter"  value="#{sessionScope['vqtTosList']}" var="item">
			    <h:column><h:outputText value="#{item.deviceName}" /></h:column>
			    <h:column><h:outputText  value="#{item.testname}" /></h:column>
			     <h:column><h:outputText  value="#{item.marketName}" /></h:column>
			</h:dataTable>
     </div>-->
     <div class="container" >
    <!--   <div class="row">
       <div class="col-md-1" style="float:left;">
     <table> 
     <tr><td>Test Name:</td></tr>
	<tr>
			<td height="80">
 <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
		<div title="Seattle East_LG-D801" style="height:50px">
				<b>#{marketName}</b>
				</div>
			
			</c:forEach>
			</td>
		</tr>

</table>
</div>
  <div class="col-md-1" style="float:right;right:80%">
  <table >
  <tr>
  			<c:forEach
		items="#{sessionScope['testWiseMarketMap']}" var="mapEntry">
		<td>#{mapEntry.key}</td>
		</c:forEach>
  		
  		</tr>
     <tr>
		<c:forEach
		items="#{sessionScope['testWiseMarketMap']}" var="mapEntry">
		<td>
		  <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
			
				<c:forEach items="#{mapEntry.value}" var="testData">
					<c:forEach items="#{testData.value}" var="pref">
						<h:panelGroup rendered="#{testData.key == marketName}">
							<div title = "#{testData.key}_#{pref.deviceName}" style="height:50px">
						<span  class="chart chartBig"
							data-percent="#{pref.voiceConnectivityHealthIndex}" data-size="50"
							data-lineWidth="8"> <span class="percent"></span> </span></div>
						</h:panelGroup>
					</c:forEach>
				</c:forEach>
				
			
	</c:forEach>
	</td>
	</c:forEach>
	</tr>
	</table>
	</div>
	</div>-->
	</div> 
    </div>
     <div>
     	<b>Voice Connectivity Comments:</b>
         <h:inputTextarea class="form-control" value="#{reportBean.testCommentKpi2}" name="testCommentKpi2" id="testCommentKpi2" 
          cols="5" rows="10" style="height:50px;width:1025px"/>
     </div>        
         <div id="collapseTwo" class="panel-collapse collapse">
         

	  
      <div class="row">
       <b id="callSetup_Label" style="display:none">Call Setup:</b>
             <div class="row">
          <div id="voiceConnectivityFirstChartMarket_0" style="display:none" class="uplink-vq"></div>
          <div id="voiceConnectivityFirstChartMarket_1" style="display:none" class="downlink-vq"></div>
        </div>
         <div class="row">
          <div id="voiceConnectivityFirstChartMarket_2" style="display:none" class="uplink-vq"></div>
          <div id="voiceConnectivityFirstChartMarket_3" style="display:none" class="downlink-vq"></div>
        </div>
         <div id="retentionSpacing" style="display:none">
							
							</div>
       <b id="callRetention_Label" style="display:none">Call Retention:</b>  
                   <div class="row">
          <div id="callDropChartMarket_0" style="display:none" class="uplink-vq"></div>
          <div id="callDropChartMarket_1" style="display:none" class="downlink-vq"></div>
        </div>
         <div class="row">
          <div id="callDropChartMarket_2" style="display:none" class="uplink-vq"></div>
          <div id="callDropChartMarket_3" style="display:none" class="downlink-vq"></div>
        </div>
       	<div class="row" style="display:none">
          <div id="voiceConnectivityCallTearDownChartMarket_0" style="display:none" class="uplink-vq"></div>
          <div id="voiceConnectivityCallTearDownChartMarket_1" style="display:none" class="downlink-vq"></div>
        </div>
         <div class="row">
          <div id="voiceConnectivityCallTearDownChartMarket_2" style="display:none" class="uplink-vq"></div>
          <div id="voiceConnectivityCallTearDownChartMarket_3" style="display:none" class="downlink-vq"></div>
        </div>
       	  <div class="row">
          <div id="voiceConnectivityIdleChart_0" style="display:none" class="uplink-vq"></div>
          <div id="voiceConnectivityIdleChart_1" style="display:none" class="downlink-vq"></div>
        </div>
         <div class="row">
          <div id="voiceConnectivityIdleChart_2" style="display:none" class="uplink-vq"></div>
          <div id="voiceConnectivityIdleChart_3" style="display:none" class="downlink-vq"></div>
        </div>
       <br/>
       <div id="connectivitySpacing" style="display:none">
							</div>
        <rich:panel header="Voice Connectivity" style="min-width: 1100px; height: 58px;" >
			<!--  <h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_green.png"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_green.png"/>
							<h:outputText value=" Good(LTE:#{sessionScope['lteupperRangeForGood']}; to #{sessionScope['ltelowerRangeForGood']} ,2G/3G/HSPA/UMTS:#{sessionScope['upperRangeForGood']}; to #{sessionScope['lowerRangeForGood']}) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_blue.png"/>
							<h:outputText value=" Average(LTE:#{sessionScope['lteupperRangeForAverage']}; to #{sessionScope['ltelowerRangeForAverage']} ,2G/3G/HSPA/UMTS:#{sessionScope['upperRangeForAverage']}; to #{sessionScope['lowerRangeForAverage']}) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_black.png"/>
							<h:outputText value=" Bad(LTE:>=#{sessionScope['lteupperRangeForPoor']} 2G/3G/HSPA/UMTS:>=-103) " styleClass="fontlabel"/>
			
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_red.png"/>
							<h:outputText value=" CallDrop " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/circ.JPG"/>
							<h:outputText value=" Cell ID Change " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/rect.JPG"/>
							<h:outputText value=" NetworkType Change " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/both.JPG"/>
							<h:outputText value="Cell ID and NetworkType Change " styleClass="fontlabel"/>-->
							
								<h:graphicImage value="../..#{request.contextPath}/resources/images/L-GOOD2.png"/>
							<h:outputText value=" Good(LTE:#{sessionScope['lteupperRangeForGood']}; to #{sessionScope['ltelowerRangeForGood']} ,2G/3G/HSPA/UMTS:#{sessionScope['upperRangeForGood']}; to #{sessionScope['lowerRangeForGood']}) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/L-AVG2.png"/>
							<h:outputText value=" Average(LTE:#{sessionScope['lteupperRangeForAverage']}; to #{sessionScope['ltelowerRangeForAverage']} ,2G/3G/HSPA/UMTS:#{sessionScope['upperRangeForAverage']}; to #{sessionScope['lowerRangeForAverage']}) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/L-BAD2.png"/>
							<h:outputText value=" Bad(LTE:>=#{sessionScope['lteupperRangeForPoor']} 2G/3G/HSPA/UMTS:>=-103) " styleClass="fontlabel"/>
			
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_red.png"/>
							<h:outputText value=" CallDrop " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/circ.JPG"/>
							<h:outputText value=" Cell ID Change " styleClass="fontlabel"/>
		</rich:panel>
	<div class="row">
        <c:choose>
	      <c:when test="#{not empty sessionScope['VoiceConnectivityDevice0']!=''}">
	      <b><h:outputText value="#{sessionScope['VoiceConnectivityDevice0']}"/></b><br/>
	          <div id="voiceConnectivityFirstMap" ></div>
	      </c:when>
	
	      <c:otherwise><div id="voiceConnectivityFirstMap" style="display:none"></div>
	      </c:otherwise>
		</c:choose>
        <br/>
         <c:if test="#{not empty sessionScope['VoiceConnectivityDevice1']!=''}">
          <b><h:outputText value="#{sessionScope['VoiceConnectivityDevice1']}" style="position: relative;bottom: 40px;left: 20px;"/></b><br/>
          <div id="voiceConnectivitySecondMap" ></div>
         </c:if>
       </div>
       <div class="row">
         <c:choose>
	      <c:when test="#{not empty sessionScope['VoiceConnectivityDevice2']!=''}">
	      <b><h:outputText value="#{sessionScope['VoiceConnectivityDevice2']}"/></b><br/>
	          <div id="voiceConnectivityThirdMap" ></div>
	      </c:when>
	
	      <c:otherwise><div id="voiceConnectivityThirdMap" style="display:none"></div>
	      </c:otherwise>
		</c:choose>
        <br/>
         <c:if test="#{not empty  sessionScope['VoiceConnectivityDevice3'] }">
          <b><h:outputText value="#{sessionScope['VoiceConnectivityDevice3']}" style="position: relative;bottom: 19px;left: 20px;"/></b>
          <div id="voiceConnectivityFourthMap" ></div>
         </c:if> 
       </div>
       <div class="row">
        <c:if test="#{not empty sessionScope['VoiceConnectivityDevice4']!=''}">
         <b><h:outputText value="#{sessionScope['VoiceConnectivityDevice4']}"/></b><br/>
         <div id="voiceConnectivityFifthMap" ></div>
        </c:if>
         <c:choose>
	      <c:when test="#{not empty sessionScope['VoiceConnectivityDevice4']!=''}">
	      <b><h:outputText value="#{sessionScope['VoiceConnectivityDevice4']}"/></b><br/>
	          <div id="voiceConnectivityFifthMap" ></div>
	      </c:when>
	
	      <c:otherwise><div id="voiceConnectivityFifthMap" style="display:none"></div>
	      </c:otherwise>
		</c:choose>
        <br/>
         <c:if test="#{not empty  sessionScope['VoiceConnectivityDevice5'] }">
          <b><h:outputText value="#{sessionScope['VoiceConnectivityDevice5']}" style="position: relative;bottom: 19px;left: 20px;"/></b>
          <div id="voiceConnectivitySixthMap" ></div>
         </c:if> 
       </div>
       
        <div class="row">
        <c:if test="#{not empty sessionScope['VoiceConnectivityDevice6']!=''}">
         <b><h:outputText value="#{sessionScope['VoiceConnectivityDevice6']}"/></b><br/>
         <div id="voiceConnectivitySeventhMap" ></div>
        </c:if>
           <c:choose>
	      <c:when test="#{not empty sessionScope['VoiceConnectivityDevice6']!=''}">
	      <b><h:outputText value="#{sessionScope['VoiceConnectivityDevice6']}"/></b><br/>
	          <div id="voiceConnectivitySeventhMap" ></div>
	      </c:when>
	
	      <c:otherwise><div id="voiceConnectivitySeventhMap" style="display:none"></div>
	      </c:otherwise>
		</c:choose>
        <br/>
         <c:if test="#{not empty  sessionScope['VoiceConnectivityDevice7'] }">
          <b><h:outputText value="#{sessionScope['VoiceConnectivityDevice7']}" style="position: relative;bottom: 19px;left: 20px;"/></b>
          <div id="voiceConnectivityEigthMap" ></div>
         </c:if> 
       </div>
      </div>
     </div>
     <div class="down-arrow">
        <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo">&nbsp;</a>
      </div> 
    </div>
 </div>  
  
<div id="dataDiv1" style="display:none"> 
  <div class="panel test" id="panel-test-three">
    <div class="test-heading clearfix">
      <h3><i><h:graphicImage library="images" name="rentention-icon-big.jpg"/></i>
        <b>Data Connectivity</b>
		<a onclick="setPrecalparam('DC')" style="cursor: pointer;"><h:graphicImage library="images" name="page_right.gif"/>Precalculation info </a>
          <!--<a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapsethree"></a> 
      --></h3>
 <!--     <div class="analysis-box">
         <strong>Analysis: <a href="#">see details</a></strong>
        <ul>
          <li><span class="greenBgColor">&nbsp;</span>The device under test ( Galaxy) was able to utilize the available network earlier than reference device</li>
          <li><span class="greenBgColor">&nbsp;</span>The reference device was not able to find a stable channel to sustain a call.</li>
        </ul> 
         <table class="tablesorter" id="callrententionTable">
           <thead>
             <tr>
               <th>Device Name</th>
               <th>Location</th>
               <th>Test Values</th>
               <th>Average</th>
             </tr>
           </thead>
           <tbody>
             <tr class="tableRow">
               <td>LG Nexus 4</td>
               <td>Seattle, WA</td>
               <td class="vals">50</td>
               <td class="avarageTotal"></td>
             </tr>
           </tbody>
         </table>
     </div>-->
     <div class="container" >
     <div class="row">
       <div class="col-md-1" style="float:left;">
     <table> 
     <tr><td>Test Name:</td></tr>
	<tr>
			<td height="80">
 <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
		<div title="Seattle East_LG-D801" style="height:50px">
				<b>#{marketName}</b>
				</div>
			
			</c:forEach>
			</td>
		</tr>

</table>
</div>
  <div class="col-md-1" style="float:right;right:80%">
  <table >
  <tr>
  			<c:forEach
		items="#{sessionScope['testWiseMarketMap']}" var="mapEntry">
		<td>#{mapEntry.key}</td>
		</c:forEach>
  		
  		</tr>
     <tr>
		<c:forEach
		items="#{sessionScope['testWiseMarketMap']}" var="mapEntry">
		<td>
		  <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
			
				<c:forEach items="#{mapEntry.value}" var="testData">
					<c:forEach items="#{testData.value}" var="pref">
						<h:panelGroup rendered="#{testData.key == marketName}">
							<div title = "#{testData.key}_#{pref.deviceName}" style="height:50px">
						<span  class="chart chartBig"
							data-percent="#{pref.dataConnectivityHealthIndex}" data-size="50"
							data-lineWidth="8"> <span class="percent"></span> </span></div>
						</h:panelGroup>
					</c:forEach>
				</c:forEach>
				
			
	</c:forEach>
	</td>
	</c:forEach>
	</tr>
	</table>
	</div>
	</div>
	</div> 
    </div>
    <div>
        <b>Data Connectivity Comments:</b>     
         <h:inputTextarea class="form-control" value="#{reportBean.testCommentKpi3}" name="testCommentKpi3" id="testCommentKpi3" 
          cols="5" rows="10" style="height:50px;width:1025px"/>
    </div>
    <div id="collapsethree" class="panel-collapse collapse">
      <div class="row">
      <b id="tcp_Label" style="display:none">TCP:</b>
      <a onclick="setPrecalparam('TCP')" style="cursor: pointer;"><h:graphicImage library="images" name="page_right.gif" />Precalculation info </a>
      <div id="DataConnectivityFirstChartMarket_0" style="min-width: 1100px; height: 500px; ;"></div>
      <div id="DataConnectivityFirstChartMarket_1" style="min-width: 1100px; height: 500px; ;"></div>
      <div id="DataConnectivityFirstChartMarket_2" style="min-width: 1100px; height: 500px; ;"></div>
      <div id="DataConnectivityFirstChartMarket_3" style="min-width: 1100px; height: 500px; ;"></div>
       <b id="udp_Label" style="display:none">UDP:</b>
        <a onclick="setPrecalparam('UDP')" style="cursor: pointer;"><h:graphicImage library="images" name="page_right.gif" />Precalculation info </a>
       <div id="DataConnectivityUDPChart" style="min-width: 1100px; height: 500px; ;"></div>
       <div id="DataConnectivityUDPChartMarket_1" style="min-width: 1100px; height: 500px; ;"></div>
       <div id="DataConnectivityUDPChartMarket_2" style="min-width: 1100px; height: 500px; ;"></div>
       <div id="DataConnectivityUDPChartMarket_3" style="min-width: 1100px; height: 500px; ;"></div>
          <!-- <c:forEach items="#{sessionScope['marketWiseDcUdpSUmmary']}" var="mapEntry">
			 <br/><p>Market Name: <h:outputText value="#{mapEntry.key}"/></p>
	            <c:forEach items="#{mapEntry.value}" var="udpData">
	            <p>NetworkType: <h:outputText value="#{udpData.key}"/></p>
	                        <h:dataTable class="tablesorter"  value="#{udpData.value}" var="pref">
	                            <h:column><h:outputText value="#{pref.Qos}"/></h:column>
	                            <h:column><h:outputText value="#{pref.DownloadCapacity}"/></h:column>
	                        </h:dataTable>
	            </c:forEach>
	      </c:forEach> -->
      <b id="dns_Label" style="display:none">DNS:</b>
      <div id="DataConnectivityDNSChart" style="min-width: 1100px; height: 500px; ;"></div>
      <div id="DataConnectivityDNSChartMarket_1" style="min-width: 1100px; height: 500px; ;"></div>
      <div id="DataConnectivityDNSChartMarket_2" style="min-width: 1100px; height: 500px; ;"></div>
      <div id="DataConnectivityDNSChartMarket_3" style="min-width: 1100px; height: 500px; ;"></div>
          <!-- <c:forEach items="#{sessionScope['marketWiseDcDnsSUmmary']}" var="mapEntry">
			 <br/><p>Market Name: <h:outputText value="#{mapEntry.key}"/></p>
	            <c:forEach items="#{mapEntry.value}" var="dnsData">
	            <p>NetworkType: <h:outputText value="#{dnsData.key}"/></p>
	                        <h:dataTable class="tablesorter"  value="#{dnsData.value}" var="pref">
	                            <h:column><h:outputText value="#{pref.MaxLatency}"/></h:column>
	                            <h:column><h:outputText value="#{pref.AvgLatency}"/></h:column>
	                        </h:dataTable>
	            </c:forEach>
	      </c:forEach> -->
     <b id="ftp_Label" style="display:none">FTP:</b>
      <div id="DataConnectivityFTPChart" style="min-width: 1100px; height: 500px; ;"></div>
       <div id="DataConnectivityFTPChartMarket_1" style="min-width: 1100px; height: 500px; ;"></div>
        <div id="DataConnectivityFTPChartMarket_2" style="min-width: 1100px; height: 500px; ;"></div>
         <div id="DataConnectivityFTPChartMarket_3" style="min-width: 1100px; height: 500px; ;"></div>
         
          <div id="DataConnectivityFTPChartTx" style="min-width: 1100px; height: 500px; ;"></div>
       <div id="DataConnectivityFTPChartMarket_1Tx" style="min-width: 1100px; height: 500px; ;"></div>
        <div id="DataConnectivityFTPChartMarket_2Tx" style="min-width: 1100px; height: 500px; ;"></div>
         <div id="DataConnectivityFTPChartMarket_3Tx" style="min-width: 1100px; height: 500px; ;"></div>
      <b id="voip_Label" style="display:none">VOIP:</b>
      <div id="voipFirstChart" style="min-width: 1100px; height: 500px; ;"></div>
      <div id="voipFirstChartMarket_1" style="min-width: 1100px; height: 500px; ;"></div>
      <div id="voipFirstChartMarket_2" style="min-width: 1100px; height: 500px; ; "></div>
      <div id="voipFirstChartMarket_3" style="min-width: 1100px; height: 500px; ;"></div>
                <!-- <c:forEach items="#{sessionScope['marketWiseDcVoipSUmmary']}" var="mapEntry">
			 <br/><p>Market Name: <h:outputText value="#{mapEntry.key}"/></p>
	            <c:forEach items="#{mapEntry.value}" var="voipData">
	            <p>NetworkType: <h:outputText value="#{voipData.key}"/></p>
	                        <h:dataTable class="tablesorter"  value="#{voipData.value}" var="pref">
	                            <h:column><h:outputText value="#{pref.UpstreamMaxJitter}"/></h:column>
	                            <h:column><h:outputText value="#{pref.DownstreamMaxJitter}"/></h:column>
	                            <h:column><h:outputText value="#{pref.SIPBye}"/></h:column>
	                        </h:dataTable>
	            </c:forEach>
	      </c:forEach> -->
      </div>
      <div class="row">
              <br/>
       <rich:panel header="Data Connectivity" style="min-width: 1100px; height: 91px; " >
			<h:graphicImage value="../..#{request.contextPath}/resources/images/L-GOOD2.png"/>
							<h:outputText value=" Good(LTE:#{sessionScope['lteupperRangeForGood']}; to #{sessionScope['ltelowerRangeForGood']} ,2G/3G/HSPA/UMTS:#{sessionScope['upperRangeForGood']}; to #{sessionScope['lowerRangeForGood']}) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/L-AVG2.png"/>
							<h:outputText value=" Average(LTE:#{sessionScope['lteupperRangeForAverage']}; to #{sessionScope['ltelowerRangeForAverage']} ,2G/3G/HSPA/UMTS:#{sessionScope['upperRangeForAverage']}; to #{sessionScope['lowerRangeForAverage']}) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/L-BAD2.png"/>
							<h:outputText value=" Bad(LTE:>=#{sessionScope['lteupperRangeForPoor']} 2G/3G/HSPA/UMTS:>=-103) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_red.png"/>
							<h:outputText value=" CallDrop " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/circ.JPG"/>
							<h:outputText value=" Cell ID Change " styleClass="fontlabel"/>
							<br/>&nbsp;&nbsp;&nbsp;
							<h:graphicImage value="../..#{request.contextPath}/resources/images/star_blue.png"/>&nbsp;&nbsp;&nbsp;
							<h:outputText value="Throughput present" styleClass="fontlabel"/>
		</rich:panel>  
       </div>
       
       <div class="row">
        <c:if test="#{not empty sessionScope['DataConnectivityDevice0']!=''}">
         <b><h:outputText value="#{sessionScope['DataConnectivityDevice0']}"/></b><br/>
         <div id="dataConnectivityFirstMap"></div>
       </c:if>
        <br/>
         <c:if test="#{not empty sessionScope['DataConnectivityDevice1']!=''}">
          <b><h:outputText value="#{sessionScope['DataConnectivityDevice1']}" style="position: relative;bottom: 40px;left: 20px;"/></b><br/>
          <div id="dataConnectivitySecondMap"></div>
         </c:if>
       </div>
       <div class="row">
        <c:if test="#{not empty sessionScope['DataConnectivityDevice2']!=''}">
         <b><h:outputText value="#{sessionScope['DataConnectivityDevice2']}"/></b><br/>
         <div id="dataConnectivityThirdMap" ></div>
        </c:if>
        <br/>
         <c:if test="#{not empty  sessionScope['DataConnectivityDevice3'] }">
          <b><h:outputText value="#{sessionScope['DataConnectivityDevice3']}" style="position: relative;bottom: 19px;left: 20px;"/></b>
          <div id="dataConnectivityFourthMap" ></div>
         </c:if>       
        </div>
        <div class="row">
        <c:if test="#{not empty sessionScope['DataConnectivityDevice4']!=''}">
         <b><h:outputText value="#{sessionScope['DataConnectivityDevice4']}"/></b><br/>
         <div id="dataConnectivityFifthMap" ></div>
        </c:if>
        <br/>
         <c:if test="#{not empty  sessionScope['DataConnectivityDevice5'] }">
          <b><h:outputText value="#{sessionScope['DataConnectivityDevice5']}" style="position: relative;bottom: 19px;left: 20px;"/></b>
          <div id="dataConnectivitySixthMap" ></div>
         </c:if>       
        </div>
        <div class="row">
        <c:if test="#{not empty sessionScope['DataConnectivityDevice6']!=''}">
         <b><h:outputText value="#{sessionScope['DataConnectivityDevice6']}"/></b><br/>
         <div id="dataConnectivitySeventhMap" ></div>
        </c:if>
        <br/>
         <c:if test="#{not empty  sessionScope['DataConnectivityDevice7'] }">
          <b><h:outputText value="#{sessionScope['DataConnectivityDevice7']}" style="position: relative;bottom: 19px;left: 20px;"/></b>
          <div id="dataConnectivityEigthMap" ></div>
         </c:if>       
        </div>
     </div>
     <div class="down-arrow">
        <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapsethree">&nbsp;</a>
      </div>
  </div>
  <div class="panel test" id="panel-test-four">
   <div class="test-heading clearfix">
      <h3><i><h:graphicImage library="images" name="edge-icon-big.jpg"
         alt="Airometric Wireless" class="img-responsive"/></i>
         <b>Simultaneous Voice and Data</b>
          <a onclick="setPrecalparam('VD')" style="cursor: pointer;"><h:graphicImage library="images" name="page_right.gif" />Precalculation info </a>
         <!--
        
          <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapseOne"></a> 
      --></h3>
 <!--       <div class="analysis-box edge">
       <strong>Analysis: <a href="#">see details</a></strong>
        <ul>
          <li><span class="orangeBgColor">&nbsp;</span>The device under test ( Galaxy) was able to utilize the available network earlier than reference device</li>
          <li><span class="greenBgColor">&nbsp;</span>The reference device was not able to find a stable channel to sustain a call.</li>
        </ul> 
                      <table class="tablesorter" id="edgeTable">
                <thead>
                  <tr>
                    <th>Device Name</th>
                    <th>Location</th>
                    <th>Test Values</th>
                    <th>Average</th>
                  </tr>
                </thead>
                <tbody>
                  <tr class="tableRow">
                    <td>LG Nexus 4</td>
                    <td>Seattle, WA</td>
                    <td class="vals">50</td>
                    <td class="avarageTotal"></td>
                  </tr>
                </tbody>
              </table>
     </div>-->
     <div class="container" >
     <div class="row">
       <div class="col-md-1" style="float:left;">
     <table> 
     <tr><td>Test Name:</td></tr>
	<tr>
			<td height="80">
 <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
		<div title="Seattle East_LG-D801" style="height:50px">
				<b>#{marketName}</b>
				</div>
			
			</c:forEach>
			</td>
		</tr>

</table>
</div>
  <div class="col-md-1" style="float:right;right:80%">
  <table >
     <tr>
		<c:forEach
		items="#{sessionScope['testWiseMarketMap']}" var="mapEntry">
		<td>
		  <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
			
				<c:forEach items="#{mapEntry.value}" var="testData">
					<c:forEach items="#{testData.value}" var="pref">
						<h:panelGroup rendered="#{testData.key == marketName}">
							<div title = "#{testData.key}_#{pref.deviceName}" style="height:50px">
						<span  class="chart chartBig"
							data-percent="#{pref.voipHealthIndex}" data-size="50"
							data-lineWidth="8"> <span class="percent"></span> </span></div>
						</h:panelGroup>
					</c:forEach>
				</c:forEach>
				
			
	</c:forEach>
	</td>
	</c:forEach>
	</tr>
	</table>
	</div>
	</div>
	</div> 
    </div>
    <div>
    	 <b>Simultaneous Voice and Data Comments:</b>      
         <h:inputTextarea class="form-control" value="#{reportBean.testCommentKpi4}" name="testCommentKpi4" id="testCommentKpi4" 
          cols="5" rows="10" style="height:50px;width:1025px"/>
    </div>
    <div id="collapsefour" class="panel-collapse collapse">    
      <div class="row">
       <b id="voiceDataTcp_Label" style="display:none">TCP:</b>
        <div id="voiceDataFirstChart" style="min-width: 1100px; height: 500px; ;"></div>
       <div id="voiceDataFirstChartMarket_1" style="min-width: 1100px; height: 500px;; "></div>
       <div id="voiceDataFirstChartMarket_2" style="min-width: 1100px; height: 500px; ;;"></div>
       <div id="voiceDataFirstChartMarket_3" style="min-width: 1100px; height: 500px; ;"></div>
      </div>   
       <div class="row">
        <rich:panel header="Voice and Data" style="min-width: 1100px; height: 58px;" >
	      <h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_green.png"/>
					<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_green.png"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_green.png"/>
							<h:outputText value=" Good(LTE:#{sessionScope['lteupperRangeForGood']}; to #{sessionScope['ltelowerRangeForGood']} ,2G/3G/HSPA/UMTS:#{sessionScope['upperRangeForGood']}; to #{sessionScope['lowerRangeForGood']}) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_blue.png"/>
							<h:outputText value=" Average(LTE:#{sessionScope['lteupperRangeForAverage']}; to #{sessionScope['ltelowerRangeForAverage']} ,2G/3G/HSPA/UMTS:#{sessionScope['upperRangeForAverage']}; to #{sessionScope['lowerRangeForAverage']}) " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_black.png"/>
							<h:outputText value=" Bad(LTE:>=#{sessionScope['lteupperRangeForPoor']} 2G/3G/HSPA/UMTS:>=-103) " styleClass="fontlabel"/>
			
							<h:graphicImage value="../..#{request.contextPath}/resources/images/mm_20_red.png"/>
							<h:outputText value=" CallDrop " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/circ.JPG"/>
							<h:outputText value=" Cell ID Change " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/rect.JPG"/>
							<h:outputText value=" NetworkType Change " styleClass="fontlabel"/>
							<h:graphicImage value="../..#{request.contextPath}/resources/images/both.JPG"/>
							<h:outputText value="Cell ID and NetworkType Change " styleClass="fontlabel"/>
		</rich:panel>
      </div>
          <div class="row">
        <c:if test="#{not empty sessionScope['VoiceandData0']!=''}">
         <b><h:outputText value="#{sessionScope['VoiceandData0']}"/></b><br/>
         <div id="VoiceandDataFirstMap"></div>
       </c:if>
        <br/>
         <c:if test="#{not empty sessionScope['VoiceandData1']!=''}">
          <b><h:outputText value="#{sessionScope['VoiceandData1']}" style="position: relative;bottom: 19px;left: 20px;"/></b><br/>
          <div id="VoiceandDataSecondMap"></div>
         </c:if>
       </div>
       <div class="row">
        <c:if test="#{not empty sessionScope['VoiceandData2']!=''}">
         <b><h:outputText value="#{sessionScope['VoiceandData2']}"/></b><br/>
         <div id="VoiceandDataThirdMap" ></div>
        </c:if>
        <br/>
         <c:if test="#{not empty  sessionScope['VoiceandData3'] }">
          <b><h:outputText value="#{sessionScope['VoiceandData3']}" style="position: relative;bottom: 19px;left: 20px;"/></b>
          <div id="VoiceandDataFourthMap" ></div>
         </c:if>       
        </div>
         <div class="row">
        <c:if test="#{not empty sessionScope['VoiceandData4']!=''}">
         <b><h:outputText value="#{sessionScope['VoiceandData4']}"/></b><br/>
         <div id="VoiceandDataFifthMap" ></div>
        </c:if>
        <br/>
         <c:if test="#{not empty  sessionScope['VoiceandData5'] }">
          <b><h:outputText value="#{sessionScope['VoiceandData5']}" style="position: relative;bottom: 19px;left: 20px;"/></b>
          <div id="VoiceandDataSixthMap" ></div>
         </c:if>       
        </div>
        <div class="row">
        <c:if test="#{not empty sessionScope['VoiceandData6']!=''}">
         <b><h:outputText value="#{sessionScope['VoiceandData6']}"/></b><br/>
         <div id="VoiceandDataSeventhMap" ></div>
        </c:if>
        <br/>
         <c:if test="#{not empty  sessionScope['VoiceandData7'] }">
          <b><h:outputText value="#{sessionScope['VoiceandData7']}" style="position: relative;bottom: 19px;left: 20px;"/></b>
          <div id="VoiceandDataEigthMap" ></div>
         </c:if>       
        </div>
     </div>
     <div class="down-arrow">
        <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapsefour">&nbsp;</a>
      </div>
  </div>
  </div>
  
  
  
  
  
  <div class="panel test" id="panel-test-five" style="display: none">
    <div class="test-heading clearfix">
      <h3><i><h:graphicImage library="images" name="browser-speed-icon-big.jpg"
         alt="Airometric Wireless" class="img-responsive"/></i>
         <b>LTE</b>
         <!--
          <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapsefive"></a> 
      --></h3>
 <!--     <div class="analysis-box">
         <strong>Analysis: <a href="#">see details</a></strong>
        <ul>
          <li><span class="greenBgColor">&nbsp;</span>The device under test ( Galaxy) was able to utilize the available network earlier than reference device</li>
          <li><span class="greenBgColor">&nbsp;</span>The reference device was not able to find a stable channel to sustain a call.</li>
        </ul> 
             <table class="tablesorter" id="browserSpeedTable">
                <thead>
                  <tr>
                    <th>Device Name</th>
                    <th>Location</th>
                    <th>Test Values</th>
                    <th>Average</th>
                  </tr>
                </thead>
                <tbody>
                  <tr class="tableRow">
                    <td>LG Nexus 4</td>
                    <td>Seattle, WA</td>
                    <td class="vals">50</td>
                    <td class="avarageTotal"></td>
                  </tr>
                </tbody>
              </table>
     </div>-->
       <div class="container" >
     <div class="row">
       <div class="col-md-1" style="float:left;">
     <table> 
     <tr><td>Test Name:</td></tr>
	<tr>
			<td height="80">
 <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
		<div title="Seattle East_LG-D801" style="height:50px">
				<b>#{marketName}</b>
				</div>
			
			</c:forEach>
			</td>
		</tr>

</table>
</div>
  <div class="col-md-1" style="float:right;right:80%">
  <table >
     <tr>
		<c:forEach
		items="#{sessionScope['testWiseMarketMap']}" var="mapEntry">
		<td>
		  <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
			
				<c:forEach items="#{mapEntry.value}" var="testData">
					<c:forEach items="#{testData.value}" var="pref">
						<h:panelGroup rendered="#{testData.key == marketName}">
							<div title = "#{testData.key}_#{pref.deviceName}" style="height:50px">
						<span  class="chart chartBig"
							data-percent="#{pref.lteHealthIndex}" data-size="50"
							data-lineWidth="8"> <span class="percent"></span> </span></div>
						</h:panelGroup>
					</c:forEach>
				</c:forEach>
				
			
	</c:forEach>
	</td>
	</c:forEach>
	</tr>
	</table>
	</div>
	</div>
	</div>  
    </div>
    <div>
    	 <b>LTE Comments:</b>      
         <h:inputTextarea class="form-control" value="#{reportBean.testCommentKpi5}" name="testCommentKpi5" id="testCommentKpi5" 
          cols="5" rows="10" style="height:50px;width:1025px"/>
    </div>
    <div id="collapsefive" class="panel-collapse collapse">
    
      <div class="row">
      <b id="tcpLte_Label" style="display:none">TCP_LTE:</b>
      	   <div class="row">
              <div id="DataConnectivityFirstChart_tcp" style="display:none" class="detailsMap"></div>
              <div id="DataConnectivityFirstChart_tcpMarket_1" style="display:none" class="vq-compare-networks"></div>
            </div>
        <div class="row">
          <div id="DataConnectivityFirstChart_tcpMarket_2" style="display:none" class="uplink-vq"></div>
          <div id="DataConnectivityFirstChart_tcpMarket_3" style="display:none" class="downlink-vq"></div>
        </div>
    </div><!--
       <c:forEach items="#{sessionScope['marketWiseDcTcpLteSUmmary']}" var="mapEntry">
			 <br/><br/><p>Market Name: <h:outputText value="#{mapEntry.key}"/></p>
	            <c:forEach items="#{mapEntry.value}" var="tcpData">
	            <br/><br/><p>NetworkType: <h:outputText value="#{tcpData.key}"/></p>
	                        <h:dataTable class="tablesorter"  value="#{tcpData.value}" var="pref">
	                            <h:column><h:outputText value="#{pref.DownloadSpeed}"/></h:column>
	                        </h:dataTable>
	            </c:forEach>
	           </c:forEach>
       --><b id="udpLte_Label" style="display:none">UDP_LTE:</b>
          <div class="row">
              <div id="DataConnectivityUDPChart_udp" style="display:none" class="detailsMap"></div>
              <div id="DataConnectivityUDPChart_udpMarket_1" style="display:none" class="vq-compare-networks"></div>
            </div>
        <div class="row">
          <div id="DataConnectivityUDPChart_udpMarket_2" style="display:none" class="uplink-vq"></div>
          <div id="DataConnectivityUDPChart_udpMarket_3" style="display:none" class="downlink-vq"></div>
        </div>
          <!--<c:forEach items="#{sessionScope['marketWiseDcUdpLteSUmmary']}" var="mapEntry">
			 <br/><br/><p>Market Name: <h:outputText value="#{mapEntry.key}"/></p>
	            <c:forEach items="#{mapEntry.value}" var="udpData">
	            <br/><br/><p>NetworkType: <h:outputText value="#{udpData.key}"/></p>
	                        <h:dataTable class="tablesorter"  value="#{udpData.value}" var="pref">
	                            <h:column><h:outputText value="#{pref.Qos}"/></h:column>
	                            <h:column><h:outputText value="#{pref.DownloadCapacity}"/></h:column>
	                        </h:dataTable>
	            </c:forEach>
	      </c:forEach>      
      --><b id="dnsLte_Label" style="display:none">DNS_LTE:</b>
       <div class="row">
              <div id="DataConnectivityDNSChart_dns" style="display:none" class="detailsMap"></div>
              <div id="DataConnectivityDNSChart_dnsMarket_1" style="display:none" class="vq-compare-networks"></div>
            </div>
        <div class="row">
          <div id="DataConnectivityDNSChart_dnsMarket_2" style="display:none" class="uplink-vq"></div>
          <div id="DataConnectivityDNSChart_dnsMarket_3" style="display:none" class="downlink-vq"></div>
        </div>
     <!--
           <c:forEach items="#{sessionScope['marketWiseDcDnsLteSUmmary']}" var="mapEntry">
			 <br/><br/><p>Market Name: <h:outputText value="#{mapEntry.key}"/></p>
	            <c:forEach items="#{mapEntry.value}" var="dnsData">
	            <br/><br/><p>NetworkType: <h:outputText value="#{dnsData.key}"/></p>
	                        <h:dataTable class="tablesorter"  value="#{dnsData.value}" var="pref">
	                            <h:column><h:outputText value="#{pref.MaxLatency}"/></h:column>
	                            <h:column><h:outputText value="#{pref.AvgLatency}"/></h:column>
	                        </h:dataTable>
	            </c:forEach>
	      </c:forEach>
       --><b id="ftpLte_Label" style="display:none">FTP_LTE:</b>
      <div id="DataConnectivityFTPChart_lte" style="min-width: 1100px; height: 500px; ;"></div>
      <b id="downLinkVoiceQualityLte_Label" style="display:none">Downlink Voice Quality Distribution LTE:</b>
             <div class="row">
              <div id="voiceQtyThirdChartMarketLte_0" style="display:none" class="detailsMap"></div>
              <div id="voiceQtyThirdChartMarketLte_1" style="display:none" class="vq-compare-networks"></div>
            </div>
        <div class="row">
          <div id="voiceQtyThirdChartMarketLte_2" style="display:none" class="uplink-vq"></div>
          <div id="voiceQtyThirdChartMarketLte_3" style="display:none" class="downlink-vq"></div>
        </div>
      <b id="callSetupLte_Label" style="display:none">Call Setup LTE:</b>
            <div class="row">
              <div id="voiceConnectivityFirstChart_lte_0" style="display:none" class="detailsMap"></div>
              <div id="voiceConnectivityFirstChart_lte_1" style="display:none" class="vq-compare-networks"></div>
            </div>
        <div class="row">
          <div id="voiceConnectivityFirstChart_lte_2" style="display:none" class="uplink-vq"></div>
          <div id="voiceConnectivityFirstChart_lte_3" style="display:none" class="downlink-vq"></div>
        </div>
       <b id="callRetentionLte_Label" style="display:none">Call Retention LTE:</b>
             <div class="row">
              <div id="voiceConnectivitySecondChart_lte_0" style="display:none" class="detailsMap"></div>
              <div id="voiceConnectivitySecondChart_lte_1" style="display:none" class="vq-compare-networks"></div>
            </div>
        <div class="row">
          <div id="voiceConnectivitySecondChart_lte_2" style="display:none" class="uplink-vq"></div>
          <div id="voiceConnectivitySecondChart_lte_3" style="display:none" class="downlink-vq"></div>
        </div>
       	<div id="voiceConnectivitySecondChart_lte" style="min-width: 1100px; height: 300px; ;"></div>
       <br/>
      </div>
</div>
     <div class="down-arrow" style="display: none">
        <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapsefive">&nbsp;</a>
      </div>
  
  
 <div id="browserDiv" style="display:none"> 
    <div class="panel test" id="panel-test-six">
    <div class="test-heading clearfix">
      <h3><i><h:graphicImage library="images" name="browser-speed-icon-big.jpg"
         alt="Airometric Wireless" class="img-responsive"/></i>
        <b>Browser</b>
          <!--<a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapsesix"></a> 
      --></h3>
 
     <div class="container" >
     <div class="row">
       <div class="col-md-1" style="float:left;">
     <table> 
     <tr><td>Test Name:</td></tr>
	<tr>
			<td height="80">
 <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
		<div title="Seattle East_LG-D801" style="height:50px">
				<b>#{marketName}</b>
				</div>
			
			</c:forEach>
			</td>
		</tr>

</table>
</div>
  <div class="col-md-1" style="float:right;right:80%">
  <table >
     <tr>
		<c:forEach
		items="#{sessionScope['testWiseMarketMap']}" var="mapEntry">
		<td>
		  <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
			
				<c:forEach items="#{mapEntry.value}" var="testData">
					<c:forEach items="#{testData.value}" var="pref">
						<h:panelGroup rendered="#{testData.key == marketName}">
							<div title = "#{testData.key}_#{pref.deviceName}" style="height:50px">
						<span  class="chart chartBig"
							data-percent="#{pref.browserHealthIndex}" data-size="50"
							data-lineWidth="8"> <span class="percent"></span> </span></div>
						</h:panelGroup>
					</c:forEach>
				</c:forEach>
				
			
	</c:forEach>
	</td>
	</c:forEach>
	</tr>
	</table>
	</div>
	</div>
	</div>  
      <div class="analysis-box">
<!--         <strong>Analysis: <a href="#">see details</a></strong>
        <ul>
          <li><span class="greenBgColor">&nbsp;</span>The device under test ( Galaxy) was able to utilize the available network earlier than reference device</li>
          <li><span class="greenBgColor">&nbsp;</span>The reference device was not able to find a stable channel to sustain a call.</li>
        </ul> -->
             <table class="tablesorter" id="browserSpeedTable">
                <thead>
                  <tr>
                    <th>Device Name</th>
                    <th>Location</th>
                    <th>Test Name</th>
                    <th>Page Download Throughput</th>
                    <th>Average Time</th>
                  </tr>
                </thead>
                <tbody>
             
             	  <c:forEach items="#{sessionScope['browserBeanList']}" var="mapEntry">
	            <c:forEach items="#{mapEntry.value}" var="tcpData">
	            
            <tr> 
             <td>#{tcpData.deviceName}</td>  
               <td>#{tcpData.marketName}</td>  
                 <td>#{tcpData.testName}</td>  
                   <td>#{tcpData.pageDownloadSpeed}Kbps</td>  
                    <td>#{tcpData.avgTime}</td>  
             </tr>  
	            </c:forEach>
	           </c:forEach> 
                </tbody>
              </table>
     </div>
    </div>
    <div>
    	 <b>Browser Comments:</b>      
             <h:inputTextarea class="form-control" value="#{reportBean.testCommentKpi6}" name="testCommentKpi6" id="testCommentKpi6" 
          		cols="5" rows="10" style="height:50px;width:1025px"/>
  
    </div>
  </div>
  </div>
  <div  id="voipDiv" style="display:none"> 
  
  
    <div class="panel test" id="panel-test-seven">
    <div class="test-heading clearfix">
      <h3><i><h:graphicImage library="images" name="browser-speed-icon-big.jpg"
         alt="Airometric Wireless" class="img-responsive"/></i>
        <b>VoIP</b>
          <!--<a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapseseven"></a> 
      --></h3>
 
     <div class="container" >
     <div class="row">
       <div class="col-md-1" style="float:left;">
     <table> 
     <tr><td>Test Name:</td></tr>
	<tr>
			<td height="80">
 <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
		<div title="Seattle East_LG-D801" style="height:50px">
				<b>#{marketName}</b>
				</div>
			
			</c:forEach>
			</td>
		</tr>

</table>
</div>
  <div class="col-md-1" style="float:right;right:80%">
  <table >
     <tr>
		<c:forEach
		items="#{sessionScope['testWiseMarketMap']}" var="mapEntry">
		<td>
		  <c:forEach
		items="#{sessionScope['marketList']}" var="marketName">
			
				<c:forEach items="#{mapEntry.value}" var="testData">
					<c:forEach items="#{testData.value}" var="pref">
						<h:panelGroup rendered="#{testData.key == marketName}">
							<div title = "#{testData.key}_#{pref.deviceName}" style="height:50px">
						<span  class="chart chartBig"
							data-percent="#{pref.voipHealthIndex}" data-size="50"
							data-lineWidth="8"> <span class="percent"></span> </span></div>
						</h:panelGroup>
					</c:forEach>
				</c:forEach>
				
			
	</c:forEach>
	</td>
	</c:forEach>
	</tr>
	</table>
	</div>
	</div>
	</div>      
      <div class="analysis-box">
<!--         <strong>Analysis: <a href="#">see details</a></strong>
        <ul>
          <li><span class="greenBgColor">&nbsp;</span>The device under test ( Galaxy) was able to utilize the available network earlier than reference device</li>
          <li><span class="greenBgColor">&nbsp;</span>The reference device was not able to find a stable channel to sustain a call.</li>
        </ul> -->
             <table class="tablesorter" id="browserSpeedTable">
                <thead>
                  <tr>
                    <th>Device Name</th>
                    <th>Location</th>
                    <th>voipSipRegister</th>
                    <th>voipDownAvgJitter</th>
                    <th>voipUpAvgJitter</th>
                    <th>voipSipBye</th>
                    <th>voipSipInvite</th>
                     <th>Rx ThroughPut</th>
                    <th>Tx ThroughPut</th>
                  </tr>
                </thead>
          <tbody>
                	  <c:forEach items="#{sessionScope['voipBeanList']}" var="mapEntry">
	            <c:forEach items="#{mapEntry.value}" var="infos">
	            
            <tr> 
             <td>#{infos.deviceName}</td>  
               <td>#{infos.marketName}</td>  
                 <td>#{infos.voipSipRegister}</td>  
                   <td>#{infos.voipDownAvgJitter}</td>  
                    <td>#{infos.voipUpAvgJitter}</td> 
                     <td>#{infos.voipSipBye}</td>  
                    <td>#{infos.voipSipInvite}</td> 
                    <td>#{infos.voipRxThroughPut}</td>  
                    <td>#{infos.voipTxThroughPut}</td> 
             </tr>  
	            </c:forEach>
	           </c:forEach>  
                </tbody>
              </table>
     </div>
    </div>
    <div>
    	 <b>VoIP Comments:</b>      
             <h:inputTextarea class="form-control" value="#{reportBean.testCommentKpi7}" name="testCommentKpi7" id="testCommentKpi7" 
          		cols="5" rows="10" style="height:50px;width:1025px"/>
    </div>
  </div>
  </div>
  </div>
</div>
</div>

</div>
      <div>
      <footer align="center">2014 Airometric Wireless Inc. All rights reserved.</footer>
      </div>
 
      <input type="hidden" name="selectedMarkets" id= "selectedMarkets"  />
      <input type="hidden" name="numberTimesCallMade" id= "numberTimesCallMade"  />
      
     </h:form>
    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
	 <h:outputScript library="js" name="bootstrap.min.js"  />
     
       <h:outputScript library="js" name="initialize.js"  />
       <h:outputScript library="js" name="jquery.easing.min.js"  />
       <h:outputScript library="js" name="jquery.easypiechart.js"  />
        <h:outputScript library="js" name="jquery.tablesorter.js"  />
         <h:outputScript library="js" name="jquery.tablesorter.widgets.js"  />
         <h:outputScript library="js" name="expand.js"  />
         <h:outputScript library="js" name="reportSelection.js"/> 

          
     
     
<!--   <script type="text/javascript" value="js/jquery.js"></script>
  <script type="text/javascript" value="js/bootstrap.min.js"></script>
  <script value="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script> 
  <script value="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.min.js"></script>
  <script value="js/angular.easypiechart.min.js"></script>-->
  <script>
  /* <![CDATA[ */
  $(function() {
   $(".chart").each(function() {
   var percent = $(this).attr('data-percent');
   if (percent<30) {var colorCode = '#ea2a2a';}
   if (percent>30) {var colorCode = '#f48c37';}
   if (percent>60) {var colorCode = '#39b54a';}
   var col = colorCode;
   var size = $(this).attr('data-size');
   var lineWidth = $(this).attr('data-lineWidth');
    $(this).easyPieChart({
      easing: 'easeOutBounce',
      barColor: col,
      lineWidth: lineWidth,
      size:size,
      onStep: function(from, to, percent) {
				$(this.el).find('.percent').text(Math.round(percent));
			}
    });
		var chartOrange = window.chart = $(this).data('easyPieChart');
    //update instance after 1 sec
    setTimeout(function() {chartOrange.update(Math.round(percent));}, 1000);
		$('#addToCompare').on('click', function() {chartOrange.update(Math.round(percent));
    });
		});

   //tabs
   $('#myTab a').click(function (e) {
        e.preventDefault();
        $(this).tab('show');
        });

    // navigation click actions 
      $('.scroll-link').on('click', function(event){
        event.preventDefault();
        var sectionID = $(this).attr("data-id");
        scrollToID('#' + sectionID, 1000);
      });

     // scroll function
    function scrollToID(id, speed){
      var offSet = 50;
      var targetOffset = $(id).offset().top;
      $('html,body').animate({scrollTop:targetOffset}, speed);
      
    }
     

		});
  /* ]]> */
</script>
 <script type="text/javascript">
 /* <![CDATA[ */
     //tablesorter 
     $('.tablesorter').tablesorter();
     $('.tableRow').each(function() {
      var totalVal = 0,
        iCount = $(this).find('td.vals').length;
        var avarageTotal = $(this).find('td.avarageTotal');
    $(this).find('td.vals').each(function(i,val){
        totalVal = totalVal + parseInt($(val).text());
     avarageTotal.html(parseInt(totalVal/iCount));
    }); 
    }); 
   $('#j_idt10\\:addToCompare').removeAttr('checked');
   function checkBoxClicked(){
	   var checkBox = document.getElementById("addToCompare");
	   var testVal = "#{sessionScope['jusforFun']}";
	   var myFunny = "#{sessionScope['myFunny']}";
	   var marketPlace = "#{sessionScope['marketName']}";
	      if (checkBox.checked) {
	          //chart.update();
	        var text = $('#j_idt10\\:deviceName').find('option').filter(':selected').text();
	        var testVar = '0';//#{sessionScope['voiceQualityVal']};
	              var optionValue = $('#j_idt9\\:deviceName').find('option').filter(':selected').val();
	              //var historyIteam = '<lable><input type="checkbox" value="'+ optionValue + '">' + text + '</lable>';
	              var historyIteam = '<div class="row borderTop"><div class="col-sm-1 text-center"></div><div class="col-sm-5"></div> <div class="col-sm-4"><strong class="deviceName">' +text+ '</strong></div><div class="col-sm-2 text-center"><span class="chart scroll-link" data-percent='+testVal+' data-id="edgeTable"><span class="percent"></span></span></div></div>';
	              $('#voice_QCom').append(historyIteam)
	               $(".chart").each(function() {
	               var percent = $(this).attr('data-percent');
	               if (percent<30) {var colorCode = '#ea2a2a';}
	               if (percent>30) {var colorCode = '#f48c37';}
	               if (percent>60) {var colorCode = '#39b54a';}
	               var col = colorCode;
	               var size = $(this).attr('data-size');
	               var lineWidth = $(this).attr('data-lineWidth');
	                $(this).easyPieChart({
	                  easing: 'easeOutBounce',
	                  barColor: col,
	                  lineWidth: lineWidth,
	                  size:size,
	                  onStep: function(from, to, percent) {
	                    $(this.el).find('.percent').text(Math.round(percent));
	                  }
	                });
	                var chartOrange = window.chart = $(this).data('easyPieChart');
	                //update instance after 1 sec
	                setTimeout(function() {chartOrange.update(Math.round(percent));}, 1000);
	                $('#addToCompare').on('click', function() {chartOrange.update(Math.round(percent));
	                });
	                });
	      // add two rows
	        var row = '<tr class="tableRow"><td>' +text+ '</td><td>'+marketPlace+'</td><td class="vals">'+testVal+'</td><td class="avarageTotal"></td></tr>',
	          $row = $(row),
	          // resort table using the current sort; set to false to prevent resort, otherwise 
	          // any other value in resort will automatically trigger the table resort. 
	          resort = true;
	        $('#vqTable').find('tbody').append($row)
	          .trigger('addRows', [$row, resort]);
	          //tablesorter 
	       $('#vqTable').tablesorter();
	       $('.tableRow').each(function() {
	        var totalVal = 0,
	          iCount = $(this).find('td.vals').length;
	          var avarageTotal = $(this).find('td.avarageTotal');
	      $(this).find('td.vals').each(function(i,val){
	          totalVal = totalVal + parseInt($(val).text());
	       avarageTotal.html(parseInt(totalVal/iCount));
	      }); 
	      }); 
	      };
   }
  
    /* ]]> */
    var placeholder = "hello";
    
$('.remove-compare-box').click(function() { 
$(this).parents('.compare-box').fadeOut(1000);
});

</script>
  </body>
</html>
   