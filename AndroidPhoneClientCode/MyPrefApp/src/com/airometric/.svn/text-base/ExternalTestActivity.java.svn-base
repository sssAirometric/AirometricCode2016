package com.airometric;

import java.io.File;
import java.net.URL;
import java.util.LinkedHashMap;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;

import com.airometric.api.APIManager;
import com.airometric.api.ResponseCodes;
import com.airometric.config.Constants;
import com.airometric.config.Messages;
import com.airometric.config.StringUtils;
import com.airometric.dialogs.AppAlert;
import com.airometric.storage.Preferences;
import com.airometric.utility.DeviceUtil;
import com.airometric.utility.FileUtil;
import com.airometric.utility.L;
import com.airometric.utility.NotificationUtil;
import com.airometric.utility.TimeUtil;
import com.airometric.utility.Validator;

public class ExternalTestActivity extends AppActivity {

	private Button btnStartTest, btnStopTest;
	Context context = null;
	private TextView lblStatus;
	File logFile;
	boolean isTestRunning = false;
	String sTestname = "";
	EditText txtTestName;
	private Spinner marketplaceSpinner;

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// To setup the title bar
		setAppTitle(R.layout.external_test);
		context = this;

		Bundle bndle = this.getIntent().getExtras();
		if (bndle != null) {
		}

		initLayouts();
	}

	/**
	 * To initialize the layout and assign listeners for that fields.
	 */

	private void initLayouts() {
		L.log("Initialize Layouts...");

		isTestRunning = pref.isExternalTestRunning();

		txtTestName = (EditText) findViewById(R.id.txtTestName);

		btnStartTest = (Button) findViewById(R.id.btnStartTest);
		btnStartTest.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View view) {
				startTest();
			}
		});
		btnStopTest = (Button) findViewById(R.id.btnStopTest);
		btnStopTest.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View view) {
				stopTest();
			}
		});

		lblStatus = (TextView) findViewById(R.id.lblTestStatus);
		
		marketplaceSpinner = (Spinner) findViewById(R.id.spinner_marketplace);
		if (StringUtils.MARKET_PLACES_MAP == null) {
			Preferences preferences = new Preferences(activity);
			StringUtils.MARKET_PLACES_MAP = 
				new LinkedHashMap<String, String>(preferences.loadMarketplaces());
		}
		ArrayAdapter<String> marketplaceAdapter = new ArrayAdapter<String>
				(this, android.R.layout.simple_spinner_item, 
						StringUtils.getStringArray(StringUtils.MARKET_PLACES_MAP.keySet()));
		marketplaceAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		marketplaceSpinner.setAdapter(marketplaceAdapter);

		if (isTestRunning) {
			txtTestName.setVisibility(View.INVISIBLE);
			lblStatus.setText("Test Running");
			btnStartTest.setEnabled(false);
			btnStopTest.setEnabled(true);
		} else {
			lblStatus.setText("");
			btnStartTest.setEnabled(true);
			btnStopTest.setEnabled(false);
		}
	}

	protected void startTest() {

		String sTestName = txtTestName.getText().toString();
		if (Validator.isEmpty(sTestName)) {
			alert(Messages.ENTER_TEST_NAME);
			return;
		}
		pref.setExternalTestRunningState(true);

		DeviceUtil dv = new DeviceUtil(activity);
		String sDeviceInfoXML = dv.getDeviceInfo("externaltest", sTestName,
				pref.getUsername(), StringUtils.MARKET_PLACES_MAP.get(marketplaceSpinner.getSelectedItem().toString()));
		L.debug(sDeviceInfoXML);

		String sCurrTime = TimeUtil.getCurrentTimeFilename();

		FileUtil.CURRENT_EXT_TESTTIME = sCurrTime;
		String path = FileUtil.EXT_LOG_DIR + "deviceinfo" + "_" + sTestName
				+ "_" + sCurrTime + ".xml";
		File fle = new File(path);
		if (fle.exists()) {
			fle.delete();
		}
		String dev_info_path = FileUtil.writeToXMLFile(path, sDeviceInfoXML);
		debug("Device info initial data written into " + dev_info_path);

		pref.putValue(Preferences.KEY_CURRENT_EXT_DEV_INFO_PATH, dev_info_path);

		pref.setExternalTestName(sTestName);
		try {
			Airometric app = (Airometric) getApplication();
			app.startListeners(dev_info_path);
		} catch (Exception e) {
			e.printStackTrace();
		}
		NotificationUtil.cancelNotification(activity, StringUtils.TEST_TYPE_CODE_EXTERNAL);
		NotificationUtil.showRunningNotification(context,
				StringUtils.TEST_TYPE_CODE_EXTERNAL);

		new AppAlert(activity, Messages.EXT_TEST_STARTED) {
			@Override
			public void okClickListener() {
				initLayouts();
				// showActivity(TestTypeActivity.class);
			}
		};
	}

	protected void stopTest() {

		pref.setExternalTestRunningState(false);
		uploadResults();
	}

	void uploadResults() {
		new AppAlert(activity, Messages.TEST_STOPPED) {
			@Override
			public void okClickListener() {
				UloadTestResultTask uploadTask = new UloadTestResultTask();
				uploadTask.execute();
				showActivity(TestTypeActivity.class);
			}
		};

	}

	private class UloadTestResultTask extends AsyncTask<URL, Integer, String> {

		protected void onProgressUpdate(Integer... progress) {

		}

		protected void onPostExecute(Long result) {

		}

		@Override
		protected String doInBackground(URL... urls) {
			doUploadResult();
			return "Started";
		}
	}

	protected void doUploadResult() {
		DeviceUtil dv = new DeviceUtil(context);
		String sEndInfo = dv.getEndInfo();

		Preferences pref = new Preferences(context);
		String dev_info_path = FileUtil.writeToXMLFile(
				pref.getValue(Preferences.KEY_CURRENT_EXT_DEV_INFO_PATH, ""),
				sEndInfo);
		L.debug("Device info end data written into " + dev_info_path);

		doUpload(dev_info_path);
	}

	private void doUpload(final String dev_info_path) {

		L.debug("Device Info Path --> " + dev_info_path);

		Message msg = new Message();
		Bundle bndle = new Bundle();

		String sResponseCode = "", sResponseDesc = "";

		DeviceUtil dv = new DeviceUtil(context);
		String sEndInfo = dv.getEndInfo();

		String sXMLContent = FileUtil.readFile(dev_info_path);
		if (sXMLContent.indexOf(sEndInfo) == -1) {
			FileUtil.writeToXMLFile(dev_info_path, sEndInfo);
			L.debug("Device info end data not exist and now written into " + dev_info_path);
		}
		try {
			APIManager apiClient = new APIManager(context);

			APIManager.Status status = apiClient
					.processUploadSingle(dev_info_path);

			if (status == APIManager.Status.ERROR) {
				sResponseCode = StringUtils.ERROR_CODE;
				sResponseDesc = apiClient.getErrorMessage();
			} else {
				String sResponse = apiClient.getResponse();
				L.debug("Upload Response :: " + sResponse);
				if (sResponse != null
						&& sResponse.trim().equalsIgnoreCase(
								ResponseCodes.SUCCESS_UPLOAD)) {
					sResponseCode = ResponseCodes.SUCCESS;
					sResponseDesc = "Result uploaded!";
				} else {
					sResponseCode = ResponseCodes.FAILURE;
					sResponseDesc = sResponse;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			sResponseCode = StringUtils.ERROR_CODE;
			sResponseDesc = Messages.err(e);
		}
		if (Constants.DELETE_FILES_AFTER_UPLOAD)
			if (sResponseCode.equals(ResponseCodes.SUCCESS)) {
				// Delete log files
				FileUtil.delete(dev_info_path);
			}
		bndle.putString(StringUtils.CODE, sResponseCode);
		bndle.putString(StringUtils.DESC, sResponseDesc);
		msg.setData(bndle);
		progressHandler.sendMessage(msg);
	}

	/**
	 * Handling the message while progressing
	 */

	private Handler progressHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {

			// ###################
			String sNotifiMsg = "";
			String sResponseCode = msg.getData().getString(StringUtils.CODE);
			String sResponseDesc = msg.getData().getString(StringUtils.DESC);

			if (sResponseCode.equals(ResponseCodes.SUCCESS)) {
				L.debug("File upload success");
				sNotifiMsg = "Success";
			} else if (sResponseCode.equals(ResponseCodes.FAILURE)) {
				L.debug("Error occured while uploading.");
				sNotifiMsg = "Error occured while uploading.";
			} else {
				sNotifiMsg = sResponseDesc;
				L.debug(sResponseDesc);
			}
			DeviceUtil.updateTestScreen();
			NotificationUtil.showFinishedNotification(context, StringUtils.TEST_TYPE_CODE_EXTERNAL,
					pref.getExternalTestName(), sNotifiMsg);
		}
	};

	@Override
	public void goBack() {
		showActivity(TestTypeActivity.class);
	}
}